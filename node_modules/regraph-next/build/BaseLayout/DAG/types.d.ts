import { LinkType } from './Link';
import { Point } from '../../Utils/graph';
declare type NodeId = string | number;
interface InputRelation {
    sourceId: NodeId;
    targetId: NodeId;
    isCycleRelation?: boolean;
}
interface InputNode<T extends InputRelation> {
    id: NodeId;
    downRelations: T[];
    upRelations: T[];
    nodeWidth?: number;
    nodeHeight?: number;
}
interface OutputRelation<T> {
    sourceId: NodeId;
    targetId: NodeId;
    path: string;
    pathPoint: Point[];
    info: T;
}
interface OutputNode<T> {
    id: NodeId;
    view: {
        x: number;
        y: number;
    };
    nodeWidth: number;
    nodeHeight: number;
    info: T;
}
interface InternalUpGradeNode<ON, OL> {
    id: NodeId;
    sourceLinks: InternalUpGradeLink<ON, OL>[];
    targetLinks: InternalUpGradeLink<ON, OL>[];
    nodeWidth: number;
    nodeHeight: number;
    type: 'real' | 'virtual';
    originInfo: ON;
    linkNumber?: number;
    levelSetted?: boolean;
    isBone?: boolean;
    parentBoneNode?: InternalUpGradeNode<ON, OL>[];
    childrenBoneNode?: InternalUpGradeNode<ON, OL>[];
    level?: number;
    levelPos?: number;
    _levelPos?: number;
    _median?: number;
    pos?: number;
    sourceNodeIndex?: number;
    finalPos?: {
        x: number;
        y: number;
    };
}
declare class InternalUpGradeLink<ON, OL> {
    source: InternalUpGradeNode<ON, OL>;
    target: InternalUpGradeNode<ON, OL>;
    isCycleRelation?: boolean;
    originInfo: OL;
    linkChildren?: InternalUpGradeLink<ON, OL>[];
    sourcePos?: number;
    targetPos?: number;
    isReverse?: boolean;
    turnYIndex?: number;
    turnYCount?: number;
    turnYValue?: number;
    finalPath?: Point[];
}
declare class BaseConfig {
    defaultVirtualNodeWidth?: number;
    nodeAndNodeSpace?: number;
    paddingLineSpace?: number;
    levelSpace?: number;
    linkType?: LinkType;
    DiyLine?: any;
    _isLinkMerge?: boolean;
}
declare class DAGAIUConfig extends BaseConfig {
    defaultNodeWidth?: number;
    defaultNodeHeight?: number;
    margin?: {
        left: number;
        right: number;
        top: number;
        bottom: number;
    };
    padding?: number;
    isTransverse?: boolean;
    getNodeKey?: (node: any) => string;
    getLinkKey?: (relation: any) => string;
}
declare class BaseDAGConfig extends BaseConfig {
}
export { NodeId, InputNode, InputRelation, OutputNode, OutputRelation, InternalUpGradeNode, InternalUpGradeLink, DAGAIUConfig, BaseDAGConfig, };
