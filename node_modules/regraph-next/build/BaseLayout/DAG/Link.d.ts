import { InternalUpGradeNode, InternalUpGradeLink, DAGAIUConfig } from './types';
import { Point } from '../../Utils/graph';
export declare type LinkType = 'straightLine' | 'polyline' | 'diy';
export declare class StraightLine<Node, Relation> {
    private nodesByLevel;
    private selfLinks;
    private config;
    private nodeLinkByLevelSourceNodeCount;
    constructor(nodesByLevel: InternalUpGradeNode<Node, Relation>[][], selfLinks: InternalUpGradeLink<Node, Relation>[], config: DAGAIUConfig);
    calcPosAndPadding(): number[];
    getFinalPath(link: InternalUpGradeLink<Node, Relation>, levelPaddings: number[], isLast: boolean, isFirst: boolean): Point[];
    getSelfFinalPath(link: InternalUpGradeLink<Node, Relation>): Point[];
}
export declare class Polyline<Node, Relation> {
    private nodesByLevel;
    private selfLinks;
    private config;
    private turnYMap;
    private nodeLinkByLevelSourceNodeCount;
    constructor(nodesByLevel: InternalUpGradeNode<Node, Relation>[][], selfLinks: InternalUpGradeLink<Node, Relation>[], config: DAGAIUConfig);
    calcPosAndPadding(): any[];
    getLevelTurnYIndex(level: number): number;
    getFinalPath(link: InternalUpGradeLink<Node, Relation>, levelPaddings: number[], isLast: boolean, isFirst: boolean): Point[];
    getSelfFinalPath(link: InternalUpGradeLink<Node, Relation>): Point[];
}
declare function LinkGenerator(type: LinkType, DiyLine?: any): any;
export default LinkGenerator;
