import { InputNode, InputRelation, OutputNode, OutputRelation, NodeId, InternalUpGradeNode, InternalUpGradeLink, DAGAIUConfig } from './types';
import BaseDAG from './BaseDAG';
declare class DAGAIU<Node extends InputNode<Relation>, Relation extends InputRelation> {
    private config;
    constructor(DAGConfig?: DAGAIUConfig);
    _preprocess(data: Node[]): {
        nodes: InternalUpGradeNode<Node, Relation>[];
        links: InternalUpGradeLink<Node, Relation>[];
        selfLinks: InternalUpGradeLink<Node, Relation>[];
    };
    _getDAG(data: Node[]): BaseDAG<Node, Relation>;
    getSingleDAG(data: Node[]): {
        nodes: OutputNode<Node>[];
        links: OutputRelation<Relation>[];
        pos: {
            width: number;
            height: number;
        };
    };
    getMultiDAG(data: Node[]): {
        nodes: OutputNode<Node>[];
        links: OutputRelation<Relation>[];
        pos: {
            width: number;
            height: number;
        };
    };
    dfs(node: Node, result: Node[], queueId: number, nodeMarkMap: Map<NodeId, {
        node: Node;
        queueId: number;
    }>): void;
    _separateNodes(data: Node[]): Node[][];
}
export default DAGAIU;
