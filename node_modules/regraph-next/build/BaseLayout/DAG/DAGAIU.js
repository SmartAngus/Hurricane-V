"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BaseDAG_1 = require("./BaseDAG");
var utils_1 = require("../../Utils/utils");
var defaultDAGAIUConfig = {
    isTransverse: false,
    defaultNodeWidth: 180,
    defaultNodeHeight: 50,
    nodeAndNodeSpace: 40,
    paddingLineSpace: 30,
    levelSpace: 80,
    margin: {
        left: 180,
        right: 180,
        top: 50,
        bottom: 50
    },
    padding: 200,
    linkType: 'polyline',
    DiyLine: function () { },
    _isLinkMerge: true,
};
var emptyDAG = {
    nodes: [],
    links: [],
    pos: {
        width: 0,
        height: 0
    }
};
var DAGAIU = (function () {
    function DAGAIU(DAGConfig) {
        if (DAGConfig === void 0) { DAGConfig = {}; }
        this.config = defaultDAGAIUConfig;
        this.config = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, this.config), { defaultVirtualNodeWidth: DAGConfig.isTransverse ? 0.1 : 180 }), DAGConfig);
    }
    DAGAIU.prototype._preprocess = function (data) {
        var _this = this;
        var nodeMap = new Map();
        var linkMap = new Map();
        var nodes = [];
        var links = [];
        var selfLinks = [];
        data.forEach(function (node) {
            if (node && node.id && !nodeMap.has(node.id)) {
                var newNode = {
                    id: node.id,
                    sourceLinks: [],
                    targetLinks: [],
                    type: 'real',
                    nodeWidth: _this.config.isTransverse
                        ? node.nodeHeight || _this.config.defaultNodeHeight
                        : node.nodeWidth || _this.config.defaultNodeWidth,
                    nodeHeight: _this.config.isTransverse
                        ? node.nodeWidth || _this.config.defaultNodeWidth
                        : node.nodeHeight || _this.config.defaultNodeHeight,
                    originInfo: node
                };
                var key = _this.config.getNodeKey ? _this.config.getNodeKey(node) : node.id;
                nodeMap.set(key, newNode);
                nodes.push(newNode);
            }
        });
        data.forEach(function (node) {
            if (node && node.id) {
                tslib_1.__spread(node.downRelations, node.upRelations).forEach(function (relation) {
                    var sourceId = relation.sourceId, targetId = relation.targetId;
                    var key = _this.config.getLinkKey ? _this.config.getLinkKey(relation) : sourceId + "-" + targetId;
                    var sourceNode = nodeMap.get(sourceId);
                    var targetNode = nodeMap.get(targetId);
                    if (sourceNode && targetNode && !linkMap.has(key)) {
                        var newRelation = {
                            source: sourceNode,
                            target: targetNode,
                            originInfo: relation,
                            isReverse: false,
                        };
                        if (sourceId === targetId) {
                            linkMap.set(key, newRelation);
                            selfLinks.push(newRelation);
                        }
                        else {
                            linkMap.set(key, newRelation);
                            links.push(newRelation);
                            sourceNode.sourceLinks.push(newRelation);
                            targetNode.targetLinks.push(newRelation);
                        }
                    }
                });
            }
        });
        return {
            nodes: nodes,
            links: links,
            selfLinks: selfLinks
        };
    };
    DAGAIU.prototype._getDAG = function (data) {
        var _a = this._preprocess(data), nodes = _a.nodes, links = _a.links, selfLinks = _a.selfLinks;
        var _b = this.config, defaultVirtualNodeWidth = _b.defaultVirtualNodeWidth, nodeAndNodeSpace = _b.nodeAndNodeSpace, paddingLineSpace = _b.paddingLineSpace, levelSpace = _b.levelSpace, linkType = _b.linkType, DiyLine = _b.DiyLine, _isLinkMerge = _b._isLinkMerge;
        var dag = new BaseDAG_1.default({
            nodes: nodes,
            links: links,
            selfLinks: selfLinks,
            config: {
                defaultVirtualNodeWidth: defaultVirtualNodeWidth,
                nodeAndNodeSpace: nodeAndNodeSpace,
                paddingLineSpace: paddingLineSpace,
                levelSpace: levelSpace,
                linkType: linkType,
                DiyLine: DiyLine,
                _isLinkMerge: _isLinkMerge,
            }
        });
        return dag;
    };
    DAGAIU.prototype.getSingleDAG = function (data) {
        if (!data || !data.length) {
            return emptyDAG;
        }
        if (this.config.isTransverse) {
            var ans_1 = this._getDAG(data)
                .run()
                .getOutput(this.config.margin.bottom, this.config.margin.left);
            var width = ans_1.pos.width + this.config.margin.top + this.config.margin.bottom;
            var height = ans_1.pos.height + this.config.margin.left + this.config.margin.right;
            return {
                nodes: ans_1.nodes.map(function (node) {
                    return tslib_1.__assign(tslib_1.__assign({}, node), { nodeWidth: node.nodeHeight, nodeHeight: node.nodeWidth, view: {
                            x: node.view.y,
                            y: node.view.x,
                        } });
                }),
                links: ans_1.links.map(function (link) {
                    return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: "" + link.path
                            .map(function (point, index) {
                            if (index === 0)
                                return "M" + point.y + "," + point.x;
                            return "L" + point.y + "," + point.x;
                        })
                            .join(' ') });
                }),
                pos: {
                    width: height,
                    height: width,
                }
            };
        }
        var ans = this._getDAG(data)
            .run()
            .getOutput(this.config.margin.left, this.config.margin.top);
        return tslib_1.__assign(tslib_1.__assign({}, ans), { links: ans.links.map(function (link) {
                return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: "" + link.path
                        .map(function (point, index) {
                        if (index === 0)
                            return "M" + point.x + "," + point.y;
                        return "L" + point.x + "," + point.y;
                    })
                        .join(' ') });
            }), pos: {
                width: ans.pos.width + this.config.margin.left + this.config.margin.right,
                height: ans.pos.height + this.config.margin.top + this.config.margin.bottom
            } });
    };
    DAGAIU.prototype.getMultiDAG = function (data) {
        var _this = this;
        if (!data || !data.length) {
            return emptyDAG;
        }
        var nodesList = this._separateNodes(data);
        if (nodesList.length === 1) {
            return this.getSingleDAG(nodesList[0]);
        }
        else {
            var widthList_1 = [];
            var heightList_1 = [];
            var dagInstanceList = nodesList.map(function (nodes) {
                var dag = _this._getDAG(nodes).run();
                var _a = dag.getSize(), width = _a.width, height = _a.height;
                widthList_1.push(width);
                heightList_1.push(height);
                return dag;
            });
            if (this.config.isTransverse) {
                var height_1 = utils_1.maxBy(heightList_1, function (width) {
                    return width;
                }) + this.config.margin.left + this.config.margin.right;
                var width_1 = widthList_1.reduce(function (pre, width, index) {
                    if (index === 0) {
                        return pre + width;
                    }
                    return pre + width + _this.config.padding;
                }, 0) +
                    this.config.margin.top +
                    this.config.margin.bottom;
                var result_1 = dagInstanceList.reduce(function (pre, dag) {
                    var addWidth = pre.addWidth;
                    var curheight = dag.getSize().height;
                    var ans = dag.getOutput(addWidth, (height_1 - curheight) / 2);
                    return {
                        nodes: tslib_1.__spread(pre.nodes, ans.nodes),
                        links: tslib_1.__spread(pre.links, ans.links),
                        addWidth: addWidth + _this.config.padding + ans.pos.width
                    };
                }, {
                    nodes: [],
                    links: [],
                    addWidth: this.config.margin.top
                });
                return {
                    nodes: result_1.nodes.map(function (node) {
                        return tslib_1.__assign(tslib_1.__assign({}, node), { nodeWidth: node.nodeHeight, nodeHeight: node.nodeWidth, view: {
                                x: node.view.y,
                                y: node.view.x,
                            } });
                    }),
                    links: result_1.links.map(function (link) {
                        return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: "" + link.path
                                .map(function (point, index) {
                                if (index === 0)
                                    return "M" + point.y + "," + point.x;
                                return "L" + point.y + "," + point.x;
                            })
                                .join(' ') });
                    }),
                    pos: {
                        width: height_1,
                        height: width_1
                    }
                };
            }
            var height_2 = utils_1.maxBy(heightList_1, function (height) {
                return height;
            }) +
                this.config.margin.top +
                this.config.margin.bottom;
            var width = widthList_1.reduce(function (pre, width, index) {
                if (index === 0) {
                    return pre + width;
                }
                return pre + width + _this.config.padding;
            }, 0) +
                this.config.margin.left +
                this.config.margin.right;
            var result = dagInstanceList.reduce(function (pre, dag, index) {
                var addWidth = pre.addWidth;
                var curheight = dag.getSize().height;
                var ans = dag.getOutput(addWidth, (height_2 - curheight) / 2);
                return {
                    nodes: tslib_1.__spread(pre.nodes, ans.nodes),
                    links: tslib_1.__spread(pre.links, ans.links),
                    addWidth: addWidth + _this.config.padding + ans.pos.width
                };
            }, {
                nodes: [],
                links: [],
                addWidth: this.config.margin.left
            });
            return {
                nodes: result.nodes,
                links: result.links.map(function (link) {
                    return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: "" + link.path
                            .map(function (point, index) {
                            if (index === 0)
                                return "M" + point.x + "," + point.y;
                            return "L" + point.x + "," + point.y;
                        })
                            .join(' ') });
                }),
                pos: {
                    width: width,
                    height: height_2
                }
            };
        }
    };
    DAGAIU.prototype.dfs = function (node, result, queueId, nodeMarkMap) {
        var _this = this;
        tslib_1.__spread(node.upRelations, node.downRelations).forEach(function (link) {
            var nodeId = link.targetId !== node.id ? link.targetId : link.sourceId;
            if (nodeMarkMap.has(nodeId)) {
                if (nodeMarkMap.get(nodeId).queueId === -1) {
                    var targetNode = nodeMarkMap.get(nodeId).node;
                    nodeMarkMap.set(nodeId, {
                        node: targetNode,
                        queueId: queueId
                    });
                    result.push(targetNode);
                    _this.dfs(targetNode, result, queueId, nodeMarkMap);
                }
                else {
                    if (nodeMarkMap.get(nodeId).queueId !== queueId) {
                        throw new Error("\u56FE\u6570\u636E\u5F02\u5E38, " + nodeId + "\uFF0C" + node.id);
                    }
                }
            }
        });
    };
    DAGAIU.prototype._separateNodes = function (data) {
        var _this = this;
        var nodeMarkMap = new Map();
        data.forEach(function (node) {
            if (!nodeMarkMap.has(node.id)) {
                nodeMarkMap.set(node.id, {
                    node: node,
                    queueId: -1
                });
            }
        });
        var result = [];
        var index = 0;
        data.forEach(function (node) {
            if (nodeMarkMap.get(node.id).queueId === -1) {
                result[index] = [];
                result[index].push(node);
                var targetNode = nodeMarkMap.get(node.id).node;
                nodeMarkMap.set(node.id, {
                    node: targetNode,
                    queueId: index
                });
                _this.dfs(node, result[index], index, nodeMarkMap);
                index++;
            }
        });
        return result;
    };
    return DAGAIU;
}());
exports.default = DAGAIU;
//# sourceMappingURL=DAGAIU.js.map