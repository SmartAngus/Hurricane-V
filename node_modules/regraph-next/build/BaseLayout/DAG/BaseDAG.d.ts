import { InputNode, InputRelation, InternalUpGradeNode, InternalUpGradeLink, BaseDAGConfig } from './types';
declare class BaseDAG<Node extends InputNode<Relation>, Relation extends InputRelation> {
    private nodes;
    private links;
    private selfLinks;
    private virtualId;
    private config;
    private width;
    private height;
    private paddingSum;
    private levelPaddings;
    private levelMap;
    private nodesByLevel;
    private nodesLevelMaxHeight;
    private dfsVisited;
    private linkInstace;
    constructor({ nodes, links, selfLinks, config }: {
        nodes: InternalUpGradeNode<Node, Relation>[];
        links: InternalUpGradeLink<Node, Relation>[];
        selfLinks: InternalUpGradeLink<Node, Relation>[];
        config: BaseDAGConfig;
    });
    destroy(): void;
    getOutput(left: number, top: number): {
        nodes: {
            id: string | number;
            view: {
                x: number;
                y: number;
            };
            nodeWidth: number;
            nodeHeight: number;
            info: Node;
        }[];
        links: {
            sourceId: string | number;
            targetId: string | number;
            path: import("../../Utils/graph").Point[];
            info: Relation;
        }[];
        pos: {
            width: number;
            height: number;
        };
    };
    run(): this;
    getSize(): {
        width: number;
        height: number;
    };
    calcLinkPos(): void;
    calcRealSize(): void;
    addVirtualNode(): void;
    dfsOrder(node: InternalUpGradeNode<Node, Relation>): void;
    initOrder(): void;
    wmedian(index: number): void;
    crossing(): number;
    transpose(): number;
    ordering(): void;
    findTypeConflicts(): InternalUpGradeLink<Node, Relation>[];
    verticalAlignment(vert: 'u' | 'd', typeConflicts: InternalUpGradeLink<Node, Relation>[]): {
        root: any;
        align: any;
    };
    horizontalCompaction(root: any, align: any, horiz: 'l' | 'r'): any;
    getDirectNodesByLevel(vert: 'u' | 'd', horiz: 'l' | 'r'): void;
    resetLevel(): void;
    xcordinate(): void;
    findSmallestWidthAlignment(xSet: any): {
        minSet: any;
        minDirect: string;
    };
    alignCoordinates(xSet: any, smallestWidth: any, direct: string): void;
    balance(xSet: any): any;
    calcNodePos(): void;
    recoverCycle(): void;
    clearCycleDfs(node: InternalUpGradeNode<Node, Relation>, stack: (string | number)[], isFirst: boolean): void;
    exchangeLink(link: InternalUpGradeLink<Node, Relation>): void;
    clearCycle(): void;
    calcNodeLevels(): void;
}
export default BaseDAG;
