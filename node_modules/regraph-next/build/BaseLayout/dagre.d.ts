import * as dagre from 'dagre';
import { Vertex, BaseVertex, Edge, BaseEdge, VertexGroup } from '../type';
import { Point } from '../Utils/graph';
import { BaseGroupLayout } from './base';
export interface LayoutVertex extends BaseVertex {
    name?: string;
    width: number;
    height: number;
    x?: number;
    y?: number;
    isMount?: boolean;
    opacity?: number;
    widthPath?: number[];
    heightPath?: number[];
    xPath?: number[];
    yPath?: number[];
    opacityPath?: number[];
}
export interface LayoutGroupVertex extends BaseVertex {
    name: string;
    expand: boolean;
    width?: number;
    height?: number;
    x?: number;
    y?: number;
    isMount?: boolean;
    opacity?: number;
    widthPath?: number[];
    heightPath?: number[];
    xPath?: number[];
    yPath?: number[];
    opacityPath?: number[];
}
export interface LayoutEdge extends BaseEdge {
    points?: Point[];
    isMount?: boolean;
    opacity?: number;
    opacityPath?: number[];
}
export declare class GraphLayout<N extends LayoutVertex, NL extends LayoutEdge> extends BaseGroupLayout<N, NL, any> {
    config: dagre.GraphLabel;
    constructor(nodes: Array<Vertex<N>>, links: Array<Edge<NL>>, config: dagre.GraphLabel);
    init(): void;
    layout(): {
        nodes: Vertex<N>[];
        links: Edge<NL>[];
    };
}
interface GroupConfig {
    dagreConfig: dagre.GraphLabel;
    defaultGroupWidth: number;
    defaultGroupHeight: number;
    groupPadding: number[];
}
export declare class GroupGraphLayout<N extends LayoutVertex, NL extends LayoutEdge, G extends LayoutGroupVertex, GL extends LayoutEdge> extends BaseGroupLayout<N, NL, G> {
    groupLinks: Edge<GL>[];
    groupNodeMap: Map<string, VertexGroup<N, G>>;
    groupLinkMap: Map<string, NL[]>;
    config: GroupConfig;
    renderGroups: VertexGroup<N, G>[];
    renderNodes: Vertex<N>[];
    renderNodeLinks: Edge<NL>[];
    renderGroupLinks: Edge<NL & {
        uGroupId: string;
        vGroupId: string;
        groupPoints: [Point[], Point[], Point[]];
    }>[];
    preRenderGroups: VertexGroup<N, G>[];
    preRenderNodes: Vertex<N>[];
    preRenderNodeLinks: Edge<NL>[];
    preRenderGroupLinks: Edge<NL & {
        uGroupId: string;
        vGroupId: string;
        groupPoints: [Point[], Point[], Point[]];
    }>[];
    constructor(nodes: Array<Vertex<N>>, links: Array<Edge<NL>>, groups: Array<VertexGroup<N, G>>, groupLinks: Array<Edge<GL>>, config: GroupConfig);
    init(nodes: Array<Vertex<N>>, links: Array<Edge<NL>>, groups: Array<VertexGroup<N, G>>, groupLinks: Array<Edge<GL>>, config: GroupConfig): void;
    getGroupNodeMap(): void;
    getDownGroup(groupId: string): Array<VertexGroup<N, G>>;
    processGroupConnect(g: dagre.graphlib.Graph, groupId: string, nodeId?: string, forceNoExpand?: boolean): void;
    getLayoutInGroup(group: VertexGroup<N, G>): {
        vertexes: N[];
        edges: NL[];
    };
    getGroupSize(): void;
    groupLayout(): {
        nodes: any[];
        nodeLinks: NL[];
        groupLinks: (NL & {
            uGroupId: string;
            vGroupId: string;
            groupPoints: [Point[], Point[], Point[]];
        })[];
    };
    getTween(start: number, end: number): number[];
    getAnimationPath(pre: LayoutVertex | LayoutGroupVertex, current: LayoutVertex | LayoutGroupVertex): {
        widthPath: number[];
        heightPath: number[];
        xPath: number[];
        yPath: number[];
    };
    animation(): void;
    update(nodes: Array<Vertex<N>>, links: Array<Edge<NL>>, groups: Array<VertexGroup<N, G>>, groupLinks: Array<Edge<GL>>, config: GroupConfig): void;
    layout(): {
        renderGroups: VertexGroup<N, G>[];
        renderNodes: Vertex<N>[];
        renderNodeLinks: Edge<NL>[];
        renderGroupLinks: Edge<NL & {
            uGroupId: string;
            vGroupId: string;
            groupPoints: [Point[], Point[], Point[]];
        }>[];
    };
}
export {};
