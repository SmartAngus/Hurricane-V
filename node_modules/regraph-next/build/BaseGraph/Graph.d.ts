import { GraphConfig, OutputGraphVertex } from "./type";
import { BaseVertex, BaseEdge, Vertex, Edge } from '../type';
declare class _GraphVertex<V, E> {
    id: string;
    edges: _GraphEdge<V, E>[];
    origin: V;
    constructor(config: {
        id: string;
        edges: _GraphEdge<V, E>[];
        origin: V;
    });
    getEdge(id: string, isDirect: boolean): _GraphEdge<V, E>;
    getEdges(isDirect: boolean, direct?: 'in' | 'out'): _GraphEdge<V, E>[];
    getAdjacentVertexes(isDirect: boolean, direct?: 'in' | 'out'): _GraphVertex<V, E>[];
}
declare class _GraphEdge<V, E> {
    u: _GraphVertex<V, E>;
    v: _GraphVertex<V, E>;
    origin: E;
    constructor(config: {
        u: _GraphVertex<V, E>;
        v: _GraphVertex<V, E>;
        origin: E;
    });
}
declare class Graph<V extends BaseVertex, E extends BaseEdge> {
    private vertexes;
    private edges;
    private _graph;
    private _graphMap;
    private _graphReady;
    private graphConfig;
    private visited;
    constructor(vertexes: Array<Vertex<V>>, edges: Array<Edge<E>>, graphConfig?: GraphConfig);
    _createGraph(): _GraphVertex<V, E>[];
    _defaultIsDfs(id: string): boolean;
    dfs<N extends {
        id: string;
    }, R>(vertex: N, getAdjacentVertexes: (source: N) => N[], callback: (source: N, target: N, preCallBackResult: R, index: number) => R, isDfs?: (id: string) => boolean, callBackResult?: R, _isFirst?: boolean): void;
    getEdge(u: string, v: string): _GraphEdge<V, E>;
    getVertex(id: string): _GraphVertex<V, E>;
    getAdjacentVertexes(id: string, direct?: 'in' | 'out'): _GraphVertex<V, E>[];
    getGraph(nodeId?: string): OutputGraphVertex<Vertex<V>, Edge<E>>;
    updateVertex(vertex: V): void;
    updateEdge(edge: E): void;
    updateGraph(vertexes: Array<Vertex<V>>, edges: Array<Edge<E>>, changeVertex?: (newV: V, oldV: V) => V, changeEdge?: (newE: E, oldE: E) => E): void;
}
export default Graph;
