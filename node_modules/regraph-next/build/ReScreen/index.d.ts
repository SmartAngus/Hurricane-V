import * as React from 'react';
import { ZoomTransform, ZoomBehavior } from 'd3-zoom';
import './ReScreen.css';
import { Point } from '../Utils/graph';
export declare class ButtonsProps {
    handleFullScreen: () => void;
    handleResetPosition: () => void;
    handleShowAll: () => void;
    handleResetStatus: () => void;
    handleResize: (isLarge: boolean) => void;
    handleResizeTo: (scale: number) => void;
    handleFocusTarget: (evt: any, focusEnabled: number) => void;
    handleApplyTransform: (transform: ZoomTransform) => void;
    handleLocation: (point: Point) => void;
    handleAdapt: () => void;
    handleSyncMiniMapView: () => void;
    screenWidth: number;
    screenHeight: number;
}
declare class MiniMapProps {
    screenToMapTransform: ZoomTransform;
    transform: ZoomTransform;
}
declare class Props {
    type?: 'SVG' | 'DOM' | 'CANVAS';
    height?: number | string;
    width?: number | string;
    zoomEnabled?: boolean;
    focusEnabled?: number;
    minZoom?: number;
    maxZoom?: number;
    dragDirection?: 'ALL' | 'HOR' | 'VER';
    needMinimap?: boolean;
    miniMapZoomEnabled?: boolean;
    autoHideMiniMap?: boolean;
    onMiniMapShowAndHide?: (show: boolean) => void;
    contentRange?: [Point, Point];
    minimap?: (props: MiniMapProps) => React.ReactElement<any> | React.ReactElement<MiniMapProps>;
    mapPosition?: 'RT' | 'RB' | 'LT' | 'LB' | 'RT-IN' | 'RB-IN' | 'LT-IN' | 'LB-IN';
    mapPadding?: number;
    mapWidth?: number;
    mapHeight?: number;
    mapRectStyle?: object;
    Buttons?: React.ReactElement<any>;
    needRefresh?: boolean;
    resetNeedRefresh?: () => void;
    onScreenChange?: (transform: ZoomTransform) => void;
    getScreenHandler?: (params: ButtonsProps) => void;
    screenHeight?: number | string;
    scaleExtent?: [number, number];
    translateExtent?: [[number, number], [number, number]];
    onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;
    onContextMenu?: (event: React.MouseEvent<HTMLDivElement>) => void;
    onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void;
    onDrop?: (event: React.DragEvent<HTMLDivElement>) => void;
    draggable?: boolean;
}
declare class State {
    screenToMapTransform: ZoomTransform;
    animation: boolean;
    showMiniMap: boolean;
}
export default class ReScreen extends React.Component<Props, State> {
    static defaultProps: {
        type: string;
        width: string;
        height: string;
        needMinimap: boolean;
        zoomEnabled: boolean;
        minZoom: number;
        maxZoom: number;
        dragDirection: string;
        mapPosition: string;
        mapWidth: number;
        mapHeight: number;
        mapPadding: number;
        autoHideMiniMap: boolean;
        miniMapZoomEnabled: boolean;
        draggable: boolean;
    };
    useMapWidth: boolean;
    ReScreenDOM: any;
    screenDOM: any;
    screen: any;
    screenWidth: number;
    screenHeight: number;
    screenContent: any;
    minimap: any;
    screenZoom: ZoomBehavior<any, any>;
    mapZoom: ZoomBehavior<any, any>;
    screenTransform: ZoomTransform;
    minimapTransform: ZoomTransform;
    transform: ZoomTransform;
    handleBrowserResizeFn: any;
    state: {
        screenToMapTransform: ZoomTransform;
        animation: boolean;
        showMiniMap: boolean;
    };
    rectRef: any;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    componentDidUpdate(prevProps: Props, prevState: State): void;
    componentWillUnmount(): void;
    init(): void;
    initEvent(): void;
    handleSyncMiniMapView: () => void;
    getScreenHandler(): void;
    filter(isMiniMap: boolean): boolean;
    bindZoom(): void;
    isZoomValid(newScale: any): boolean;
    getScreenSize(): void;
    getBBox(): any;
    getScreenToMapTransform: () => void;
    handleScreenChange(): void;
    cancelAnimation(): void;
    applyTransform: (transform: any) => void;
    handleApplyTransform: (transform: ZoomTransform) => void;
    handleFullScreen: () => void;
    handleResetPosition: () => void;
    handleShowAll: () => void;
    handleAdapt: () => void;
    handleResetStatus: () => void;
    handleResize: (isLarger?: boolean) => void;
    handleResizeTo: (newScale: number, P0?: [number, number]) => void;
    handleLocation: (point: Point) => void;
    handleFocusTarget: (evt: any, focusEnabled: number) => void;
    renderButtons(Buttons: React.ReactElement<any>): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    clReScreenContent(screenToMapTransform: any): void;
    renderCustomMiniMap(): JSX.Element;
    checkShowMiniMap(): boolean;
    renderMinimap(mapWidth: number, mapHeight: number, mapPosition: any): JSX.Element;
    renderScreenContent(): JSX.Element;
    render(): JSX.Element;
}
export {};
