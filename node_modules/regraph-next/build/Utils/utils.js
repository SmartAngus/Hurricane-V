"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function find(array, func) {
    for (var i = 0; i < array.length; i++) {
        if (func(array[i])) {
            return array[i];
        }
    }
    return undefined;
}
exports.find = find;
function findIndex(array, func) {
    for (var i = 0; i < array.length; i++) {
        if (func(array[i])) {
            return i;
        }
    }
    return -1;
}
exports.findIndex = findIndex;
function minBy(array, fn) {
    return array.reduce(function (pre, cur) {
        if (!pre)
            return cur;
        if (fn(cur) < fn(pre))
            return cur;
        return pre;
    }, undefined);
}
exports.minBy = minBy;
function maxBy(array, fn) {
    return array.reduce(function (pre, cur) {
        if (!pre)
            return cur;
        if (fn(cur) > fn(pre))
            return cur;
        return pre;
    }, undefined);
}
exports.maxBy = maxBy;
function sumBy(array, fn) {
    return array.reduce(function (pre, cur) {
        return pre + (fn(cur) || 0);
    }, 0);
}
exports.sumBy = sumBy;
function reverseArray(array, func) {
    var tmpArray = [];
    for (var i = array.length - 1; i >= 0; i--) {
        tmpArray.push(func(array[i], array.length - i - 1));
    }
    return tmpArray;
}
exports.reverseArray = reverseArray;
function getObjectMaxMin(obj) {
    var minValue = Number.MAX_SAFE_INTEGER;
    var maxValue = Number.MIN_SAFE_INTEGER;
    for (var key in obj) {
        var value = obj[key];
        if (value > maxValue)
            maxValue = value;
        if (value < minValue)
            minValue = value;
    }
    return {
        maxValue: maxValue,
        minValue: minValue,
    };
}
exports.getObjectMaxMin = getObjectMaxMin;
//# sourceMappingURL=utils.js.map