"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point = (function () {
    function Point() {
    }
    return Point;
}());
exports.Point = Point;
function crossProduct(p1, p2, p3) {
    var x1 = p2.x - p1.x;
    var y1 = p2.y - p1.y;
    var x2 = p3.x - p1.x;
    var y2 = p3.y - p1.y;
    return x1 * y2 - x2 * y1;
}
exports.crossProduct = crossProduct;
function crossPoint(p1, p2, p3, p4) {
    var area1 = crossProduct(p3, p2, p1);
    var area2 = crossProduct(p4, p1, p2);
    var ansx = (p3.x * area2 + p4.x * area1) / (area2 + area1);
    var ansy = (p3.y * area2 + p4.y * area1) / (area2 + area1);
    return {
        x: ansx,
        y: ansy,
    };
}
exports.crossPoint = crossPoint;
var ZERO = 1e-9;
function isCross(p1, p2, p3, p4) {
    if (crossProduct(p1, p3, p4) * crossProduct(p2, p3, p4) <= ZERO
        && crossProduct(p3, p1, p2) * crossProduct(p4, p1, p2) <= ZERO) {
        return true;
    }
    return false;
}
exports.isCross = isCross;
exports.distance = function (p1, p2) {
    return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
};
exports.getControlPoint = function (from, to, ratio, direct) {
    if (direct === void 0) { direct = 1; }
    var x1 = from.x, y1 = from.y;
    var x2 = to.x, y2 = to.y;
    var midX = (x1 + x2) / 2;
    var midY = (y1 + y2) / 2;
    if (x1 === x2 && y1 === y2) {
        return {
            x: x1,
            y: y2,
        };
    }
    else if (x1 === x2) {
        return {
            x: x1 - ratio * Math.abs(y2 - y1),
            y: midY,
        };
    }
    else if (y1 === y2) {
        return {
            x: midX,
            y: y1 + ratio * Math.abs(x2 - x1),
        };
    }
    var normalSlope = -(x2 - x1) / (y2 - y1);
    var delta = ratio * Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    var deltaX = -Math.sign(normalSlope) * delta / Math.sqrt(1 + Math.pow(normalSlope, 2));
    return {
        x: midX + direct * deltaX,
        y: midY + direct * normalSlope * deltaX
    };
};
exports.quadratic = function (sourcePoint, targetPoint) {
    var centerX = (sourcePoint.x + targetPoint.x) / 2;
    var centerY = (sourcePoint.y + targetPoint.y) / 2;
    var tolerance = 50;
    var sub = targetPoint.y - sourcePoint.y;
    if (sub > -100 && sub < 100) {
        tolerance = Math.max(Math.abs(targetPoint.y - sourcePoint.y) / 2, 30);
    }
    return [
        'M',
        sourcePoint.x,
        sourcePoint.y,
        'Q',
        sourcePoint.x,
        sourcePoint.y + tolerance,
        centerX,
        centerY,
        'T',
        targetPoint.x,
        targetPoint.y
    ].join(' ');
};
exports.vectorAngle = function (o, p1, p2) {
    var va = {
        x: p1.x - o.x,
        y: p1.y - o.y,
    };
    var vb = {
        x: p2.x - o.x,
        y: p2.y - o.y,
    };
    var va_vb = (va.x * vb.x) + (va.y * vb.y);
    var va_val = Math.sqrt(va.x * va.x + va.y * va.y);
    var vb_val = Math.sqrt(vb.x * vb.x + vb.y * vb.y);
    var cosValue = va_vb / (va_val * vb_val);
    return Math.acos(cosValue) / Math.PI * 180;
};
//# sourceMappingURL=graph.js.map