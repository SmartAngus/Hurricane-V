{"ast":null,"code":"var _jsxFileName = \"/Users/majy/work/bici/code/editor-demo/src/regraph/ReScreen/index.tsx\";\n\n/**\n * @file 画布操作的统一封装，包括平移、缩放、全屏、居中、恢复默认状态等，还有缩略图功能\n */\nimport * as React from 'react';\nimport { zoom, zoomIdentity } from 'd3-zoom';\nimport * as d3Select from 'd3-selection';\nimport { isValidSVG, exitFullscreen, requestFullscreen, getContainerStyle, getMapStyle } from './utils';\nimport './ReScreen.css';\n\n/** 缩略图留白 */\nconst MINI_MAP_RATIO = 0.9;\n/** 动画时间 ms */\n\nconst ANIMATION_TIME = 500;\nexport class ButtonsProps {\n  constructor() {\n    this.handleFullScreen = void 0;\n    this.handleResetPosition = void 0;\n    this.handleShowAll = void 0;\n    this.handleResetStatus = void 0;\n    this.handleResize = void 0;\n    this.handleResizeTo = void 0;\n    this.handleFocusTarget = void 0;\n    this.handleApplyTransform = void 0;\n    this.handleLocation = void 0;\n    this.handleAdapt = void 0;\n    this.handleSyncMiniMapView = void 0;\n    this.screenWidth = void 0;\n    this.screenHeight = void 0;\n  }\n\n}\n\nclass MiniMapProps {\n  constructor() {\n    this.screenToMapTransform = void 0;\n    this.transform = void 0;\n  }\n\n}\n\nclass Props {\n  constructor() {\n    this.type = void 0;\n    this.height = void 0;\n    this.width = void 0;\n    this.zoomEnabled = void 0;\n    this.focusEnabled = void 0;\n    this.minZoom = void 0;\n    this.maxZoom = void 0;\n    this.dragDirection = void 0;\n    this.needMinimap = void 0;\n    this.miniMapZoomEnabled = void 0;\n    this.autoHideMiniMap = void 0;\n    this.onMiniMapShowAndHide = void 0;\n    this.contentRange = void 0;\n    this.minimap = void 0;\n    this.mapPosition = void 0;\n    this.mapPadding = void 0;\n    this.mapWidth = void 0;\n    this.mapHeight = void 0;\n    this.mapRectStyle = void 0;\n    this.Buttons = void 0;\n    this.needRefresh = void 0;\n    this.resetNeedRefresh = void 0;\n    this.onScreenChange = void 0;\n    this.getScreenHandler = void 0;\n    this.screenHeight = void 0;\n    this.scaleExtent = void 0;\n    this.translateExtent = void 0;\n\n    this.onClick = () => {};\n\n    this.onContextMenu = () => {};\n\n    this.onDragOver = () => {};\n\n    this.onDrop = () => {};\n\n    this.draggable = void 0;\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.screenToMapTransform = void 0;\n    this.animation = void 0;\n    this.showMiniMap = void 0;\n  }\n\n}\n\nexport default class ReScreen extends React.Component {\n  /** 考虑到缩略图的宽高度和画布的不一致，是否以缩略图的宽度为计算标准 */\n\n  /** 外层元素，用来获取整体画布的大小以及全屏操作 */\n\n  /** d3化的元素，外层 */\n\n  /** 视口大小 */\n\n  /** d3化的元素，内层 */\n\n  /** d3化的元素，缩略图的可视化区域 */\n\n  /** 画布的zoom对象 */\n\n  /** 缩略图的zoom对象 */\n\n  /** 画布内容的变换 */\n\n  /** 缩略图的变换 */\n\n  /** 画布的变换关系，包含了画布本身的变化和缩略图的变化，是screenTransform*invert(minimapTransform) */\n  constructor(props) {\n    super(props);\n    this.useMapWidth = true;\n    this.ReScreenDOM = void 0;\n    this.screenDOM = void 0;\n    this.screen = void 0;\n    this.screenWidth = 0;\n    this.screenHeight = 0;\n    this.screenContent = void 0;\n    this.minimap = void 0;\n    this.screenZoom = void 0;\n    this.mapZoom = void 0;\n    this.screenTransform = zoomIdentity;\n    this.minimapTransform = zoomIdentity;\n    this.transform = zoomIdentity;\n    this.handleBrowserResizeFn = void 0;\n    this.state = {\n      /** 画布到缩略图的变换关系，只有当画布内容变化时才变化 */\n      screenToMapTransform: zoomIdentity,\n      animation: false,\n      showMiniMap: false\n    };\n    this.rectRef = void 0;\n\n    this.handleSyncMiniMapView = () => {\n      this.getScreenToMapTransform();\n    };\n\n    this.getScreenToMapTransform = () => {\n      /** 获取元素的包围盒 */\n      const BBox = this.getBBox();\n      const {\n        type,\n        mapWidth,\n        mapHeight,\n        contentRange\n      } = this.props;\n      const x = BBox.x;\n      const y = BBox.y;\n      this.useMapWidth = mapWidth / BBox.width * BBox.height < mapHeight; // MINI_MAP_RATIO 为了留白\n\n      const k = (this.useMapWidth ? mapWidth / BBox.width : mapHeight / BBox.height) * MINI_MAP_RATIO;\n      let screenToMapTransform;\n\n      if (contentRange && contentRange.length === 2) {\n        const x = mapWidth / 2 - (contentRange[0].x + contentRange[1].x) / 2;\n        const y = mapHeight / 2 - (contentRange[0].y + contentRange[1].y) / 2;\n        const P0 = [mapWidth / 2, mapHeight / 2];\n        const P1 = zoomIdentity.translate(x, y).scale(1).invert(P0);\n        screenToMapTransform = zoomIdentity.translate(P0[0] - P1[0] * k, P0[1] - P1[1] * k).scale(k);\n      } else if (type === 'SVG') {\n        const xx = -1 * this.transform.invertX(x);\n        const yy = -1 * this.transform.invertY(y);\n        screenToMapTransform = zoomIdentity.translate(xx, yy).scale(k * this.transform.k);\n      } else if (type === 'DOM') {\n        screenToMapTransform = zoomIdentity.translate(-x, -y).scale(k);\n      }\n\n      this.setState({\n        screenToMapTransform\n      }, this.props.resetNeedRefresh);\n      this.props.needMinimap && this.clReScreenContent(screenToMapTransform);\n    };\n\n    this.applyTransform = transform => {\n      const {\n        type,\n        mapRectStyle\n      } = this.props;\n      const {\n        screenToMapTransform\n      } = this.state; // 画布内容缩放变化\n\n      if (type === 'SVG') {\n        this.screenContent && this.screenContent.attr('transform', `translate(${transform.x}, ${transform.y}) scale(${transform.k})`);\n      } else if (type === 'DOM') {\n        this.screenContent && this.screenContent.style('transform', `translate(${transform.x}px, ${transform.y}px) scale(${transform.k})`);\n        this.screenContent && this.screenContent.style('transform-origin', '0 0');\n      }\n\n      this.transform = zoomIdentity.translate(transform.x, transform.y).scale(transform.k);\n\n      if (this.rectRef.current) {\n        // strokeWidth 要做特殊处理，因为会被缩放\n        const strokeWidth = (mapRectStyle || {}).strokeWidth;\n        this.rectRef.current.style.x = -this.transform.x;\n        this.rectRef.current.style.y = -this.transform.y;\n        this.rectRef.current.style.transform = `scale(${1 / transform.k})`;\n        this.rectRef.current.style.strokeWidth = strokeWidth !== undefined ? strokeWidth * (1 / screenToMapTransform.k) * transform.k : undefined;\n      }\n\n      const showMiniMap = this.checkShowMiniMap();\n\n      if (showMiniMap !== this.state.showMiniMap) {\n        // 缩略图缩放变化\n        this.setState({\n          showMiniMap\n        }, () => {\n          this.cancelAnimation();\n        });\n      }\n    };\n\n    this.handleApplyTransform = transform => {\n      this.screen.call(this.screenZoom.transform, zoomIdentity.translate(transform.x, transform.y).scale(transform.k));\n      this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n    };\n\n    this.handleFullScreen = () => {\n      const isFull = document.fullscreenElement || document.webkitFullscreenElement;\n\n      if (isFull) {\n        exitFullscreen();\n      } else {\n        requestFullscreen(this.screenDOM);\n      }\n    };\n\n    this.handleResetPosition = () => {\n      this.screen.call(this.screenZoom.transform, zoomIdentity);\n      this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n    };\n\n    this.handleShowAll = () => {\n      console.warn('handleShowAll 计划下线，适应画布请添加 contentRange 使用 handleAdapt 方法');\n      const {\n        mapWidth,\n        mapHeight\n      } = this.props;\n      const {\n        screenToMapTransform\n      } = this.state;\n      const scale = screenToMapTransform.k * (this.useMapWidth ? this.screenWidth / mapWidth : this.screenHeight / mapHeight);\n      this.screen.call(this.screenZoom.transform, zoomIdentity.scale(scale).translate(screenToMapTransform.x, screenToMapTransform.y));\n      this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n    };\n\n    this.handleAdapt = () => {\n      const {\n        contentRange\n      } = this.props;\n\n      if (!(contentRange && contentRange.length === 2)) {\n        console.warn('请正确传入 contentRange 值');\n        return;\n      }\n\n      const componentWidth = contentRange[1].x - contentRange[0].x;\n      const componentHeight = contentRange[1].y - contentRange[0].y; // 先在不缩放的场景下，平移到画布中点\n\n      const x = this.screenWidth / 2 - (contentRange[0].x + contentRange[1].x) / 2;\n      const y = this.screenHeight / 2 - (contentRange[0].y + contentRange[1].y) / 2; // 适应画布最大100%，保证在节点少的情况下不发生放大\n      // @Todo MINI_MAP_RATIO 暂不支持配置，如果开放要作为 props 参数\n\n      const scale = Math.min(this.screenWidth / componentWidth * MINI_MAP_RATIO, this.screenHeight / componentHeight * MINI_MAP_RATIO, 1); // P0 是缩放中点\n\n      const P0 = [this.screenWidth / 2, this.screenHeight / 2];\n      const P1 = zoomIdentity.translate(x, y).scale(1).invert(P0);\n      const newTransform = zoomIdentity.translate(P0[0] - P1[0] * scale, P0[1] - P1[1] * scale).scale(scale);\n      this.handleApplyTransform(newTransform);\n    };\n\n    this.handleResetStatus = () => {\n      setTimeout(() => {\n        this.getScreenToMapTransform();\n        this.handleResetPosition();\n      }, 100);\n    };\n\n    this.handleResize = isLarger => {\n      const RATE = isLarger ? 1.2 : 0.8;\n      const newScale = this.transform.k * RATE;\n      this.handleResizeTo(newScale / this.minimapTransform.k);\n    };\n\n    this.handleResizeTo = (newScale, P0) => {\n      const screenScale = newScale * this.minimapTransform.k;\n      /** 如果未指定缩放中心，则默认为画布中心点 */\n\n      if (!P0) {\n        P0 = [this.screenWidth / 2, this.screenHeight / 2];\n      }\n      /** 画布中心点对应到变化之前的点坐标 */\n\n\n      const P1 = this.transform.invert(P0);\n      this.screen.call(this.screenZoom.transform, zoomIdentity\n      /** 平移量为以原点为中心时的平移量减去最终要以的中心点 */\n      .translate(P0[0] - P1[0] * screenScale, P0[1] - P1[1] * screenScale).scale(screenScale));\n      this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n    };\n\n    this.handleLocation = point => {\n      this.setState({\n        animation: true\n      }, () => {\n        const {\n          k\n        } = this.transform;\n        const newTransform = zoomIdentity.translate(-point.x * k + this.screenWidth / 2, -point.y * k + this.screenHeight / 2).scale(k);\n        this.handleApplyTransform(newTransform);\n      });\n    };\n\n    this.handleFocusTarget = (evt, focusEnabled) => {\n      if (this.props.focusEnabled !== focusEnabled) {\n        return;\n      }\n\n      let e = evt.currentTarget;\n      let dim = e.getBoundingClientRect();\n      /** 在缩略图中的坐标 */\n\n      let x = evt.clientX - dim.left;\n      let y = evt.clientY - dim.top;\n      const {\n        x: tx,\n        y: ty,\n        k\n      } = this.state.screenToMapTransform;\n      /** 转化到画布中的坐标位置 */\n\n      const cx = x / k - tx;\n      const cy = y / k - ty;\n      /** 把变化效果全部赋值给screenTransform，方便计算 */\n\n      this.minimap.call(this.mapZoom.transform, zoomIdentity);\n      this.screenTransform = this.transform;\n      /** 在当前缩放下，画布中心移动到cx，cy点需要做的平移 */\n\n      const tx1 = this.screenWidth / 2 - this.transform.k * cx;\n      const ty1 = this.screenHeight / 2 - this.transform.k * cy;\n      this.screen.call(this.screenZoom.transform, zoomIdentity.translate(tx1, ty1).scale(this.transform.k));\n    };\n\n    this.rectRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.init();\n    this.initEvent();\n    this.bindZoom();\n    this.getScreenHandler();\n    this.setState({\n      showMiniMap: this.checkShowMiniMap()\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // 得到通知，画布大小发生变化，重新计算\n    if (nextProps.needRefresh) {\n      this.getScreenToMapTransform();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // showMiniMap 改变时，触发 onMiniMapShowAndHide 回调\n    if (this.state.showMiniMap !== prevState.showMiniMap) {\n      if (this.props.autoHideMiniMap && this.props.onMiniMapShowAndHide) {\n        this.props.onMiniMapShowAndHide(this.state.showMiniMap);\n      }\n    } // 当 contentRange 发生变化时，缩略图需要发生变化\n\n\n    if (this.props.contentRange && this.props.contentRange.length && (prevProps.contentRange.length !== this.props.contentRange.length || prevProps.contentRange[0].x !== this.props.contentRange[0].x || prevProps.contentRange[0].y !== this.props.contentRange[0].y || prevProps.contentRange[1].x !== this.props.contentRange[1].x || prevProps.contentRange[1].y !== this.props.contentRange[1].y)) {\n      this.getScreenToMapTransform();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleBrowserResizeFn);\n  }\n\n  init() {\n    this.getScreenSize();\n    this.getScreenToMapTransform();\n  }\n\n  initEvent() {\n    this.handleBrowserResizeFn = this.init.bind(this);\n    window.addEventListener('resize', this.handleBrowserResizeFn);\n  }\n\n  getScreenHandler() {\n    const {\n      getScreenHandler\n    } = this.props;\n\n    if (getScreenHandler) {\n      getScreenHandler({\n        handleFullScreen: this.handleFullScreen,\n        handleResetPosition: this.handleResetPosition,\n        handleShowAll: this.handleShowAll,\n        handleResetStatus: this.handleResetStatus,\n        handleResize: this.handleResize,\n        handleResizeTo: this.handleResizeTo,\n        handleFocusTarget: this.handleFocusTarget,\n        handleApplyTransform: this.handleApplyTransform,\n        handleAdapt: this.handleAdapt,\n        handleLocation: this.handleLocation,\n        screenWidth: this.screenWidth,\n        screenHeight: this.screenHeight,\n        handleSyncMiniMapView: this.handleSyncMiniMapView\n      });\n    }\n  } // zoom的过滤事件，当不启用滚轮缩放时，过滤滚轮事件\n\n\n  filter(isMiniMap) {\n    const enabled = isMiniMap ? this.props.miniMapZoomEnabled : this.props.zoomEnabled;\n\n    if (!enabled) {\n      return d3Select.event.type !== 'wheel';\n    }\n\n    return !d3Select.event.button;\n  }\n\n  bindZoom() {\n    const {\n      scaleExtent,\n      translateExtent,\n      draggable\n    } = this.props;\n    this.screenZoom = zoom().filter(this.filter.bind(this, false)).scaleExtent(scaleExtent ? scaleExtent : [0, Infinity]).translateExtent(translateExtent ? translateExtent : [[-Infinity, -Infinity], [Infinity, Infinity]]).on('zoom', () => {\n      const scale = d3Select.event.transform.k / this.minimapTransform.k;\n\n      if (!this.isZoomValid(scale)) {\n        // 如果禁止缩放了，值重置为缩放前\n        return this.screen.call(this.screenZoom.transform, this.screenTransform);\n      }\n\n      if (draggable) {\n        this.screenTransform = d3Select.event.transform;\n        this.handleScreenChange();\n      }\n    });\n    this.screen && this.screen.call(this.screenZoom).on('dblclick.zoom', null);\n\n    if (this.props.needMinimap) {\n      this.mapZoom = zoom().filter(this.filter.bind(this, true)).on('zoom', () => {\n        const scale = this.screenTransform.k / d3Select.event.transform.k;\n\n        if (!this.isZoomValid(scale)) {\n          return this.minimap.call(this.mapZoom.transform, this.minimapTransform);\n        }\n\n        if (draggable) {\n          this.minimapTransform = d3Select.event.transform;\n          this.handleScreenChange();\n        }\n      });\n      this.minimap && this.minimap.call(this.mapZoom).on('dblclick.zoom', null);\n    }\n  } // 是否还可以缩放，是否超过设置缩放范围; 缩略图的缩放判断是相反的。\n\n\n  isZoomValid(newScale) {\n    const currentScale = this.transform.k; // 如果小于最小范围，禁止缩小\n\n    if (newScale <= this.props.minZoom && newScale < currentScale) {\n      return false;\n    } // 如果超过最大范围，禁止放大\n\n\n    if (newScale >= this.props.maxZoom && newScale > currentScale) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getScreenSize() {\n    // 保险起见做的判断\n    if (!this.ReScreenDOM) {\n      return;\n    }\n\n    const ReScreenWidth = this.ReScreenDOM.clientWidth;\n    const ReScreenHeight = this.ReScreenDOM.clientHeight;\n    const {\n      needMinimap,\n      mapPosition,\n      mapWidth,\n      mapHeight,\n      mapPadding\n    } = this.props; // 如果缩略图设置在画布内侧，那么传入的宽高就是画布的宽高\n\n    if (mapPosition.includes('IN')) {\n      this.screenWidth = ReScreenWidth;\n      this.screenHeight = ReScreenHeight;\n    } else {\n      this.screenWidth = needMinimap ? ReScreenWidth - mapWidth - mapPadding : ReScreenWidth;\n      this.screenHeight = ReScreenHeight;\n    }\n\n    if (this.screenWidth < 0) {\n      this.screenWidth = 0;\n    }\n  }\n\n  getBBox() {\n    const {\n      type,\n      contentRange\n    } = this.props;\n\n    if (contentRange && contentRange.length === 2) {\n      return {\n        x: contentRange[0].x,\n        y: contentRange[0].y,\n        width: contentRange[1].x - contentRange[0].x,\n        height: contentRange[1].y - contentRange[0].y\n      };\n    }\n\n    if (type === 'SVG') {\n      return this.screenDOM && this.screenDOM.getBBox();\n    } else if (type === 'DOM') {\n      return {\n        x: 0,\n        y: 0,\n        width: this.screenDOM.firstChild.scrollWidth,\n        height: this.screenDOM.firstChild.scrollHeight\n      };\n    }\n  }\n\n  /** 回调，缩略图与底图关联, 所有平移、缩放最终都会收敛到这里 */\n  handleScreenChange() {\n    const screenTransform = this.screenTransform;\n    const minimapTransform = this.minimapTransform;\n    const transform = zoomIdentity.translate(screenTransform.x, screenTransform.y).scale(screenTransform.k) // 除以minimapTransform.k是为了在缩略图中防止鼠标和矩形路径偏移问题\n    .translate(-1 * minimapTransform.x / minimapTransform.k, -1 * minimapTransform.y / minimapTransform.k).scale(1 / minimapTransform.k); // 如果传入dragDirection，只限制在某个方向移动\n\n    let finalTransform;\n\n    if (this.props.dragDirection === 'HOR') {\n      finalTransform = zoomIdentity.translate(transform.x, 0).scale(transform.k);\n    } else if (this.props.dragDirection === 'VER') {\n      finalTransform = zoomIdentity.translate(0, transform.y).scale(transform.k);\n    } else {\n      finalTransform = transform;\n    } // 画布的最终变化效果是自身变化加上缩略图变化的效果\n\n\n    const {\n      onScreenChange\n    } = this.props;\n    this.applyTransform(finalTransform);\n    onScreenChange && onScreenChange(finalTransform);\n  }\n  /** 连续触发的场景不会使用 animation */\n\n\n  cancelAnimation() {\n    setTimeout(() => {\n      this.setState({\n        animation: false\n      });\n    }, ANIMATION_TIME);\n  }\n\n  renderButtons(Buttons) {\n    return React.cloneElement(Buttons, {\n      handleFullScreen: this.handleFullScreen,\n      handleResetPosition: this.handleResetPosition,\n      handleShowAll: this.handleShowAll,\n      handleResetStatus: this.handleResetStatus,\n      handleResize: this.handleResize,\n      screenWidth: this.screenWidth,\n      screenHeight: this.screenHeight\n    });\n  } // 实时拷贝画布内容到缩略图位置\n\n\n  clReScreenContent(screenToMapTransform) {\n    if (this.props.minimap || !this.screenDOM) {\n      return;\n    }\n\n    const screenToMap = `scale(${screenToMapTransform.k}) translate(${screenToMapTransform.x}, ${screenToMapTransform.y})`;\n    const screenContent = this.screenDOM.cloneNode(true);\n    screenContent.style.height = '100%';\n    screenContent.style.width = '100%';\n\n    if (this.props.type === 'SVG') {\n      screenContent.firstChild.setAttribute('transform', screenToMap);\n    } else {\n      screenContent.firstChild.style.transform = `translate(${screenToMapTransform.x}px, ${screenToMapTransform.y}px) scale(${screenToMapTransform.k})`;\n      screenContent.firstChild.style.transformOrigin = '0 0';\n    }\n\n    const targetNode = document.getElementById('minimap');\n    targetNode.innerHTML = '';\n    targetNode.appendChild(screenContent);\n  }\n\n  renderCustomMiniMap() {\n    const {\n      screenToMapTransform\n    } = this.state;\n    const {\n      transform\n    } = this;\n    const screenToMap = `translate(${screenToMapTransform.x}px, ${screenToMapTransform.y}px) scale(${screenToMapTransform.k})`;\n\n    if (!this.props.minimap) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        transform: screenToMap,\n        transformOrigin: '0 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 7\n      }\n    }, typeof this.props.minimap === 'function' ? this.props.minimap({\n      screenToMapTransform,\n      transform\n    }) : React.cloneElement(this.props.minimap, {\n      screenToMapTransform,\n      transform\n    }), \">\");\n  }\n  /**\n   * 是否当前图已经被全部显示出来，不需要缩略图\n   */\n\n\n  checkShowMiniMap() {\n    const {\n      contentRange,\n      autoHideMiniMap,\n      needMinimap\n    } = this.props;\n    const {\n      transform\n    } = this;\n\n    if (!needMinimap) {\n      return false;\n    }\n\n    if (!(contentRange && contentRange.length === 2)) {\n      console.warn('请正确传入 contentRange 值');\n      return true;\n    } // 不自动隐藏，永远返回 true，显示缩略图\n\n\n    if (!autoHideMiniMap) {\n      return true;\n    }\n\n    const {\n      k,\n      x,\n      y\n    } = transform;\n    const currRange = [{\n      x: (0 - x) / k,\n      y: (0 - y) / k\n    }, {\n      x: (this.screenWidth - x) / k,\n      y: (this.screenHeight - y) / k\n    }];\n\n    if (currRange[0].x < contentRange[0].x && currRange[0].y < contentRange[0].y && currRange[1].x > contentRange[1].x && currRange[1].y > contentRange[1].y) {\n      return false;\n    }\n\n    return true;\n  }\n\n  renderMinimap(mapWidth, mapHeight, mapPosition) {\n    const {\n      screenToMapTransform,\n      showMiniMap\n    } = this.state;\n    let className = 'map-ctrl';\n\n    if (!showMiniMap) {\n      className += ' map-ctrl-hidden';\n    }\n\n    if (this.state.animation) {\n      className += ' map-ctrl-animation';\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      onDoubleClick: e => this.handleFocusTarget(e, 2),\n      onClick: e => this.handleFocusTarget(e, 1),\n      style: {\n        width: mapWidth + 'px',\n        height: mapHeight + 'px',\n        ...getMapStyle(mapPosition)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"minimap\",\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 9\n      }\n    }, this.renderCustomMiniMap()), /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"map-visible-rect\",\n      width: \"100%\",\n      height: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      ref: ele => {\n        this.minimap = d3Select.select(ele);\n      },\n      transform: `translate(${screenToMapTransform.x}, ${screenToMapTransform.y}) scale(${screenToMapTransform.k})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", Object.assign({\n      width: this.screenWidth,\n      height: this.screenHeight,\n      fill: \"rgba(200, 200, 200, .5)\",\n      stroke: \"none\",\n      ref: this.rectRef\n    }, this.props.mapRectStyle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  renderScreenContent() {\n    const {\n      type,\n      screenHeight\n    } = this.props;\n    const width = this.screenWidth || '100%';\n    const height = screenHeight ? screenHeight : this.screenHeight || '100%';\n\n    if (type === 'SVG') {\n      return React.cloneElement(this.props.children, {\n        ref: ele => {\n          // TODO\n          if (this.screen) {\n            return;\n          }\n\n          this.screenDOM = ele;\n          this.screen = d3Select.select(ele);\n\n          if (isValidSVG(this.screen)) {\n            this.screenContent = d3Select.select(ele && ele.firstChild);\n          } else {\n            return console.log('请确保svg内部用g包裹起来！');\n          }\n        },\n        width,\n        height\n      });\n    } else if (type === 'DOM') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width,\n          height,\n          overflow: 'hidden'\n        },\n        ref: ele => {\n          if (this.screen) {\n            return;\n          }\n\n          this.screenDOM = ele;\n          this.screen = d3Select.select(ele);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 9\n        }\n      }, React.cloneElement(this.props.children, {\n        ref: ele => {\n          this.screenContent = d3Select.select(ele);\n        }\n      }));\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const {\n      needMinimap,\n      Buttons,\n      width,\n      height,\n      mapWidth,\n      mapHeight,\n      mapPosition\n    } = this.props;\n    const className = this.state.animation ? 'screen screen-animation' : 'screen';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"regraph\",\n      ref: ele => {\n        this.ReScreenDOM = ele;\n      },\n      style: {\n        width,\n        height,\n        ...getContainerStyle(mapPosition)\n      },\n      onClick: this.props.onClick,\n      onContextMenu: this.props.onContextMenu,\n      onDrop: this.props.onDrop,\n      onDragOver: this.props.onDragOver,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 9\n      }\n    }, this.renderScreenContent(), Buttons && this.renderButtons(Buttons)), needMinimap && this.renderMinimap(mapWidth, mapHeight, mapPosition));\n  }\n\n}\nReScreen.defaultProps = {\n  type: 'SVG',\n  width: '100%',\n  height: '100%',\n  needMinimap: true,\n  zoomEnabled: true,\n  minZoom: 0.01,\n  maxZoom: 100,\n  dragDirection: 'ALL',\n  mapPosition: 'RT',\n  mapWidth: 100,\n  mapHeight: 100,\n  mapPadding: 20,\n  autoHideMiniMap: false,\n  miniMapZoomEnabled: false,\n  draggable: true\n};","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/regraph/ReScreen/index.tsx"],"names":["React","zoom","zoomIdentity","d3Select","isValidSVG","exitFullscreen","requestFullscreen","getContainerStyle","getMapStyle","MINI_MAP_RATIO","ANIMATION_TIME","ButtonsProps","handleFullScreen","handleResetPosition","handleShowAll","handleResetStatus","handleResize","handleResizeTo","handleFocusTarget","handleApplyTransform","handleLocation","handleAdapt","handleSyncMiniMapView","screenWidth","screenHeight","MiniMapProps","screenToMapTransform","transform","Props","type","height","width","zoomEnabled","focusEnabled","minZoom","maxZoom","dragDirection","needMinimap","miniMapZoomEnabled","autoHideMiniMap","onMiniMapShowAndHide","contentRange","minimap","mapPosition","mapPadding","mapWidth","mapHeight","mapRectStyle","Buttons","needRefresh","resetNeedRefresh","onScreenChange","getScreenHandler","scaleExtent","translateExtent","onClick","onContextMenu","onDragOver","onDrop","draggable","State","animation","showMiniMap","ReScreen","Component","constructor","props","useMapWidth","ReScreenDOM","screenDOM","screen","screenContent","screenZoom","mapZoom","screenTransform","minimapTransform","handleBrowserResizeFn","state","rectRef","getScreenToMapTransform","BBox","getBBox","x","y","k","length","P0","P1","translate","scale","invert","xx","invertX","yy","invertY","setState","clReScreenContent","applyTransform","attr","style","current","strokeWidth","undefined","checkShowMiniMap","cancelAnimation","call","isFull","document","fullscreenElement","webkitFullscreenElement","console","warn","componentWidth","componentHeight","Math","min","newTransform","setTimeout","isLarger","RATE","newScale","screenScale","point","evt","e","currentTarget","dim","getBoundingClientRect","clientX","left","clientY","top","tx","ty","cx","cy","tx1","ty1","createRef","componentDidMount","init","initEvent","bindZoom","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","prevState","componentWillUnmount","window","removeEventListener","getScreenSize","bind","addEventListener","filter","isMiniMap","enabled","event","button","Infinity","on","isZoomValid","handleScreenChange","currentScale","ReScreenWidth","clientWidth","ReScreenHeight","clientHeight","includes","firstChild","scrollWidth","scrollHeight","finalTransform","renderButtons","cloneElement","screenToMap","cloneNode","setAttribute","transformOrigin","targetNode","getElementById","innerHTML","appendChild","renderCustomMiniMap","currRange","renderMinimap","className","ele","select","renderScreenContent","children","ref","log","overflow","render","defaultProps"],"mappings":"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","sourcesContent":["/**\n * @file 画布操作的统一封装，包括平移、缩放、全屏、居中、恢复默认状态等，还有缩略图功能\n */\nimport * as React from 'react';\nimport { zoom, zoomIdentity, ZoomTransform, ZoomBehavior } from 'd3-zoom';\nimport * as d3Select from 'd3-selection';\nimport { isValidSVG, exitFullscreen, requestFullscreen, getContainerStyle, getMapStyle } from './utils';\nimport './ReScreen.css';\nimport { Point } from '../Utils/graph';\n\n/** 缩略图留白 */\nconst MINI_MAP_RATIO = 0.9;\n/** 动画时间 ms */\nconst ANIMATION_TIME = 500;\n\nexport class ButtonsProps {\n  handleFullScreen: () => void;\n  handleResetPosition: () => void;\n  handleShowAll: () => void;\n  handleResetStatus: () => void;\n  handleResize: (isLarge: boolean) => void;\n  handleResizeTo: (scale: number) => void;\n  handleFocusTarget: (evt: any, focusEnabled: number) => void;\n  handleApplyTransform: (transform: ZoomTransform) => void;\n  handleLocation: (point: Point) => void;\n  handleAdapt: () => void;\n  handleSyncMiniMapView: () => void;\n  screenWidth: number;\n  screenHeight: number;\n}\n\nclass MiniMapProps {\n  screenToMapTransform: ZoomTransform;\n  transform: ZoomTransform;\n}\n\nclass Props {\n  /** 画布内容的类型，\b默认为SVG */\n  type?: 'SVG' | 'DOM' | 'CANVAS';\n  /** 组件整体的尺寸，支持传入百分数 */\n  height?: number | string;\n  width?: number | string;\n  /** 是否启动鼠标滚动缩放画布，默认为true */\n  zoomEnabled?: boolean;\n  /** 是否启动聚焦功能，0表示不启动，1表示单击触发，2表示双击触发 */\n  focusEnabled?: number;\n  /** 缩放范围 */\n  minZoom?: number;\n  maxZoom?: number;\n  /** 拖拽方向的锁定，默认为ALL */\n  dragDirection?: 'ALL' | 'HOR' | 'VER';\n  /** 是否需要缩略图，默认为true */\n  needMinimap?: boolean;\n  /** 缩略图是否启动鼠标滚动缩放，默认为 false */\n  miniMapZoomEnabled?: boolean;\n  /** 是否需要自动隐藏缩略图, 默认为 false */\n  autoHideMiniMap?: boolean;\n  /** 自动隐藏与展现时的回调 */\n  onMiniMapShowAndHide?: (show: boolean) => void;\n  /** 底层图的坐标矩阵范围，1. 缩略图需要使用 2. 适用画布需要使用 */\n  contentRange?: [Point, Point];\n  /** 支持自定义传入缩略图组件 */\n  minimap?: (props: MiniMapProps) => React.ReactElement<any> | React.ReactElement<MiniMapProps>;\n  /** 缩略图位置，默认为RT，右上角；-IN表示在画布的内部 */\n  mapPosition?: 'RT' | 'RB' | 'LT' | 'LB' | 'RT-IN' | 'RB-IN' | 'LT-IN' | 'LB-IN';\n  /** 缩略图和原图之间的大小，默认为20 */\n  mapPadding?: number;\n  /** 缩略图大小，默认为100px */\n  mapWidth?: number;\n  mapHeight?: number;\n  /** 缩略图矩形的样式，svg语法 */\n  mapRectStyle?: object;\n  /** 按钮组件，如果不需要就不传 */\n  Buttons?: React.ReactElement<any>;\n  /** 由于画布元素的变化而引起的视图变化 */\n  needRefresh?: boolean;\n  /** 通知外层重置needRefresh为false */\n  resetNeedRefresh?: () => void;\n  /** 画布发生变化时的回调，对外暴露当前的缩放信息 */\n  onScreenChange?: (transform: ZoomTransform) => void;\n  /** 对外暴露画布操作函数 */\n  getScreenHandler?: (params: ButtonsProps) => void;\n  /** 对外暴露控制容器的高度 */\n  screenHeight?: number | string;\n  /** scale 限制 */\n  scaleExtent?: [number, number];\n  /** translate 限制 */\n  translateExtent?: [[number, number], [number, number]];\n  /** 画布点击事件 */\n  onClick?: (event: React.MouseEvent<HTMLDivElement>) => void = () => {};\n  /** 画布右击事件 */\n  onContextMenu?: (event: React.MouseEvent<HTMLDivElement>) => void = () => {};\n  /** 画布拖动覆盖事件 */\n  onDragOver?: (event: React.DragEvent<HTMLDivElement>) => void = () => {};\n  /** 画布拖动响应事件 */\n  onDrop?: (event: React.DragEvent<HTMLDivElement>) => void = () => {};\n  /** 是否支持拖拽 */\n  draggable?: boolean;\n}\n\nclass State {\n  /** 画布到缩略图的变换关系，只有当画布内容变化时才变化 */\n  screenToMapTransform: ZoomTransform;\n  /** 是否需要添加动画，外部平移缩放时生效 */\n  animation: boolean;\n  /** 自动显示隐藏缩略图 */\n  showMiniMap: boolean;\n}\n\nexport default class ReScreen extends React.Component<Props, State> {\n  static defaultProps = {\n    type: 'SVG',\n    width: '100%',\n    height: '100%',\n    needMinimap: true,\n    zoomEnabled: true,\n    minZoom: 0.01,\n    maxZoom: 100,\n    dragDirection: 'ALL',\n    mapPosition: 'RT',\n    mapWidth: 100,\n    mapHeight: 100,\n    mapPadding: 20,\n    autoHideMiniMap: false,\n    miniMapZoomEnabled: false,\n    draggable: true\n  };\n\n  /** 考虑到缩略图的宽高度和画布的不一致，是否以缩略图的宽度为计算标准 */\n  useMapWidth = true;\n  ReScreenDOM: any;\n  /** 外层元素，用来获取整体画布的大小以及全屏操作 */\n  screenDOM: any;\n  /** d3化的元素，外层 */\n  screen: any;\n  /** 视口大小 */\n  screenWidth = 0;\n  screenHeight = 0;\n  /** d3化的元素，内层 */\n  screenContent: any;\n  /** d3化的元素，缩略图的可视化区域 */\n  minimap: any;\n\n  /** 画布的zoom对象 */\n  screenZoom: ZoomBehavior<any, any>;\n  /** 缩略图的zoom对象 */\n  mapZoom: ZoomBehavior<any, any>;\n\n  /** 画布内容的变换 */\n  screenTransform: ZoomTransform = zoomIdentity;\n  /** 缩略图的变换 */\n  minimapTransform: ZoomTransform = zoomIdentity;\n  /** 画布的变换关系，包含了画布本身的变化和缩略图的变化，是screenTransform*invert(minimapTransform) */\n  transform: ZoomTransform = zoomIdentity;\n  handleBrowserResizeFn: any;\n\n  state = {\n    /** 画布到缩略图的变换关系，只有当画布内容变化时才变化 */\n    screenToMapTransform: zoomIdentity,\n    animation: false,\n    showMiniMap: false\n  };\n  rectRef: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.rectRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.init();\n    this.initEvent();\n    this.bindZoom();\n    this.getScreenHandler();\n    this.setState({\n      showMiniMap: this.checkShowMiniMap()\n    });\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    // 得到通知，画布大小发生变化，重新计算\n    if (nextProps.needRefresh) {\n      this.getScreenToMapTransform();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    // showMiniMap 改变时，触发 onMiniMapShowAndHide 回调\n    if (this.state.showMiniMap !== prevState.showMiniMap) {\n      if (this.props.autoHideMiniMap && this.props.onMiniMapShowAndHide) {\n        this.props.onMiniMapShowAndHide(this.state.showMiniMap);\n      }\n    }\n    // 当 contentRange 发生变化时，缩略图需要发生变化\n    if (\n      this.props.contentRange &&\n      this.props.contentRange.length &&\n      (prevProps.contentRange.length !== this.props.contentRange.length ||\n        prevProps.contentRange[0].x !== this.props.contentRange[0].x ||\n        prevProps.contentRange[0].y !== this.props.contentRange[0].y ||\n        prevProps.contentRange[1].x !== this.props.contentRange[1].x ||\n        prevProps.contentRange[1].y !== this.props.contentRange[1].y)\n    ) {\n      this.getScreenToMapTransform();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleBrowserResizeFn);\n  }\n\n  init() {\n    this.getScreenSize();\n    this.getScreenToMapTransform();\n  }\n\n  initEvent() {\n    this.handleBrowserResizeFn = this.init.bind(this);\n    window.addEventListener('resize', this.handleBrowserResizeFn);\n  }\n\n  handleSyncMiniMapView = () => {\n    this.getScreenToMapTransform();\n  };\n\n  getScreenHandler() {\n    const { getScreenHandler } = this.props;\n    if (getScreenHandler) {\n      getScreenHandler({\n        handleFullScreen: this.handleFullScreen,\n        handleResetPosition: this.handleResetPosition,\n        handleShowAll: this.handleShowAll,\n        handleResetStatus: this.handleResetStatus,\n        handleResize: this.handleResize,\n        handleResizeTo: this.handleResizeTo,\n        handleFocusTarget: this.handleFocusTarget,\n        handleApplyTransform: this.handleApplyTransform,\n        handleAdapt: this.handleAdapt,\n        handleLocation: this.handleLocation,\n        screenWidth: this.screenWidth,\n        screenHeight: this.screenHeight,\n        handleSyncMiniMapView: this.handleSyncMiniMapView\n      });\n    }\n  }\n\n  // zoom的过滤事件，当不启用滚轮缩放时，过滤滚轮事件\n  filter(isMiniMap: boolean) {\n    const enabled = isMiniMap ? this.props.miniMapZoomEnabled : this.props.zoomEnabled;\n    if (!enabled) {\n      return d3Select.event.type !== 'wheel';\n    }\n    return !d3Select.event.button;\n  }\n\n  bindZoom() {\n    const { scaleExtent, translateExtent, draggable } = this.props;\n    this.screenZoom = zoom()\n      .filter(this.filter.bind(this, false))\n      .scaleExtent(scaleExtent ? scaleExtent : [0, Infinity])\n      .translateExtent(\n        translateExtent\n          ? translateExtent\n          : [\n              [-Infinity, -Infinity],\n              [Infinity, Infinity]\n            ]\n      )\n      .on('zoom', () => {\n        const scale = d3Select.event.transform.k / this.minimapTransform.k;\n        if (!this.isZoomValid(scale)) {\n          // 如果禁止缩放了，值重置为缩放前\n          return this.screen.call(this.screenZoom.transform, this.screenTransform);\n        }\n        if (draggable) {\n          this.screenTransform = d3Select.event.transform;\n          this.handleScreenChange();\n        }\n      });\n    this.screen && this.screen.call(this.screenZoom).on('dblclick.zoom', null);\n\n    if (this.props.needMinimap) {\n      this.mapZoom = zoom()\n        .filter(this.filter.bind(this, true))\n        .on('zoom', () => {\n          const scale = this.screenTransform.k / d3Select.event.transform.k;\n          if (!this.isZoomValid(scale)) {\n            return this.minimap.call(this.mapZoom.transform, this.minimapTransform);\n          }\n          if (draggable) {\n            this.minimapTransform = d3Select.event.transform;\n            this.handleScreenChange();\n          }\n        });\n      this.minimap && this.minimap.call(this.mapZoom).on('dblclick.zoom', null);\n    }\n  }\n\n  // 是否还可以缩放，是否超过设置缩放范围; 缩略图的缩放判断是相反的。\n  isZoomValid(newScale: any) {\n    const currentScale = this.transform.k;\n    // 如果小于最小范围，禁止缩小\n    if (newScale <= this.props.minZoom && newScale < currentScale) {\n      return false;\n    }\n\n    // 如果超过最大范围，禁止放大\n    if (newScale >= this.props.maxZoom && newScale > currentScale) {\n      return false;\n    }\n    return true;\n  }\n\n  getScreenSize() {\n    // 保险起见做的判断\n    if (!this.ReScreenDOM) {\n      return;\n    }\n\n    const ReScreenWidth = this.ReScreenDOM.clientWidth;\n    const ReScreenHeight = this.ReScreenDOM.clientHeight;\n\n    const { needMinimap, mapPosition, mapWidth, mapHeight, mapPadding } = this.props;\n    // 如果缩略图设置在画布内侧，那么传入的宽高就是画布的宽高\n    if (mapPosition.includes('IN')) {\n      this.screenWidth = ReScreenWidth;\n      this.screenHeight = ReScreenHeight;\n    } else {\n      this.screenWidth = needMinimap ? ReScreenWidth - mapWidth - mapPadding : ReScreenWidth;\n      this.screenHeight = ReScreenHeight;\n    }\n\n    if (this.screenWidth < 0) {\n      this.screenWidth = 0;\n    }\n  }\n\n  getBBox() {\n    const { type, contentRange } = this.props;\n    if (contentRange && contentRange.length === 2) {\n      return {\n        x: contentRange[0].x,\n        y: contentRange[0].y,\n        width: contentRange[1].x - contentRange[0].x,\n        height: contentRange[1].y - contentRange[0].y\n      };\n    }\n    if (type === 'SVG') {\n      return this.screenDOM && this.screenDOM.getBBox();\n    } else if (type === 'DOM') {\n      return {\n        x: 0,\n        y: 0,\n        width: this.screenDOM.firstChild.scrollWidth,\n        height: this.screenDOM.firstChild.scrollHeight\n      };\n    }\n  }\n\n  getScreenToMapTransform = () => {\n    /** 获取元素的包围盒 */\n    const BBox = this.getBBox();\n    const { type, mapWidth, mapHeight, contentRange } = this.props;\n    const x = BBox.x;\n    const y = BBox.y;\n    this.useMapWidth = (mapWidth / BBox.width) * BBox.height < mapHeight;\n    // MINI_MAP_RATIO 为了留白\n    const k = (this.useMapWidth ? mapWidth / BBox.width : mapHeight / BBox.height) * MINI_MAP_RATIO;\n    let screenToMapTransform;\n\n    if (contentRange && contentRange.length === 2) {\n      const x = mapWidth / 2 - (contentRange[0].x + contentRange[1].x) / 2;\n      const y = mapHeight / 2 - (contentRange[0].y + contentRange[1].y) / 2;\n\n      const P0 = [mapWidth / 2, mapHeight / 2] as [number, number];\n      const P1 = zoomIdentity\n        .translate(x, y)\n        .scale(1)\n        .invert(P0);\n      screenToMapTransform = zoomIdentity.translate(P0[0] - P1[0] * k, P0[1] - P1[1] * k).scale(k);\n    } else if (type === 'SVG') {\n      const xx = -1 * this.transform.invertX(x);\n      const yy = -1 * this.transform.invertY(y);\n      screenToMapTransform = zoomIdentity.translate(xx, yy).scale(k * this.transform.k);\n    } else if (type === 'DOM') {\n      screenToMapTransform = zoomIdentity.translate(-x, -y).scale(k);\n    }\n\n    this.setState(\n      {\n        screenToMapTransform\n      },\n      this.props.resetNeedRefresh\n    );\n    this.props.needMinimap && this.clReScreenContent(screenToMapTransform);\n  };\n\n  /** 回调，缩略图与底图关联, 所有平移、缩放最终都会收敛到这里 */\n  handleScreenChange() {\n    const screenTransform = this.screenTransform;\n    const minimapTransform = this.minimapTransform;\n\n    const transform = zoomIdentity\n      .translate(screenTransform.x, screenTransform.y)\n      .scale(screenTransform.k)\n      // 除以minimapTransform.k是为了在缩略图中防止鼠标和矩形路径偏移问题\n      .translate((-1 * minimapTransform.x) / minimapTransform.k, (-1 * minimapTransform.y) / minimapTransform.k)\n      .scale(1 / minimapTransform.k);\n    // 如果传入dragDirection，只限制在某个方向移动\n    let finalTransform: ZoomTransform;\n    if (this.props.dragDirection === 'HOR') {\n      finalTransform = zoomIdentity.translate(transform.x, 0).scale(transform.k);\n    } else if (this.props.dragDirection === 'VER') {\n      finalTransform = zoomIdentity.translate(0, transform.y).scale(transform.k);\n    } else {\n      finalTransform = transform;\n    }\n\n    // 画布的最终变化效果是自身变化加上缩略图变化的效果\n    const { onScreenChange } = this.props;\n    this.applyTransform(finalTransform);\n    onScreenChange && onScreenChange(finalTransform);\n  }\n\n  /** 连续触发的场景不会使用 animation */\n  cancelAnimation() {\n    setTimeout(() => {\n      this.setState({\n        animation: false\n      });\n    }, ANIMATION_TIME);\n  }\n\n  applyTransform = (transform: any) => {\n    const { type, mapRectStyle } = this.props;\n    const { screenToMapTransform } = this.state;\n    // 画布内容缩放变化\n    if (type === 'SVG') {\n      this.screenContent &&\n        this.screenContent.attr('transform', `translate(${transform.x}, ${transform.y}) scale(${transform.k})`);\n    } else if (type === 'DOM') {\n      this.screenContent &&\n        this.screenContent.style('transform', `translate(${transform.x}px, ${transform.y}px) scale(${transform.k})`);\n      this.screenContent && this.screenContent.style('transform-origin', '0 0');\n    }\n\n    this.transform = zoomIdentity.translate(transform.x, transform.y).scale(transform.k);\n\n    if (this.rectRef.current) {\n      // strokeWidth 要做特殊处理，因为会被缩放\n      const strokeWidth = (mapRectStyle || ({} as any)).strokeWidth;\n      this.rectRef.current.style.x = -this.transform.x;\n      this.rectRef.current.style.y = -this.transform.y;\n      this.rectRef.current.style.transform = `scale(${1 / transform.k})`;\n      this.rectRef.current.style.strokeWidth =\n        strokeWidth !== undefined ? strokeWidth * (1 / screenToMapTransform.k) * transform.k : undefined;\n    }\n\n    const showMiniMap = this.checkShowMiniMap();\n\n    if (showMiniMap !== this.state.showMiniMap) {\n      // 缩略图缩放变化\n      this.setState(\n        {\n          showMiniMap\n        },\n        () => {\n          this.cancelAnimation();\n        }\n      );\n    }\n  };\n\n  handleApplyTransform = (transform: ZoomTransform) => {\n    this.screen.call(this.screenZoom.transform, zoomIdentity.translate(transform.x, transform.y).scale(transform.k));\n    this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n  };\n\n  /** 按钮事件，全屏操作 */\n  handleFullScreen = () => {\n    const isFull = document.fullscreenElement || (document as any).webkitFullscreenElement;\n    if (isFull) {\n      exitFullscreen();\n    } else {\n      requestFullscreen(this.screenDOM);\n    }\n  };\n\n  /** 按钮事件，复位操作 */\n  handleResetPosition = () => {\n    this.screen.call(this.screenZoom.transform, zoomIdentity);\n    this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n  };\n\n  /** 按钮事件，显示所有操作，@Todo 有点奇怪，计划下线 */\n  handleShowAll = () => {\n    console.warn('handleShowAll 计划下线，适应画布请添加 contentRange 使用 handleAdapt 方法');\n    const { mapWidth, mapHeight } = this.props;\n    const { screenToMapTransform } = this.state;\n    const scale =\n      screenToMapTransform.k * (this.useMapWidth ? this.screenWidth / mapWidth : this.screenHeight / mapHeight);\n    this.screen.call(\n      this.screenZoom.transform,\n      zoomIdentity.scale(scale).translate(screenToMapTransform.x, screenToMapTransform.y)\n    );\n    this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n  };\n\n  /** 按钮事件，适应画布，ratio 防止节点边与画布边重合 */\n  handleAdapt = () => {\n    const { contentRange } = this.props;\n    if (!(contentRange && contentRange.length === 2)) {\n      console.warn('请正确传入 contentRange 值');\n      return;\n    }\n\n    const componentWidth = contentRange[1].x - contentRange[0].x;\n    const componentHeight = contentRange[1].y - contentRange[0].y;\n\n    // 先在不缩放的场景下，平移到画布中点\n    const x = this.screenWidth / 2 - (contentRange[0].x + contentRange[1].x) / 2;\n    const y = this.screenHeight / 2 - (contentRange[0].y + contentRange[1].y) / 2;\n\n    // 适应画布最大100%，保证在节点少的情况下不发生放大\n    // @Todo MINI_MAP_RATIO 暂不支持配置，如果开放要作为 props 参数\n    const scale = Math.min(\n      (this.screenWidth / componentWidth) * MINI_MAP_RATIO,\n      (this.screenHeight / componentHeight) * MINI_MAP_RATIO,\n      1\n    );\n\n    // P0 是缩放中点\n    const P0 = [this.screenWidth / 2, this.screenHeight / 2] as [number, number];\n    const P1 = zoomIdentity\n      .translate(x, y)\n      .scale(1)\n      .invert(P0);\n    const newTransform = zoomIdentity.translate(P0[0] - P1[0] * scale, P0[1] - P1[1] * scale).scale(scale);\n    this.handleApplyTransform(newTransform);\n  };\n\n  /** 按钮事件，重置操作 */\n  handleResetStatus = () => {\n    setTimeout(() => {\n      this.getScreenToMapTransform();\n      this.handleResetPosition();\n    }, 100);\n  };\n\n  handleResize = (isLarger?: boolean) => {\n    const RATE = isLarger ? 1.2 : 0.8;\n    const newScale = this.transform.k * RATE;\n    this.handleResizeTo(newScale / this.minimapTransform.k);\n  };\n\n  /** newScale为最终的缩放比例，不是screenTransform的值; P0为指定缩放中心 */\n  handleResizeTo = (newScale: number, P0?: [number, number]) => {\n    const screenScale = newScale * this.minimapTransform.k;\n    /** 如果未指定缩放中心，则默认为画布中心点 */\n    if (!P0) {\n      P0 = [this.screenWidth / 2, this.screenHeight / 2];\n    }\n    /** 画布中心点对应到变化之前的点坐标 */\n    const P1 = this.transform.invert(P0);\n\n    this.screen.call(\n      this.screenZoom.transform,\n      zoomIdentity\n        /** 平移量为以原点为中心时的平移量减去最终要以的中心点 */\n        .translate(P0[0] - P1[0] * screenScale, P0[1] - P1[1] * screenScale)\n        .scale(screenScale)\n    );\n    this.minimap && this.minimap.call(this.mapZoom.transform, zoomIdentity);\n  };\n\n  /** 图上坐标居中，执行动画 */\n  handleLocation = (point: Point) => {\n    this.setState(\n      {\n        animation: true\n      },\n      () => {\n        const { k } = this.transform;\n\n        const newTransform = zoomIdentity\n          .translate(-point.x * k + this.screenWidth / 2, -point.y * k + this.screenHeight / 2)\n          .scale(k);\n        this.handleApplyTransform(newTransform);\n      }\n    );\n  };\n\n  handleFocusTarget = (evt: any, focusEnabled: number) => {\n    if (this.props.focusEnabled !== focusEnabled) {\n      return;\n    }\n    let e = evt.currentTarget;\n    let dim = e.getBoundingClientRect();\n    /** 在缩略图中的坐标 */\n    let x = evt.clientX - dim.left;\n    let y = evt.clientY - dim.top;\n    const { x: tx, y: ty, k } = this.state.screenToMapTransform;\n    /** 转化到画布中的坐标位置 */\n    const cx = x / k - tx;\n    const cy = y / k - ty;\n    /** 把变化效果全部赋值给screenTransform，方便计算 */\n\n    this.minimap.call(this.mapZoom.transform, zoomIdentity);\n    this.screenTransform = this.transform;\n    /** 在当前缩放下，画布中心移动到cx，cy点需要做的平移 */\n\n    const tx1 = this.screenWidth / 2 - this.transform.k * cx;\n    const ty1 = this.screenHeight / 2 - this.transform.k * cy;\n    this.screen.call(this.screenZoom.transform, zoomIdentity.translate(tx1, ty1).scale(this.transform.k));\n  };\n\n  renderButtons(Buttons: React.ReactElement<any>) {\n    return React.cloneElement(Buttons, {\n      handleFullScreen: this.handleFullScreen,\n      handleResetPosition: this.handleResetPosition,\n      handleShowAll: this.handleShowAll,\n      handleResetStatus: this.handleResetStatus,\n      handleResize: this.handleResize,\n      screenWidth: this.screenWidth,\n      screenHeight: this.screenHeight\n    });\n  }\n\n  // 实时拷贝画布内容到缩略图位置\n  clReScreenContent(screenToMapTransform: any) {\n    if (this.props.minimap || !this.screenDOM) {\n      return;\n    }\n    const screenToMap = `scale(${screenToMapTransform.k}) translate(${screenToMapTransform.x}, ${screenToMapTransform.y})`;\n    const screenContent = this.screenDOM.cloneNode(true);\n    screenContent.style.height = '100%';\n    screenContent.style.width = '100%';\n\n    if (this.props.type === 'SVG') {\n      screenContent.firstChild.setAttribute('transform', screenToMap);\n    } else {\n      screenContent.firstChild.style.transform = `translate(${screenToMapTransform.x}px, ${screenToMapTransform.y}px) scale(${screenToMapTransform.k})`;\n      screenContent.firstChild.style.transformOrigin = '0 0';\n    }\n    const targetNode = document.getElementById('minimap');\n    targetNode.innerHTML = '';\n    targetNode.appendChild(screenContent);\n  }\n\n  renderCustomMiniMap() {\n    const { screenToMapTransform } = this.state;\n    const { transform } = this;\n    const screenToMap = `translate(${screenToMapTransform.x}px, ${screenToMapTransform.y}px) scale(${screenToMapTransform.k})`;\n    if (!this.props.minimap) {\n      return null;\n    }\n    return (\n      <div\n        style={{\n          transform: screenToMap,\n          transformOrigin: '0 0'\n        }}>\n        {typeof this.props.minimap === 'function'\n          ? this.props.minimap({\n              screenToMapTransform,\n              transform\n            })\n          : React.cloneElement(this.props.minimap, {\n              screenToMapTransform,\n              transform\n            })}\n        >\n      </div>\n    );\n  }\n\n  /**\n   * 是否当前图已经被全部显示出来，不需要缩略图\n   */\n  checkShowMiniMap() {\n    const { contentRange, autoHideMiniMap, needMinimap } = this.props;\n    const { transform } = this;\n\n    if (!needMinimap) {\n      return false;\n    }\n\n    if (!(contentRange && contentRange.length === 2)) {\n      console.warn('请正确传入 contentRange 值');\n      return true;\n    }\n\n    // 不自动隐藏，永远返回 true，显示缩略图\n    if (!autoHideMiniMap) {\n      return true;\n    }\n\n    const { k, x, y } = transform;\n\n    const currRange = [\n      { x: (0 - x) / k, y: (0 - y) / k },\n      { x: (this.screenWidth - x) / k, y: (this.screenHeight - y) / k }\n    ];\n\n    if (\n      currRange[0].x < contentRange[0].x &&\n      currRange[0].y < contentRange[0].y &&\n      currRange[1].x > contentRange[1].x &&\n      currRange[1].y > contentRange[1].y\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  renderMinimap(mapWidth: number, mapHeight: number, mapPosition: any) {\n    const { screenToMapTransform, showMiniMap } = this.state;\n\n    let className = 'map-ctrl';\n    if (!showMiniMap) {\n      className += ' map-ctrl-hidden';\n    }\n    if (this.state.animation) {\n      className += ' map-ctrl-animation';\n    }\n\n    return (\n      <div\n        className={className}\n        onDoubleClick={e => this.handleFocusTarget(e, 2)}\n        onClick={e => this.handleFocusTarget(e, 1)}\n        style={{\n          width: mapWidth + 'px',\n          height: mapHeight + 'px',\n          ...getMapStyle(mapPosition)\n        }}>\n        {/* 如果传入了Minimap组件表示缩略图，就使用传入的组件 */}\n        <div id=\"minimap\" style={{ width: '100%', height: '100%' }}>\n          {this.renderCustomMiniMap()}\n        </div>\n        {/** 在 Mac 触摸板滑动时，rect 轨迹存在问题，与 transition 有关 */}\n        <svg className=\"map-visible-rect\" width=\"100%\" height=\"100%\">\n          <g\n            ref={(ele: any) => {\n              this.minimap = d3Select.select(ele);\n            }}\n            transform={`translate(${screenToMapTransform.x}, ${screenToMapTransform.y}) scale(${screenToMapTransform.k})`}>\n            {\n              <rect\n                width={this.screenWidth}\n                height={this.screenHeight}\n                fill=\"rgba(200, 200, 200, .5)\"\n                stroke=\"none\"\n                ref={this.rectRef}\n                {...this.props.mapRectStyle}\n              />\n            }\n          </g>\n        </svg>\n      </div>\n    );\n  }\n\n  renderScreenContent() {\n    const { type, screenHeight } = this.props;\n    const width = this.screenWidth || '100%';\n    const height = screenHeight ? screenHeight : this.screenHeight || '100%';\n\n    if (type === 'SVG') {\n      return React.cloneElement(this.props.children as React.ReactElement<any>, {\n        ref: (ele: any) => {\n          // TODO\n          if (this.screen) {\n            return;\n          }\n\n          this.screenDOM = ele;\n          this.screen = d3Select.select(ele);\n          if (isValidSVG(this.screen)) {\n            this.screenContent = d3Select.select(ele && ele.firstChild);\n          } else {\n            return console.log('请确保svg内部用g包裹起来！');\n          }\n        },\n        width,\n        height\n      });\n    } else if (type === 'DOM') {\n      return (\n        <div\n          style={{ width, height, overflow: 'hidden' }}\n          ref={(ele: any) => {\n            if (this.screen) {\n              return;\n            }\n            this.screenDOM = ele;\n            this.screen = d3Select.select(ele);\n          }}>\n          {React.cloneElement(this.props.children as React.ReactElement<any>, {\n            ref: (ele: any) => {\n              this.screenContent = d3Select.select(ele);\n            }\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const { needMinimap, Buttons, width, height, mapWidth, mapHeight, mapPosition } = this.props;\n\n    const className = this.state.animation ? 'screen screen-animation' : 'screen';\n\n    return (\n      <div\n        className=\"regraph\"\n        ref={(ele: any) => {\n          this.ReScreenDOM = ele;\n        }}\n        style={{\n          width,\n          height,\n          ...getContainerStyle(mapPosition)\n        }}\n        onClick={this.props.onClick}\n        onContextMenu={this.props.onContextMenu}\n        onDrop={this.props.onDrop}\n        onDragOver={this.props.onDragOver}>\n        <div className={className}>\n          {/* 绘制画布内容 */}\n          {this.renderScreenContent()}\n          {/* 绘制按钮控制 */}\n          {Buttons && this.renderButtons(Buttons)}\n        </div>\n        {/* 绘制缩略图 */}\n        {needMinimap && this.renderMinimap(mapWidth, mapHeight, mapPosition)}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}