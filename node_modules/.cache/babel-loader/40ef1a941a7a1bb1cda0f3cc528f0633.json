{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar type_1 = require(\"./type\");\n\nvar utils_1 = require(\"../Utils/utils\");\n\nvar _GraphVertex = function () {\n  function _GraphVertex(config) {\n    this.edges = [];\n    this.id = config.id;\n    this.edges = config.edges;\n    this.origin = config.origin;\n  }\n\n  _GraphVertex.prototype.getEdge = function (id, isDirect) {\n    if (isDirect) {\n      return utils_1.find(this.edges, function (edge) {\n        return edge.v.id === id;\n      }) || null;\n    }\n\n    return utils_1.find(this.edges, function (edge) {\n      return edge.u.id === id || edge.v.id === id;\n    }) || null;\n  };\n\n  _GraphVertex.prototype.getEdges = function (isDirect, direct) {\n    var _this = this;\n\n    if (direct === void 0) {\n      direct = 'out';\n    }\n\n    if (isDirect) {\n      return this.edges.filter(function (edge) {\n        if (direct === 'out') {\n          return edge.u.id === _this.id;\n        }\n\n        return edge.v.id === _this.id;\n      });\n    }\n\n    return this.edges;\n  };\n\n  _GraphVertex.prototype.getAdjacentVertexes = function (isDirect, direct) {\n    var _this = this;\n\n    if (direct === void 0) {\n      direct = 'out';\n    }\n\n    if (isDirect) {\n      return this.getEdges(isDirect, direct).map(function (edge) {\n        return edge.u.id === _this.id ? edge.v : edge.u;\n      });\n    }\n\n    return this.edges.map(function (edge) {\n      return edge.u.id === _this.id ? edge.v : edge.u;\n    });\n  };\n\n  return _GraphVertex;\n}();\n\nvar _GraphEdge = function () {\n  function _GraphEdge(config) {\n    this.u = config.u;\n    this.v = config.v;\n    this.origin = config.origin;\n  }\n\n  return _GraphEdge;\n}();\n\nvar Graph = function () {\n  function Graph(vertexes, edges, graphConfig) {\n    if (graphConfig === void 0) {\n      graphConfig = type_1.defaultGraphConfig;\n    }\n\n    this.vertexes = [];\n    this.edges = [];\n    this._graph = [];\n    this._graphMap = new Map();\n    this.visited = [];\n    this.vertexes = vertexes;\n    this.edges = edges;\n    this.graphConfig = graphConfig;\n\n    if (!this.graphConfig.isDirect) {}\n\n    this._graph = this._createGraph();\n  }\n\n  Graph.prototype._createGraph = function () {\n    var _this = this;\n\n    this._graphReady = false;\n\n    this._graphMap.clear();\n\n    var vertexes = this.vertexes.map(function (vertex) {\n      return new _GraphVertex({\n        id: vertex.id,\n        edges: [],\n        origin: vertex\n      });\n    });\n    vertexes.forEach(function (vertex) {\n      _this._graphMap.set(vertex.id, vertex);\n    });\n    this.edges.forEach(function (edge) {\n      var u = edge.u,\n          v = edge.v;\n\n      var uVertex = _this.getVertex(u);\n\n      var vVertex = _this.getVertex(v);\n\n      var graphEdge = new _GraphEdge({\n        u: uVertex,\n        v: vVertex,\n        origin: edge\n      });\n      uVertex.edges.push(graphEdge);\n      vVertex.edges.push(graphEdge);\n    });\n    this._graphReady = true;\n    return vertexes;\n  };\n\n  Graph.prototype._defaultIsDfs = function (id) {\n    if (this.visited.includes(id)) {\n      return false;\n    }\n\n    this.visited.push(id);\n    return true;\n  };\n\n  Graph.prototype.dfs = function (vertex, getAdjacentVertexes, callback, isDfs, callBackResult, _isFirst) {\n    var _this = this;\n\n    if (isDfs === void 0) {\n      isDfs = function () {\n        return true;\n      };\n    }\n\n    if (callBackResult === void 0) {\n      callBackResult = null;\n    }\n\n    if (_isFirst === void 0) {\n      _isFirst = true;\n    }\n\n    if (_isFirst) {\n      this.visited = [];\n    }\n\n    if (!isDfs(vertex.id) || !this._defaultIsDfs(vertex.id)) {\n      return;\n    }\n\n    getAdjacentVertexes(vertex).forEach(function (node, index) {\n      var result = callback(vertex, node, callBackResult, index);\n\n      _this.dfs(node, getAdjacentVertexes, callback, isDfs, result, false);\n    });\n\n    if (_isFirst) {\n      this.visited = [];\n    }\n  };\n\n  Graph.prototype.getEdge = function (u, v) {\n    if (!this._graphMap.has(u) || !this._graphMap.has(v)) {\n      return null;\n    }\n\n    var graphNode = this._graphMap.get(u);\n\n    return graphNode.getEdge(v, this.graphConfig.isDirect);\n  };\n\n  Graph.prototype.getVertex = function (id) {\n    if (!this._graphMap.has(id)) {\n      return null;\n    }\n\n    return this._graphMap.get(id);\n  };\n\n  Graph.prototype.getAdjacentVertexes = function (id, direct) {\n    if (direct === void 0) {\n      direct = 'out';\n    }\n\n    if (!this._graphMap.has(id)) {\n      return [];\n    }\n\n    return this._graphMap.get(id).getAdjacentVertexes(this.graphConfig.isDirect, direct);\n  };\n\n  Graph.prototype.getGraph = function (nodeId) {\n    var _this = this;\n\n    var id = nodeId || this.vertexes[0].id;\n\n    if (!this._graphMap.has(id)) {\n      return null;\n    }\n\n    var source = this._graphMap.get(id);\n\n    var tempNodeMap = new Map();\n\n    var vertexes = tslib_1.__assign(tslib_1.__assign({}, source.origin), {\n      _id: source.id,\n      _relations: []\n    });\n\n    tempNodeMap.set(source.id, vertexes);\n    this.dfs(vertexes, function (vertex) {\n      var _graphNode = _this._graphMap.get(vertex.id);\n\n      _graphNode.getEdges(_this.graphConfig.isDirect).forEach(function (edge) {\n        vertex._relations.push(tslib_1.__assign(tslib_1.__assign({}, edge.origin), {\n          _u: null,\n          _v: null,\n          _origin: edge.origin\n        }));\n      });\n\n      return _graphNode.getAdjacentVertexes(_this.graphConfig.isDirect).map(function (_node) {\n        if (tempNodeMap.has(_node.id)) {\n          return tempNodeMap.get(_node.id);\n        }\n\n        var node = tslib_1.__assign(tslib_1.__assign({}, _node.origin), {\n          _id: _node.id,\n          _relations: [],\n          _origin: _node.origin\n        });\n\n        tempNodeMap.set(_node.id, node);\n        return node;\n      });\n    }, function (source, target) {\n      var relation = utils_1.find(source._relations, function (relation) {\n        return relation.u === source._id && relation.v === target._id;\n      });\n      relation._u = source;\n      relation._v = target;\n    });\n    tempNodeMap.clear();\n    return vertexes;\n  };\n\n  Graph.prototype.updateVertex = function (vertex) {\n    if (!this._graphMap.has(vertex.id)) {\n      return;\n    }\n\n    var curVertex = this._graphMap.get(vertex.id);\n\n    curVertex.origin = vertex;\n    this.vertexes = this.vertexes.map(function (node) {\n      return node.id === vertex.id ? vertex : node;\n    });\n  };\n\n  Graph.prototype.updateEdge = function (edge) {\n    if (!this._graphMap.has(edge.v) || !this._graphMap.has(edge.u)) {\n      return;\n    }\n\n    var curU = this._graphMap.get(edge.u);\n\n    var curEdge = curU.getEdge(edge.v, this.graphConfig.isDirect);\n\n    if (curEdge) {\n      curEdge.origin = edge;\n      this.edges = this.edges.map(function (e) {\n        if (e.u === edge.u && e.v === edge.v) {\n          return edge;\n        }\n\n        return e;\n      });\n    }\n  };\n\n  Graph.prototype.updateGraph = function (vertexes, edges, changeVertex, changeEdge) {\n    var _this = this;\n\n    if (changeVertex === void 0) {\n      changeVertex = function (newV) {\n        return newV;\n      };\n    }\n\n    if (changeEdge === void 0) {\n      changeEdge = function (newE) {\n        return newE;\n      };\n    }\n\n    this._graphReady = false;\n    var newVertexes = vertexes.map(function (vertex) {\n      if (_this._graphMap.has(vertex.id)) {\n        var oldVertex = _this._graphMap.get(vertex.id).origin;\n\n        var newVertex = changeVertex(vertex, oldVertex);\n\n        _this.updateVertex(newVertex);\n\n        return _this._graphMap.get(vertex.id);\n      }\n\n      _this.vertexes.push(vertex);\n\n      return new _GraphVertex({\n        id: vertex.id,\n        edges: [],\n        origin: vertex\n      });\n    });\n    newVertexes.forEach(function (vertex) {\n      if (!_this._graphMap.has(vertex.id)) {\n        _this._graphMap.set(vertex.id, vertex);\n      }\n    });\n    edges.forEach(function (edge) {\n      var u = edge.u,\n          v = edge.v;\n\n      var uVertex = _this.getVertex(u);\n\n      var vVertex = _this.getVertex(v);\n\n      if (!_this.getEdge(u, v)) {\n        var graphEdge = new _GraphEdge({\n          u: uVertex,\n          v: vVertex,\n          origin: edge\n        });\n\n        _this.edges.push(edge);\n\n        uVertex.edges.push(graphEdge);\n        vVertex.edges.push(graphEdge);\n      } else {\n        var oldEdge = _this.getEdge(u, v).origin;\n\n        var newEdge = changeEdge(edge, oldEdge);\n\n        _this.updateEdge(newEdge);\n      }\n    });\n    this._graphReady = true;\n  };\n\n  return Graph;\n}();\n\nexports.default = Graph;","map":{"version":3,"sources":["../../src/BaseGraph/Graph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar type_1 = require(\"./type\");\nvar utils_1 = require(\"../Utils/utils\");\nvar _GraphVertex = (function () {\n    function _GraphVertex(config) {\n        this.edges = [];\n        this.id = config.id;\n        this.edges = config.edges;\n        this.origin = config.origin;\n    }\n    _GraphVertex.prototype.getEdge = function (id, isDirect) {\n        if (isDirect) {\n            return utils_1.find(this.edges, function (edge) {\n                return edge.v.id === id;\n            }) || null;\n        }\n        return utils_1.find(this.edges, function (edge) {\n            return edge.u.id === id || edge.v.id === id;\n        }) || null;\n    };\n    _GraphVertex.prototype.getEdges = function (isDirect, direct) {\n        var _this = this;\n        if (direct === void 0) { direct = 'out'; }\n        if (isDirect) {\n            return this.edges.filter(function (edge) {\n                if (direct === 'out') {\n                    return edge.u.id === _this.id;\n                }\n                return edge.v.id === _this.id;\n            });\n        }\n        return this.edges;\n    };\n    _GraphVertex.prototype.getAdjacentVertexes = function (isDirect, direct) {\n        var _this = this;\n        if (direct === void 0) { direct = 'out'; }\n        if (isDirect) {\n            return this.getEdges(isDirect, direct).map(function (edge) {\n                return edge.u.id === _this.id ? edge.v : edge.u;\n            });\n        }\n        return this.edges.map(function (edge) {\n            return edge.u.id === _this.id ? edge.v : edge.u;\n        });\n    };\n    return _GraphVertex;\n}());\nvar _GraphEdge = (function () {\n    function _GraphEdge(config) {\n        this.u = config.u;\n        this.v = config.v;\n        this.origin = config.origin;\n    }\n    return _GraphEdge;\n}());\nvar Graph = (function () {\n    function Graph(vertexes, edges, graphConfig) {\n        if (graphConfig === void 0) { graphConfig = type_1.defaultGraphConfig; }\n        this.vertexes = [];\n        this.edges = [];\n        this._graph = [];\n        this._graphMap = new Map();\n        this.visited = [];\n        this.vertexes = vertexes;\n        this.edges = edges;\n        this.graphConfig = graphConfig;\n        if (!this.graphConfig.isDirect) {\n        }\n        this._graph = this._createGraph();\n    }\n    Graph.prototype._createGraph = function () {\n        var _this = this;\n        this._graphReady = false;\n        this._graphMap.clear();\n        var vertexes = this.vertexes.map(function (vertex) {\n            return new _GraphVertex({\n                id: vertex.id,\n                edges: [],\n                origin: vertex,\n            });\n        });\n        vertexes.forEach(function (vertex) {\n            _this._graphMap.set(vertex.id, vertex);\n        });\n        this.edges.forEach(function (edge) {\n            var u = edge.u, v = edge.v;\n            var uVertex = _this.getVertex(u);\n            var vVertex = _this.getVertex(v);\n            var graphEdge = new _GraphEdge({\n                u: uVertex,\n                v: vVertex,\n                origin: edge,\n            });\n            uVertex.edges.push(graphEdge);\n            vVertex.edges.push(graphEdge);\n        });\n        this._graphReady = true;\n        return vertexes;\n    };\n    Graph.prototype._defaultIsDfs = function (id) {\n        if (this.visited.includes(id)) {\n            return false;\n        }\n        this.visited.push(id);\n        return true;\n    };\n    Graph.prototype.dfs = function (vertex, getAdjacentVertexes, callback, isDfs, callBackResult, _isFirst) {\n        var _this = this;\n        if (isDfs === void 0) { isDfs = function () { return true; }; }\n        if (callBackResult === void 0) { callBackResult = null; }\n        if (_isFirst === void 0) { _isFirst = true; }\n        if (_isFirst) {\n            this.visited = [];\n        }\n        if (!isDfs(vertex.id) || !this._defaultIsDfs(vertex.id)) {\n            return;\n        }\n        getAdjacentVertexes(vertex).forEach(function (node, index) {\n            var result = callback(vertex, node, callBackResult, index);\n            _this.dfs(node, getAdjacentVertexes, callback, isDfs, result, false);\n        });\n        if (_isFirst) {\n            this.visited = [];\n        }\n    };\n    Graph.prototype.getEdge = function (u, v) {\n        if (!this._graphMap.has(u) || !this._graphMap.has(v)) {\n            return null;\n        }\n        var graphNode = this._graphMap.get(u);\n        return graphNode.getEdge(v, this.graphConfig.isDirect);\n    };\n    Graph.prototype.getVertex = function (id) {\n        if (!this._graphMap.has(id)) {\n            return null;\n        }\n        return this._graphMap.get(id);\n    };\n    Graph.prototype.getAdjacentVertexes = function (id, direct) {\n        if (direct === void 0) { direct = 'out'; }\n        if (!this._graphMap.has(id)) {\n            return [];\n        }\n        return this._graphMap.get(id).getAdjacentVertexes(this.graphConfig.isDirect, direct);\n    };\n    Graph.prototype.getGraph = function (nodeId) {\n        var _this = this;\n        var id = nodeId || this.vertexes[0].id;\n        if (!this._graphMap.has(id)) {\n            return null;\n        }\n        var source = this._graphMap.get(id);\n        var tempNodeMap = new Map();\n        var vertexes = tslib_1.__assign(tslib_1.__assign({}, source.origin), { _id: source.id, _relations: [] });\n        tempNodeMap.set(source.id, vertexes);\n        this.dfs(vertexes, function (vertex) {\n            var _graphNode = _this._graphMap.get(vertex.id);\n            _graphNode.getEdges(_this.graphConfig.isDirect).forEach(function (edge) {\n                vertex._relations.push(tslib_1.__assign(tslib_1.__assign({}, edge.origin), { _u: null, _v: null, _origin: edge.origin }));\n            });\n            return _graphNode.getAdjacentVertexes(_this.graphConfig.isDirect).map(function (_node) {\n                if (tempNodeMap.has(_node.id)) {\n                    return tempNodeMap.get(_node.id);\n                }\n                var node = tslib_1.__assign(tslib_1.__assign({}, _node.origin), { _id: _node.id, _relations: [], _origin: _node.origin });\n                tempNodeMap.set(_node.id, node);\n                return node;\n            });\n        }, function (source, target) {\n            var relation = utils_1.find(source._relations, function (relation) {\n                return relation.u === source._id && relation.v === target._id;\n            });\n            relation._u = source;\n            relation._v = target;\n        });\n        tempNodeMap.clear();\n        return vertexes;\n    };\n    Graph.prototype.updateVertex = function (vertex) {\n        if (!this._graphMap.has(vertex.id)) {\n            return;\n        }\n        var curVertex = this._graphMap.get(vertex.id);\n        curVertex.origin = vertex;\n        this.vertexes = this.vertexes.map(function (node) {\n            return node.id === vertex.id ? vertex : node;\n        });\n    };\n    Graph.prototype.updateEdge = function (edge) {\n        if (!this._graphMap.has(edge.v) || !this._graphMap.has(edge.u)) {\n            return;\n        }\n        var curU = this._graphMap.get(edge.u);\n        var curEdge = curU.getEdge(edge.v, this.graphConfig.isDirect);\n        if (curEdge) {\n            curEdge.origin = edge;\n            this.edges = this.edges.map(function (e) {\n                if (e.u === edge.u && e.v === edge.v) {\n                    return edge;\n                }\n                return e;\n            });\n        }\n    };\n    Graph.prototype.updateGraph = function (vertexes, edges, changeVertex, changeEdge) {\n        var _this = this;\n        if (changeVertex === void 0) { changeVertex = function (newV) { return newV; }; }\n        if (changeEdge === void 0) { changeEdge = function (newE) { return newE; }; }\n        this._graphReady = false;\n        var newVertexes = vertexes.map(function (vertex) {\n            if (_this._graphMap.has(vertex.id)) {\n                var oldVertex = _this._graphMap.get(vertex.id).origin;\n                var newVertex = changeVertex(vertex, oldVertex);\n                _this.updateVertex(newVertex);\n                return _this._graphMap.get(vertex.id);\n            }\n            _this.vertexes.push(vertex);\n            return new _GraphVertex({\n                id: vertex.id,\n                edges: [],\n                origin: vertex,\n            });\n        });\n        newVertexes.forEach(function (vertex) {\n            if (!_this._graphMap.has(vertex.id)) {\n                _this._graphMap.set(vertex.id, vertex);\n            }\n        });\n        edges.forEach(function (edge) {\n            var u = edge.u, v = edge.v;\n            var uVertex = _this.getVertex(u);\n            var vVertex = _this.getVertex(v);\n            if (!_this.getEdge(u, v)) {\n                var graphEdge = new _GraphEdge({\n                    u: uVertex,\n                    v: vVertex,\n                    origin: edge,\n                });\n                _this.edges.push(edge);\n                uVertex.edges.push(graphEdge);\n                vVertex.edges.push(graphEdge);\n            }\n            else {\n                var oldEdge = _this.getEdge(u, v).origin;\n                var newEdge = changeEdge(edge, oldEdge);\n                _this.updateEdge(newEdge);\n            }\n        });\n        this._graphReady = true;\n    };\n    return Graph;\n}());\nexports.default = Graph;\n//# sourceMappingURL=Graph.js.map"]},"metadata":{},"sourceType":"script"}