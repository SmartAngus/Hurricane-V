{"ast":null,"code":"/**\n * @file 节点，边搜索方法\n * @author perkinJ\n */\nimport * as _ from 'lodash';\nimport { distance } from './calc';\n\n/**\n * 查找单个上游组件\n */\nexport const findUpstreamNode = (id, nodes, links) => {\n  const selectedLinks = _.find(links, item => item.target === id);\n\n  if (selectedLinks) {\n    const upstreamComponent = _.find(nodes, item => item.id === selectedLinks.source, null);\n\n    return upstreamComponent;\n  }\n};\n/**\n * 查找单个下游组件\n */\n\nexport const findDownstreamNode = (id, nodes, links) => {\n  const selectedLinks = _.find(links, item => item.source === id);\n\n  if (selectedLinks) {\n    const downstreamComponent = _.find(nodes, item => item.id === selectedLinks.target, null);\n\n    return downstreamComponent;\n  }\n};\n/** 搜索当前组件的所有的下游组件 */\n\nexport const findAllDownstreamNodes = (id, nodes, links) => {\n  const selectedLinks = _.filter(links, item => item.source === id);\n\n  if (Array.isArray(selectedLinks) && selectedLinks.length > 0) {\n    const downstreamComponent = selectedLinks.map(link => _.find(nodes, item => item.id === link.target));\n    return downstreamComponent;\n  }\n\n  return [];\n};\n/** 搜索所有的上游组件 */\n\nexport const findAllUpstreamNodes = (id, nodes, links) => {\n  const selectedLinks = _.filter(links, item => item.target === id);\n\n  if (selectedLinks) {\n    const upstreamComponent = _.filter(nodes, item => item.id === selectedLinks[0].source);\n\n    return upstreamComponent;\n  }\n\n  return [];\n};\n/** 搜索当前组件的所有上游连线 */\n\nexport const findAllUptreamLinks = (id, links) => {\n  const newLinks = _.filter(links, item => item.target === id);\n\n  return newLinks;\n};\n/** 搜索当前组件的所有下游连线 */\n\nexport const findAllDownstreamLinks = (id, links) => {\n  const newLinks = _.filter(links, item => item.source === id);\n\n  return newLinks;\n};\n/**\n * @desc 查找靠近某个点最近的节点，用于连线\n * @param point 点的坐标\n * @param nodes 节点\n * @param range 最大范围\n */\n\nexport const findNearbyNode = (point, nodes, range) => {\n  let targetNode = null;\n  let minDis = Infinity;\n  let targetPos = '';\n  nodes.forEach(v => {\n    // 1. 比较4个点离初始点最近的点\n    let minDistance = Infinity;\n    ['left', 'right', 'top', 'bottom'].forEach(item => {\n      let targetX;\n      let targetY;\n\n      if (item === 'left') {\n        targetX = v.x;\n        targetY = v.y + v.height / 2;\n      } else if (item === 'right') {\n        targetX = v.x + v.width;\n        targetY = v.y + v.height / 2;\n      } else if (item === 'top') {\n        targetX = v.x + v.width / 2;\n        targetY = v.y;\n      } else if (item === 'bottom') {\n        targetX = v.x + v.width / 2;\n        targetY = v.y + v.height;\n      }\n\n      minDistance = distance({\n        x: point.x,\n        y: point.y\n      }, {\n        x: targetX,\n        y: targetY\n      });\n\n      if (minDis > minDistance) {\n        minDis = minDistance;\n        targetNode = v;\n        targetPos = item;\n      }\n    });\n  });\n\n  if (minDis <= range) {\n    return {\n      targetNode,\n      targetPos\n    };\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/utils/find.ts"],"names":["_","distance","findUpstreamNode","id","nodes","links","selectedLinks","find","item","target","upstreamComponent","source","findDownstreamNode","downstreamComponent","findAllDownstreamNodes","filter","Array","isArray","length","map","link","findAllUpstreamNodes","findAllUptreamLinks","newLinks","findAllDownstreamLinks","findNearbyNode","point","range","targetNode","minDis","Infinity","targetPos","forEach","v","minDistance","targetX","targetY","x","y","height","width"],"mappings":"AAAA;;;;AAKA,OAAO,KAAKA,CAAZ,MAAmB,QAAnB;AAEA,SAASC,QAAT,QAAyB,QAAzB;;AAEA;;;AAGA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,EAAD,EAAaC,KAAb,EAA4BC,KAA5B,KAA8C;AAC5E,QAAMC,aAAa,GAAGN,CAAC,CAACO,IAAF,CAAOF,KAAP,EAAcG,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBN,EAAtC,CAAtB;;AACA,MAAIG,aAAJ,EAAmB;AACjB,UAAMI,iBAAiB,GAAGV,CAAC,CAACO,IAAF,CAAOH,KAAP,EAAcI,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYG,aAAa,CAACK,MAAhD,EAAwD,IAAxD,CAA1B;;AACA,WAAOD,iBAAP;AACD;AACF,CANM;AAQP;;;;AAGA,OAAO,MAAME,kBAAkB,GAAG,CAACT,EAAD,EAAaC,KAAb,EAA4BC,KAA5B,KAA8C;AAC9E,QAAMC,aAAa,GAAGN,CAAC,CAACO,IAAF,CAAOF,KAAP,EAAcG,IAAI,IAAIA,IAAI,CAACG,MAAL,KAAgBR,EAAtC,CAAtB;;AACA,MAAIG,aAAJ,EAAmB;AACjB,UAAMO,mBAAmB,GAAGb,CAAC,CAACO,IAAF,CAAOH,KAAP,EAAcI,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYG,aAAa,CAACG,MAAhD,EAAwD,IAAxD,CAA5B;;AACA,WAAOI,mBAAP;AACD;AACF,CANM;AAQP;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACX,EAAD,EAAaC,KAAb,EAA4BC,KAA5B,KAA8C;AAClF,QAAMC,aAAa,GAAGN,CAAC,CAACe,MAAF,CAASV,KAAT,EAAgBG,IAAI,IAAIA,IAAI,CAACG,MAAL,KAAgBR,EAAxC,CAAtB;;AACA,MAAIa,KAAK,CAACC,OAAN,CAAcX,aAAd,KAAgCA,aAAa,CAACY,MAAd,GAAuB,CAA3D,EAA8D;AAC5D,UAAML,mBAAmB,GAAGP,aAAa,CAACa,GAAd,CAAkBC,IAAI,IAAIpB,CAAC,CAACO,IAAF,CAAOH,KAAP,EAAcI,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYiB,IAAI,CAACX,MAAvC,CAA1B,CAA5B;AACA,WAAOI,mBAAP;AACD;;AACD,SAAO,EAAP;AACD,CAPM;AASP;;AACA,OAAO,MAAMQ,oBAAoB,GAAG,CAAClB,EAAD,EAAaC,KAAb,EAA4BC,KAA5B,KAA8C;AAChF,QAAMC,aAAa,GAAGN,CAAC,CAACe,MAAF,CAASV,KAAT,EAAgBG,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBN,EAAxC,CAAtB;;AACA,MAAIG,aAAJ,EAAmB;AACjB,UAAMI,iBAAiB,GAAGV,CAAC,CAACe,MAAF,CAASX,KAAT,EAAgBI,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYG,aAAa,CAAC,CAAD,CAAb,CAAiBK,MAArD,CAA1B;;AACA,WAAOD,iBAAP;AACD;;AACD,SAAO,EAAP;AACD,CAPM;AASP;;AACA,OAAO,MAAMY,mBAAmB,GAAG,CAACnB,EAAD,EAAaE,KAAb,KAA+B;AAChE,QAAMkB,QAAQ,GAAGvB,CAAC,CAACe,MAAF,CAASV,KAAT,EAAgBG,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBN,EAAxC,CAAjB;;AACA,SAAOoB,QAAP;AACD,CAHM;AAKP;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACrB,EAAD,EAAaE,KAAb,KAA+B;AACnE,QAAMkB,QAAQ,GAAGvB,CAAC,CAACe,MAAF,CAASV,KAAT,EAAgBG,IAAI,IAAIA,IAAI,CAACG,MAAL,KAAgBR,EAAxC,CAAjB;;AACA,SAAOoB,QAAP;AACD,CAHM;AAKP;;;;;;;AAMA,OAAO,MAAME,cAAc,GAAG,CAACC,KAAD,EAAetB,KAAf,EAA8BuB,KAA9B,KAAgD;AAC5E,MAAIC,UAAgB,GAAG,IAAvB;AACA,MAAIC,MAAM,GAAGC,QAAb;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEA3B,EAAAA,KAAK,CAAC4B,OAAN,CAAcC,CAAC,IAAI;AACjB;AACA,QAAIC,WAAW,GAAGJ,QAAlB;AACA,KAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,EAAmCE,OAAnC,CAA2CxB,IAAI,IAAI;AACjD,UAAI2B,OAAJ;AACA,UAAIC,OAAJ;;AACA,UAAI5B,IAAI,KAAK,MAAb,EAAqB;AACnB2B,QAAAA,OAAO,GAAGF,CAAC,CAACI,CAAZ;AACAD,QAAAA,OAAO,GAAGH,CAAC,CAACK,CAAF,GAAML,CAAC,CAACM,MAAF,GAAW,CAA3B;AACD,OAHD,MAGO,IAAI/B,IAAI,KAAK,OAAb,EAAsB;AAC3B2B,QAAAA,OAAO,GAAGF,CAAC,CAACI,CAAF,GAAMJ,CAAC,CAACO,KAAlB;AACAJ,QAAAA,OAAO,GAAGH,CAAC,CAACK,CAAF,GAAML,CAAC,CAACM,MAAF,GAAW,CAA3B;AACD,OAHM,MAGA,IAAI/B,IAAI,KAAK,KAAb,EAAoB;AACzB2B,QAAAA,OAAO,GAAGF,CAAC,CAACI,CAAF,GAAMJ,CAAC,CAACO,KAAF,GAAU,CAA1B;AACAJ,QAAAA,OAAO,GAAGH,CAAC,CAACK,CAAZ;AACD,OAHM,MAGA,IAAI9B,IAAI,KAAK,QAAb,EAAuB;AAC5B2B,QAAAA,OAAO,GAAGF,CAAC,CAACI,CAAF,GAAMJ,CAAC,CAACO,KAAF,GAAU,CAA1B;AACAJ,QAAAA,OAAO,GAAGH,CAAC,CAACK,CAAF,GAAML,CAAC,CAACM,MAAlB;AACD;;AAEDL,MAAAA,WAAW,GAAGjC,QAAQ,CACpB;AACEoC,QAAAA,CAAC,EAAEX,KAAK,CAACW,CADX;AAEEC,QAAAA,CAAC,EAAEZ,KAAK,CAACY;AAFX,OADoB,EAKpB;AACED,QAAAA,CAAC,EAAEF,OADL;AAEEG,QAAAA,CAAC,EAAEF;AAFL,OALoB,CAAtB;;AAWA,UAAIP,MAAM,GAAGK,WAAb,EAA0B;AACxBL,QAAAA,MAAM,GAAGK,WAAT;AACAN,QAAAA,UAAU,GAAGK,CAAb;AACAF,QAAAA,SAAS,GAAGvB,IAAZ;AACD;AACF,KAjCD;AAkCD,GArCD;;AAuCA,MAAIqB,MAAM,IAAIF,KAAd,EAAqB;AACnB,WAAO;AAAEC,MAAAA,UAAF;AAAcG,MAAAA;AAAd,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CAhDM","sourcesContent":["/**\n * @file 节点，边搜索方法\n * @author perkinJ\n */\n\nimport * as _ from 'lodash';\nimport { Node, Link } from '../constants/defines';\nimport { distance } from './calc';\nimport { Point } from './types';\n/**\n * 查找单个上游组件\n */\nexport const findUpstreamNode = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.find(links, item => item.target === id);\n  if (selectedLinks) {\n    const upstreamComponent = _.find(nodes, item => item.id === selectedLinks.source, null);\n    return upstreamComponent;\n  }\n};\n\n/**\n * 查找单个下游组件\n */\nexport const findDownstreamNode = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.find(links, item => item.source === id);\n  if (selectedLinks) {\n    const downstreamComponent = _.find(nodes, item => item.id === selectedLinks.target, null);\n    return downstreamComponent;\n  }\n};\n\n/** 搜索当前组件的所有的下游组件 */\nexport const findAllDownstreamNodes = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.filter(links, item => item.source === id);\n  if (Array.isArray(selectedLinks) && selectedLinks.length > 0) {\n    const downstreamComponent = selectedLinks.map(link => _.find(nodes, item => item.id === link.target));\n    return downstreamComponent;\n  }\n  return [];\n};\n\n/** 搜索所有的上游组件 */\nexport const findAllUpstreamNodes = (id: string, nodes: Node[], links: Link[]) => {\n  const selectedLinks = _.filter(links, item => item.target === id);\n  if (selectedLinks) {\n    const upstreamComponent = _.filter(nodes, item => item.id === selectedLinks[0].source);\n    return upstreamComponent;\n  }\n  return [];\n};\n\n/** 搜索当前组件的所有上游连线 */\nexport const findAllUptreamLinks = (id: string, links: Link[]) => {\n  const newLinks = _.filter(links, item => item.target === id);\n  return newLinks;\n};\n\n/** 搜索当前组件的所有下游连线 */\nexport const findAllDownstreamLinks = (id: string, links: Link[]) => {\n  const newLinks = _.filter(links, item => item.source === id);\n  return newLinks;\n};\n\n/**\n * @desc 查找靠近某个点最近的节点，用于连线\n * @param point 点的坐标\n * @param nodes 节点\n * @param range 最大范围\n */\nexport const findNearbyNode = (point: Point, nodes: Node[], range: number) => {\n  let targetNode: Node = null;\n  let minDis = Infinity;\n  let targetPos = '';\n\n  nodes.forEach(v => {\n    // 1. 比较4个点离初始点最近的点\n    let minDistance = Infinity;\n    ['left', 'right', 'top', 'bottom'].forEach(item => {\n      let targetX;\n      let targetY;\n      if (item === 'left') {\n        targetX = v.x;\n        targetY = v.y + v.height / 2;\n      } else if (item === 'right') {\n        targetX = v.x + v.width;\n        targetY = v.y + v.height / 2;\n      } else if (item === 'top') {\n        targetX = v.x + v.width / 2;\n        targetY = v.y;\n      } else if (item === 'bottom') {\n        targetX = v.x + v.width / 2;\n        targetY = v.y + v.height;\n      }\n\n      minDistance = distance(\n        {\n          x: point.x,\n          y: point.y\n        },\n        {\n          x: targetX,\n          y: targetY\n        }\n      );\n\n      if (minDis > minDistance) {\n        minDis = minDistance;\n        targetNode = v;\n        targetPos = item;\n      }\n    });\n  });\n\n  if (minDis <= range) {\n    return { targetNode, targetPos };\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}