{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n\nfunction useEventListener(eventName, handler, options) {\n  const ref = useRef();\n  const savedHandler = useRef();\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    const passedInElement = options && (typeof options.dom === \"function\" ? options.dom() : options.dom);\n    let element = passedInElement ? passedInElement : ref.current || window;\n    const isSupported = element.addEventListener;\n    if (!isSupported) return;\n\n    const eventListener = event => savedHandler.current && savedHandler.current(event);\n\n    element.addEventListener(eventName, eventListener, {\n      capture: options === null || options === void 0 ? void 0 : options.capture,\n      once: options === null || options === void 0 ? void 0 : options.once,\n      passive: options === null || options === void 0 ? void 0 : options.passive\n    });\n    return () => {\n      element.removeEventListener(eventName, eventListener, {\n        capture: options === null || options === void 0 ? void 0 : options.capture\n      });\n    };\n  }, [eventName, options, ref.current]);\n  return ref;\n}\n\nexport { useEventListener };","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/hooks/useEventListener.tsx"],"names":["useEffect","useRef","useEventListener","eventName","handler","options","ref","savedHandler","current","passedInElement","dom","element","window","isSupported","addEventListener","eventListener","event","capture","once","passive","removeEventListener"],"mappings":"AAAA,SAA2BA,SAA3B,EAAsCC,MAAtC,QAAoD,OAApD;;AAuBA,SAASC,gBAAT,CACEC,SADF,EAEEC,OAFF,EAGEC,OAHF,EAIE;AACA,QAAMC,GAAG,GAAGL,MAAM,EAAlB;AACA,QAAMM,YAAY,GAAGN,MAAM,EAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,eAAe,GACnBJ,OAAO,KACN,OAAOA,OAAO,CAACK,GAAf,KAAuB,UAAvB,GAAoCL,OAAO,CAACK,GAAR,EAApC,GAAoDL,OAAO,CAACK,GADtD,CADT;AAGA,QAAIC,OAAO,GAAGF,eAAe,GAAGA,eAAH,GAAqBH,GAAG,CAACE,OAAJ,IAAeI,MAAjE;AACA,UAAMC,WAAW,GAAGF,OAAO,CAACG,gBAA5B;AACA,QAAI,CAACD,WAAL,EAAkB;;AAClB,UAAME,aAAa,GACjBC,KADoB,IAGpBT,YAAY,CAACC,OAAb,IAAwBD,YAAY,CAACC,OAAb,CAAqBQ,KAArB,CAH1B;;AAKAL,IAAAA,OAAO,CAACG,gBAAR,CAAyBX,SAAzB,EAAoCY,aAApC,EAAmD;AACjDE,MAAAA,OAAO,EAAEZ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEY,OAD+B;AAEjDC,MAAAA,IAAI,EAAEb,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEa,IAFkC;AAGjDC,MAAAA,OAAO,EAAEd,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEc;AAH+B,KAAnD;AAMA,WAAO,MAAM;AACXR,MAAAA,OAAO,CAACS,mBAAR,CAA4BjB,SAA5B,EAAuCY,aAAvC,EAAsD;AACpDE,QAAAA,OAAO,EAAEZ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEY;AADkC,OAAtD;AAGD,KAJD;AAKD,GAvBQ,EAuBN,CAACd,SAAD,EAAYE,OAAZ,EAAqBC,GAAG,CAACE,OAAzB,CAvBM,CAAT;AAwBA,SAAOF,GAAP;AACD;;AAED,SAASJ,gBAAT","sourcesContent":["import { MutableRefObject, useEffect, useRef } from \"react\";\n\ntype Target = HTMLElement | Window;\ntype Options = {\n  dom?: Dom;\n  capture?: boolean;\n  once?: boolean;\n  passive?: boolean;\n};\ntype Dom = Target | (() => Target) | null;\n\nfunction useEventListener<T extends Target = HTMLElement>(\n  eventName: string,\n  handler: Function,\n  options?: { capture?: boolean; once?: boolean; passive?: boolean }\n): MutableRefObject<T>;\n\nfunction useEventListener<T extends Target = HTMLElement>(\n  eventName: string,\n  handler: Function,\n  options?: { dom: Dom; capture?: boolean; once?: boolean; passive?: boolean }\n): void;\n\nfunction useEventListener<T extends Target = HTMLElement>(\n  eventName: string,\n  handler: Function,\n  options?: Options\n) {\n  const ref = useRef<T>();\n  const savedHandler = useRef<Function>();\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const passedInElement =\n      options &&\n      (typeof options.dom === \"function\" ? options.dom() : options.dom);\n    let element = passedInElement ? passedInElement : ref.current || window;\n    const isSupported = element.addEventListener;\n    if (!isSupported) return;\n    const eventListener = (\n      event: Event\n    ): EventListenerOrEventListenerObject | AddEventListenerOptions =>\n      savedHandler.current && savedHandler.current(event);\n\n    element.addEventListener(eventName, eventListener, {\n      capture: options?.capture,\n      once: options?.once,\n      passive: options?.passive\n    });\n\n    return () => {\n      element.removeEventListener(eventName, eventListener, {\n        capture: options?.capture\n      });\n    };\n  }, [eventName, options, ref.current]);\n  return ref;\n}\n\nexport { useEventListener };\n"]},"metadata":{},"sourceType":"module"}