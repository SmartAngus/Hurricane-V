{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nclass NodeInfo {\n  constructor() {\n    this.width = void 0;\n    this.height = void 0;\n    this.x = void 0;\n    this.y = void 0;\n    this.chart = void 0;\n  }\n\n}\n\nconst useResize = (isResize, {\n  width,\n  height,\n  x,\n  y\n}) => {\n  const [nodeWidth, setNodeWidth] = useState(width);\n  const [nodeHeight, setNodeHeight] = useState(height);\n  const [nodeLeft, setNodeLeft] = useState(x);\n  const [nodeTop, setNodeTop] = useState(y);\n  useEffect(() => {\n    setNodeLeft(x);\n    setNodeTop(y);\n  }, [x, y]);\n  useEffect(() => {\n    const resizers = document.querySelectorAll('.resizer');\n    const element = document.querySelector('.resizable');\n    const minSize = 20; // 初始高度宽度\n\n    let originWidth = 0;\n    let originHeight = 0; // 节点的初始位置\n\n    let originX = 0;\n    let originY = 0; // 鼠标拖拽的初始位置\n\n    let originMouseX = 0;\n    let originMouseY = 0;\n\n    if (isResize) {\n      for (let i = 0; i < resizers.length; i++) {\n        const currentResizer = resizers[i];\n        currentResizer.addEventListener('mousedown', e => {\n          e.preventDefault();\n          originWidth = parseFloat(getComputedStyle(element, null).getPropertyValue('width').replace('px', ''));\n          originHeight = parseFloat(getComputedStyle(element, null).getPropertyValue('height').replace('px', ''));\n          originX = element.getBoundingClientRect().left;\n          originY = element.getBoundingClientRect().top;\n          originMouseX = e.pageX;\n          originMouseY = e.pageY; // 变更type\n\n          window.addEventListener('mousemove', resize);\n          window.addEventListener('mouseup', stopResize);\n        });\n\n        const resize = e => {\n          let newWidth = 0;\n          let newHeight = 0;\n          let newLeft = 0;\n\n          if (currentResizer.classList.contains('bottom-right')) {\n            newWidth = originWidth + (e.pageX - originMouseX);\n            newHeight = originHeight + (e.pageY - originMouseY);\n\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n            }\n\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n            }\n          } else if (currentResizer.classList.contains('bottom-left')) {\n            newWidth = originWidth - (e.pageX - originMouseX);\n            newHeight = originHeight + (e.pageY - originMouseY);\n\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n              setNodeLeft(nodeLeft + (e.pageX - originMouseX));\n            }\n\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n            }\n          } else if (currentResizer.classList.contains('top-right')) {\n            newWidth = originWidth + (e.pageX - originMouseX);\n            newHeight = originHeight - (e.pageY - originMouseY);\n\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n            }\n\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n              setNodeTop(nodeTop + (e.pageY - originMouseY));\n            }\n          } else {\n            newWidth = originWidth - (e.pageX - originMouseX);\n            newHeight = originHeight - (e.pageY - originMouseY);\n\n            if (width > minSize) {\n              setNodeWidth(newWidth);\n              setNodeLeft(nodeLeft + (e.pageX - originMouseX));\n            }\n\n            if (height > minSize) {\n              setNodeHeight(newHeight);\n              setNodeTop(nodeTop + (e.pageY - originMouseY));\n            }\n          }\n        };\n\n        const stopResize = () => {\n          window.removeEventListener('mousemove', resize);\n        };\n      }\n    }\n  }, [isResize, nodeWidth, nodeHeight, setNodeHeight, setNodeWidth, nodeTop, nodeLeft, setNodeTop, setNodeLeft]);\n  return {\n    width: nodeWidth,\n    height: nodeHeight,\n    x: nodeLeft,\n    y: nodeTop\n  };\n};\n\nexport { useResize };","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/hooks/useResize.tsx"],"names":["useState","useEffect","NodeInfo","width","height","x","y","chart","useResize","isResize","nodeWidth","setNodeWidth","nodeHeight","setNodeHeight","nodeLeft","setNodeLeft","nodeTop","setNodeTop","resizers","document","querySelectorAll","element","querySelector","minSize","originWidth","originHeight","originX","originY","originMouseX","originMouseY","i","length","currentResizer","addEventListener","e","preventDefault","parseFloat","getComputedStyle","getPropertyValue","replace","getBoundingClientRect","left","top","pageX","pageY","window","resize","stopResize","newWidth","newHeight","newLeft","classList","contains","removeEventListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport {EChart} from \"../constants/defines\";\n\nclass NodeInfo {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n  chart?:EChart\n}\n\nconst useResize = (isResize: boolean, { width, height, x, y }: NodeInfo): NodeInfo => {\n  const [nodeWidth, setNodeWidth] = useState(width);\n  const [nodeHeight, setNodeHeight] = useState(height);\n  const [nodeLeft, setNodeLeft] = useState(x);\n  const [nodeTop, setNodeTop] = useState(y);\n\n  useEffect(() => {\n    setNodeLeft(x);\n    setNodeTop(y);\n  }, [x, y]);\n\n  useEffect(() => {\n    const resizers = document.querySelectorAll('.resizer');\n    const element = document.querySelector('.resizable');\n    const minSize = 20;\n    // 初始高度宽度\n    let originWidth = 0;\n    let originHeight = 0;\n    // 节点的初始位置\n    let originX = 0;\n    let originY = 0;\n    // 鼠标拖拽的初始位置\n    let originMouseX = 0;\n    let originMouseY = 0;\n    if (isResize) {\n      for (let i = 0; i < resizers.length; i++) {\n        const currentResizer = resizers[i];\n        currentResizer.addEventListener('mousedown', e => {\n          e.preventDefault();\n\n          originWidth = parseFloat(\n            getComputedStyle(element, null)\n              .getPropertyValue('width')\n              .replace('px', '')\n          );\n          originHeight = parseFloat(\n            getComputedStyle(element, null)\n              .getPropertyValue('height')\n              .replace('px', '')\n          );\n          originX = element.getBoundingClientRect().left;\n          originY = element.getBoundingClientRect().top;\n          originMouseX = (e as any).pageX;\n          originMouseY = (e as any).pageY;\n\n          // 变更type\n          window.addEventListener('mousemove', resize);\n          window.addEventListener('mouseup', stopResize);\n        });\n        const resize = e => {\n          let newWidth = 0;\n          let newHeight = 0;\n          let newLeft = 0;\n\n          if (currentResizer.classList.contains('bottom-right')) {\n            newWidth = originWidth + (e.pageX - originMouseX);\n            newHeight = originHeight + (e.pageY - originMouseY);\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n            }\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n            }\n          } else if (currentResizer.classList.contains('bottom-left')) {\n            newWidth = originWidth - (e.pageX - originMouseX);\n            newHeight = originHeight + (e.pageY - originMouseY);\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n              setNodeLeft(nodeLeft + (e.pageX - originMouseX));\n            }\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n            }\n          } else if (currentResizer.classList.contains('top-right')) {\n            newWidth = originWidth + (e.pageX - originMouseX);\n            newHeight = originHeight - (e.pageY - originMouseY);\n            if (newWidth > minSize) {\n              setNodeWidth(newWidth);\n            }\n            if (newHeight > minSize) {\n              setNodeHeight(newHeight);\n              setNodeTop(nodeTop + (e.pageY - originMouseY));\n            }\n          } else {\n            newWidth = originWidth - (e.pageX - originMouseX);\n            newHeight = originHeight - (e.pageY - originMouseY);\n            if (width > minSize) {\n              setNodeWidth(newWidth);\n              setNodeLeft(nodeLeft + (e.pageX - originMouseX));\n            }\n            if (height > minSize) {\n              setNodeHeight(newHeight);\n              setNodeTop(nodeTop + (e.pageY - originMouseY));\n            }\n          }\n        };\n\n        const stopResize = () => {\n          window.removeEventListener('mousemove', resize);\n        };\n      }\n    }\n  }, [isResize, nodeWidth, nodeHeight, setNodeHeight, setNodeWidth, nodeTop, nodeLeft, setNodeTop, setNodeLeft]);\n\n  return {\n    width: nodeWidth,\n    height: nodeHeight,\n    x: nodeLeft,\n    y: nodeTop\n  };\n};\n\nexport { useResize };\n"]},"metadata":{},"sourceType":"module"}