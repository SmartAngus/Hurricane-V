{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar BaseDAG_1 = require(\"./BaseDAG\");\n\nvar utils_1 = require(\"../../Utils/utils\");\n\nvar defaultDAGAIUConfig = {\n  isTransverse: false,\n  defaultNodeWidth: 180,\n  defaultNodeHeight: 50,\n  nodeAndNodeSpace: 40,\n  paddingLineSpace: 30,\n  levelSpace: 80,\n  margin: {\n    left: 180,\n    right: 180,\n    top: 50,\n    bottom: 50\n  },\n  padding: 200,\n  linkType: 'polyline',\n  DiyLine: function () {},\n  _isLinkMerge: true\n};\nvar emptyDAG = {\n  nodes: [],\n  links: [],\n  pos: {\n    width: 0,\n    height: 0\n  }\n};\n\nvar DAGAIU = function () {\n  function DAGAIU(DAGConfig) {\n    if (DAGConfig === void 0) {\n      DAGConfig = {};\n    }\n\n    this.config = defaultDAGAIUConfig;\n    this.config = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, this.config), {\n      defaultVirtualNodeWidth: DAGConfig.isTransverse ? 0.1 : 180\n    }), DAGConfig);\n  }\n\n  DAGAIU.prototype._preprocess = function (data) {\n    var _this = this;\n\n    var nodeMap = new Map();\n    var linkMap = new Map();\n    var nodes = [];\n    var links = [];\n    var selfLinks = [];\n    data.forEach(function (node) {\n      if (node && node.id && !nodeMap.has(node.id)) {\n        var newNode = {\n          id: node.id,\n          sourceLinks: [],\n          targetLinks: [],\n          type: 'real',\n          nodeWidth: _this.config.isTransverse ? node.nodeHeight || _this.config.defaultNodeHeight : node.nodeWidth || _this.config.defaultNodeWidth,\n          nodeHeight: _this.config.isTransverse ? node.nodeWidth || _this.config.defaultNodeWidth : node.nodeHeight || _this.config.defaultNodeHeight,\n          originInfo: node\n        };\n        var key = _this.config.getNodeKey ? _this.config.getNodeKey(node) : node.id;\n        nodeMap.set(key, newNode);\n        nodes.push(newNode);\n      }\n    });\n    data.forEach(function (node) {\n      if (node && node.id) {\n        tslib_1.__spread(node.downRelations, node.upRelations).forEach(function (relation) {\n          var sourceId = relation.sourceId,\n              targetId = relation.targetId;\n          var key = _this.config.getLinkKey ? _this.config.getLinkKey(relation) : sourceId + \"-\" + targetId;\n          var sourceNode = nodeMap.get(sourceId);\n          var targetNode = nodeMap.get(targetId);\n\n          if (sourceNode && targetNode && !linkMap.has(key)) {\n            var newRelation = {\n              source: sourceNode,\n              target: targetNode,\n              originInfo: relation,\n              isReverse: false\n            };\n\n            if (sourceId === targetId) {\n              linkMap.set(key, newRelation);\n              selfLinks.push(newRelation);\n            } else {\n              linkMap.set(key, newRelation);\n              links.push(newRelation);\n              sourceNode.sourceLinks.push(newRelation);\n              targetNode.targetLinks.push(newRelation);\n            }\n          }\n        });\n      }\n    });\n    return {\n      nodes: nodes,\n      links: links,\n      selfLinks: selfLinks\n    };\n  };\n\n  DAGAIU.prototype._getDAG = function (data) {\n    var _a = this._preprocess(data),\n        nodes = _a.nodes,\n        links = _a.links,\n        selfLinks = _a.selfLinks;\n\n    var _b = this.config,\n        defaultVirtualNodeWidth = _b.defaultVirtualNodeWidth,\n        nodeAndNodeSpace = _b.nodeAndNodeSpace,\n        paddingLineSpace = _b.paddingLineSpace,\n        levelSpace = _b.levelSpace,\n        linkType = _b.linkType,\n        DiyLine = _b.DiyLine,\n        _isLinkMerge = _b._isLinkMerge;\n    var dag = new BaseDAG_1.default({\n      nodes: nodes,\n      links: links,\n      selfLinks: selfLinks,\n      config: {\n        defaultVirtualNodeWidth: defaultVirtualNodeWidth,\n        nodeAndNodeSpace: nodeAndNodeSpace,\n        paddingLineSpace: paddingLineSpace,\n        levelSpace: levelSpace,\n        linkType: linkType,\n        DiyLine: DiyLine,\n        _isLinkMerge: _isLinkMerge\n      }\n    });\n    return dag;\n  };\n\n  DAGAIU.prototype.getSingleDAG = function (data) {\n    if (!data || !data.length) {\n      return emptyDAG;\n    }\n\n    if (this.config.isTransverse) {\n      var ans_1 = this._getDAG(data).run().getOutput(this.config.margin.bottom, this.config.margin.left);\n\n      var width = ans_1.pos.width + this.config.margin.top + this.config.margin.bottom;\n      var height = ans_1.pos.height + this.config.margin.left + this.config.margin.right;\n      return {\n        nodes: ans_1.nodes.map(function (node) {\n          return tslib_1.__assign(tslib_1.__assign({}, node), {\n            nodeWidth: node.nodeHeight,\n            nodeHeight: node.nodeWidth,\n            view: {\n              x: node.view.y,\n              y: node.view.x\n            }\n          });\n        }),\n        links: ans_1.links.map(function (link) {\n          return tslib_1.__assign(tslib_1.__assign({}, link), {\n            pathPoint: link.path,\n            path: \"\" + link.path.map(function (point, index) {\n              if (index === 0) return \"M\" + point.y + \",\" + point.x;\n              return \"L\" + point.y + \",\" + point.x;\n            }).join(' ')\n          });\n        }),\n        pos: {\n          width: height,\n          height: width\n        }\n      };\n    }\n\n    var ans = this._getDAG(data).run().getOutput(this.config.margin.left, this.config.margin.top);\n\n    return tslib_1.__assign(tslib_1.__assign({}, ans), {\n      links: ans.links.map(function (link) {\n        return tslib_1.__assign(tslib_1.__assign({}, link), {\n          pathPoint: link.path,\n          path: \"\" + link.path.map(function (point, index) {\n            if (index === 0) return \"M\" + point.x + \",\" + point.y;\n            return \"L\" + point.x + \",\" + point.y;\n          }).join(' ')\n        });\n      }),\n      pos: {\n        width: ans.pos.width + this.config.margin.left + this.config.margin.right,\n        height: ans.pos.height + this.config.margin.top + this.config.margin.bottom\n      }\n    });\n  };\n\n  DAGAIU.prototype.getMultiDAG = function (data) {\n    var _this = this;\n\n    if (!data || !data.length) {\n      return emptyDAG;\n    }\n\n    var nodesList = this._separateNodes(data);\n\n    if (nodesList.length === 1) {\n      return this.getSingleDAG(nodesList[0]);\n    } else {\n      var widthList_1 = [];\n      var heightList_1 = [];\n      var dagInstanceList = nodesList.map(function (nodes) {\n        var dag = _this._getDAG(nodes).run();\n\n        var _a = dag.getSize(),\n            width = _a.width,\n            height = _a.height;\n\n        widthList_1.push(width);\n        heightList_1.push(height);\n        return dag;\n      });\n\n      if (this.config.isTransverse) {\n        var height_1 = utils_1.maxBy(heightList_1, function (width) {\n          return width;\n        }) + this.config.margin.left + this.config.margin.right;\n        var width_1 = widthList_1.reduce(function (pre, width, index) {\n          if (index === 0) {\n            return pre + width;\n          }\n\n          return pre + width + _this.config.padding;\n        }, 0) + this.config.margin.top + this.config.margin.bottom;\n        var result_1 = dagInstanceList.reduce(function (pre, dag) {\n          var addWidth = pre.addWidth;\n          var curheight = dag.getSize().height;\n          var ans = dag.getOutput(addWidth, (height_1 - curheight) / 2);\n          return {\n            nodes: tslib_1.__spread(pre.nodes, ans.nodes),\n            links: tslib_1.__spread(pre.links, ans.links),\n            addWidth: addWidth + _this.config.padding + ans.pos.width\n          };\n        }, {\n          nodes: [],\n          links: [],\n          addWidth: this.config.margin.top\n        });\n        return {\n          nodes: result_1.nodes.map(function (node) {\n            return tslib_1.__assign(tslib_1.__assign({}, node), {\n              nodeWidth: node.nodeHeight,\n              nodeHeight: node.nodeWidth,\n              view: {\n                x: node.view.y,\n                y: node.view.x\n              }\n            });\n          }),\n          links: result_1.links.map(function (link) {\n            return tslib_1.__assign(tslib_1.__assign({}, link), {\n              pathPoint: link.path,\n              path: \"\" + link.path.map(function (point, index) {\n                if (index === 0) return \"M\" + point.y + \",\" + point.x;\n                return \"L\" + point.y + \",\" + point.x;\n              }).join(' ')\n            });\n          }),\n          pos: {\n            width: height_1,\n            height: width_1\n          }\n        };\n      }\n\n      var height_2 = utils_1.maxBy(heightList_1, function (height) {\n        return height;\n      }) + this.config.margin.top + this.config.margin.bottom;\n      var width = widthList_1.reduce(function (pre, width, index) {\n        if (index === 0) {\n          return pre + width;\n        }\n\n        return pre + width + _this.config.padding;\n      }, 0) + this.config.margin.left + this.config.margin.right;\n      var result = dagInstanceList.reduce(function (pre, dag, index) {\n        var addWidth = pre.addWidth;\n        var curheight = dag.getSize().height;\n        var ans = dag.getOutput(addWidth, (height_2 - curheight) / 2);\n        return {\n          nodes: tslib_1.__spread(pre.nodes, ans.nodes),\n          links: tslib_1.__spread(pre.links, ans.links),\n          addWidth: addWidth + _this.config.padding + ans.pos.width\n        };\n      }, {\n        nodes: [],\n        links: [],\n        addWidth: this.config.margin.left\n      });\n      return {\n        nodes: result.nodes,\n        links: result.links.map(function (link) {\n          return tslib_1.__assign(tslib_1.__assign({}, link), {\n            pathPoint: link.path,\n            path: \"\" + link.path.map(function (point, index) {\n              if (index === 0) return \"M\" + point.x + \",\" + point.y;\n              return \"L\" + point.x + \",\" + point.y;\n            }).join(' ')\n          });\n        }),\n        pos: {\n          width: width,\n          height: height_2\n        }\n      };\n    }\n  };\n\n  DAGAIU.prototype.dfs = function (node, result, queueId, nodeMarkMap) {\n    var _this = this;\n\n    tslib_1.__spread(node.upRelations, node.downRelations).forEach(function (link) {\n      var nodeId = link.targetId !== node.id ? link.targetId : link.sourceId;\n\n      if (nodeMarkMap.has(nodeId)) {\n        if (nodeMarkMap.get(nodeId).queueId === -1) {\n          var targetNode = nodeMarkMap.get(nodeId).node;\n          nodeMarkMap.set(nodeId, {\n            node: targetNode,\n            queueId: queueId\n          });\n          result.push(targetNode);\n\n          _this.dfs(targetNode, result, queueId, nodeMarkMap);\n        } else {\n          if (nodeMarkMap.get(nodeId).queueId !== queueId) {\n            throw new Error(\"\\u56FE\\u6570\\u636E\\u5F02\\u5E38, \" + nodeId + \"\\uFF0C\" + node.id);\n          }\n        }\n      }\n    });\n  };\n\n  DAGAIU.prototype._separateNodes = function (data) {\n    var _this = this;\n\n    var nodeMarkMap = new Map();\n    data.forEach(function (node) {\n      if (!nodeMarkMap.has(node.id)) {\n        nodeMarkMap.set(node.id, {\n          node: node,\n          queueId: -1\n        });\n      }\n    });\n    var result = [];\n    var index = 0;\n    data.forEach(function (node) {\n      if (nodeMarkMap.get(node.id).queueId === -1) {\n        result[index] = [];\n        result[index].push(node);\n        var targetNode = nodeMarkMap.get(node.id).node;\n        nodeMarkMap.set(node.id, {\n          node: targetNode,\n          queueId: index\n        });\n\n        _this.dfs(node, result[index], index, nodeMarkMap);\n\n        index++;\n      }\n    });\n    return result;\n  };\n\n  return DAGAIU;\n}();\n\nexports.default = DAGAIU;","map":{"version":3,"sources":["../../../src/BaseLayout/DAG/DAGAIU.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar BaseDAG_1 = require(\"./BaseDAG\");\nvar utils_1 = require(\"../../Utils/utils\");\nvar defaultDAGAIUConfig = {\n    isTransverse: false,\n    defaultNodeWidth: 180,\n    defaultNodeHeight: 50,\n    nodeAndNodeSpace: 40,\n    paddingLineSpace: 30,\n    levelSpace: 80,\n    margin: {\n        left: 180,\n        right: 180,\n        top: 50,\n        bottom: 50\n    },\n    padding: 200,\n    linkType: 'polyline',\n    DiyLine: function () { },\n    _isLinkMerge: true,\n};\nvar emptyDAG = {\n    nodes: [],\n    links: [],\n    pos: {\n        width: 0,\n        height: 0\n    }\n};\nvar DAGAIU = (function () {\n    function DAGAIU(DAGConfig) {\n        if (DAGConfig === void 0) { DAGConfig = {}; }\n        this.config = defaultDAGAIUConfig;\n        this.config = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, this.config), { defaultVirtualNodeWidth: DAGConfig.isTransverse ? 0.1 : 180 }), DAGConfig);\n    }\n    DAGAIU.prototype._preprocess = function (data) {\n        var _this = this;\n        var nodeMap = new Map();\n        var linkMap = new Map();\n        var nodes = [];\n        var links = [];\n        var selfLinks = [];\n        data.forEach(function (node) {\n            if (node && node.id && !nodeMap.has(node.id)) {\n                var newNode = {\n                    id: node.id,\n                    sourceLinks: [],\n                    targetLinks: [],\n                    type: 'real',\n                    nodeWidth: _this.config.isTransverse\n                        ? node.nodeHeight || _this.config.defaultNodeHeight\n                        : node.nodeWidth || _this.config.defaultNodeWidth,\n                    nodeHeight: _this.config.isTransverse\n                        ? node.nodeWidth || _this.config.defaultNodeWidth\n                        : node.nodeHeight || _this.config.defaultNodeHeight,\n                    originInfo: node\n                };\n                var key = _this.config.getNodeKey ? _this.config.getNodeKey(node) : node.id;\n                nodeMap.set(key, newNode);\n                nodes.push(newNode);\n            }\n        });\n        data.forEach(function (node) {\n            if (node && node.id) {\n                tslib_1.__spread(node.downRelations, node.upRelations).forEach(function (relation) {\n                    var sourceId = relation.sourceId, targetId = relation.targetId;\n                    var key = _this.config.getLinkKey ? _this.config.getLinkKey(relation) : sourceId + \"-\" + targetId;\n                    var sourceNode = nodeMap.get(sourceId);\n                    var targetNode = nodeMap.get(targetId);\n                    if (sourceNode && targetNode && !linkMap.has(key)) {\n                        var newRelation = {\n                            source: sourceNode,\n                            target: targetNode,\n                            originInfo: relation,\n                            isReverse: false,\n                        };\n                        if (sourceId === targetId) {\n                            linkMap.set(key, newRelation);\n                            selfLinks.push(newRelation);\n                        }\n                        else {\n                            linkMap.set(key, newRelation);\n                            links.push(newRelation);\n                            sourceNode.sourceLinks.push(newRelation);\n                            targetNode.targetLinks.push(newRelation);\n                        }\n                    }\n                });\n            }\n        });\n        return {\n            nodes: nodes,\n            links: links,\n            selfLinks: selfLinks\n        };\n    };\n    DAGAIU.prototype._getDAG = function (data) {\n        var _a = this._preprocess(data), nodes = _a.nodes, links = _a.links, selfLinks = _a.selfLinks;\n        var _b = this.config, defaultVirtualNodeWidth = _b.defaultVirtualNodeWidth, nodeAndNodeSpace = _b.nodeAndNodeSpace, paddingLineSpace = _b.paddingLineSpace, levelSpace = _b.levelSpace, linkType = _b.linkType, DiyLine = _b.DiyLine, _isLinkMerge = _b._isLinkMerge;\n        var dag = new BaseDAG_1.default({\n            nodes: nodes,\n            links: links,\n            selfLinks: selfLinks,\n            config: {\n                defaultVirtualNodeWidth: defaultVirtualNodeWidth,\n                nodeAndNodeSpace: nodeAndNodeSpace,\n                paddingLineSpace: paddingLineSpace,\n                levelSpace: levelSpace,\n                linkType: linkType,\n                DiyLine: DiyLine,\n                _isLinkMerge: _isLinkMerge,\n            }\n        });\n        return dag;\n    };\n    DAGAIU.prototype.getSingleDAG = function (data) {\n        if (!data || !data.length) {\n            return emptyDAG;\n        }\n        if (this.config.isTransverse) {\n            var ans_1 = this._getDAG(data)\n                .run()\n                .getOutput(this.config.margin.bottom, this.config.margin.left);\n            var width = ans_1.pos.width + this.config.margin.top + this.config.margin.bottom;\n            var height = ans_1.pos.height + this.config.margin.left + this.config.margin.right;\n            return {\n                nodes: ans_1.nodes.map(function (node) {\n                    return tslib_1.__assign(tslib_1.__assign({}, node), { nodeWidth: node.nodeHeight, nodeHeight: node.nodeWidth, view: {\n                            x: node.view.y,\n                            y: node.view.x,\n                        } });\n                }),\n                links: ans_1.links.map(function (link) {\n                    return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: \"\" + link.path\n                            .map(function (point, index) {\n                            if (index === 0)\n                                return \"M\" + point.y + \",\" + point.x;\n                            return \"L\" + point.y + \",\" + point.x;\n                        })\n                            .join(' ') });\n                }),\n                pos: {\n                    width: height,\n                    height: width,\n                }\n            };\n        }\n        var ans = this._getDAG(data)\n            .run()\n            .getOutput(this.config.margin.left, this.config.margin.top);\n        return tslib_1.__assign(tslib_1.__assign({}, ans), { links: ans.links.map(function (link) {\n                return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: \"\" + link.path\n                        .map(function (point, index) {\n                        if (index === 0)\n                            return \"M\" + point.x + \",\" + point.y;\n                        return \"L\" + point.x + \",\" + point.y;\n                    })\n                        .join(' ') });\n            }), pos: {\n                width: ans.pos.width + this.config.margin.left + this.config.margin.right,\n                height: ans.pos.height + this.config.margin.top + this.config.margin.bottom\n            } });\n    };\n    DAGAIU.prototype.getMultiDAG = function (data) {\n        var _this = this;\n        if (!data || !data.length) {\n            return emptyDAG;\n        }\n        var nodesList = this._separateNodes(data);\n        if (nodesList.length === 1) {\n            return this.getSingleDAG(nodesList[0]);\n        }\n        else {\n            var widthList_1 = [];\n            var heightList_1 = [];\n            var dagInstanceList = nodesList.map(function (nodes) {\n                var dag = _this._getDAG(nodes).run();\n                var _a = dag.getSize(), width = _a.width, height = _a.height;\n                widthList_1.push(width);\n                heightList_1.push(height);\n                return dag;\n            });\n            if (this.config.isTransverse) {\n                var height_1 = utils_1.maxBy(heightList_1, function (width) {\n                    return width;\n                }) + this.config.margin.left + this.config.margin.right;\n                var width_1 = widthList_1.reduce(function (pre, width, index) {\n                    if (index === 0) {\n                        return pre + width;\n                    }\n                    return pre + width + _this.config.padding;\n                }, 0) +\n                    this.config.margin.top +\n                    this.config.margin.bottom;\n                var result_1 = dagInstanceList.reduce(function (pre, dag) {\n                    var addWidth = pre.addWidth;\n                    var curheight = dag.getSize().height;\n                    var ans = dag.getOutput(addWidth, (height_1 - curheight) / 2);\n                    return {\n                        nodes: tslib_1.__spread(pre.nodes, ans.nodes),\n                        links: tslib_1.__spread(pre.links, ans.links),\n                        addWidth: addWidth + _this.config.padding + ans.pos.width\n                    };\n                }, {\n                    nodes: [],\n                    links: [],\n                    addWidth: this.config.margin.top\n                });\n                return {\n                    nodes: result_1.nodes.map(function (node) {\n                        return tslib_1.__assign(tslib_1.__assign({}, node), { nodeWidth: node.nodeHeight, nodeHeight: node.nodeWidth, view: {\n                                x: node.view.y,\n                                y: node.view.x,\n                            } });\n                    }),\n                    links: result_1.links.map(function (link) {\n                        return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: \"\" + link.path\n                                .map(function (point, index) {\n                                if (index === 0)\n                                    return \"M\" + point.y + \",\" + point.x;\n                                return \"L\" + point.y + \",\" + point.x;\n                            })\n                                .join(' ') });\n                    }),\n                    pos: {\n                        width: height_1,\n                        height: width_1\n                    }\n                };\n            }\n            var height_2 = utils_1.maxBy(heightList_1, function (height) {\n                return height;\n            }) +\n                this.config.margin.top +\n                this.config.margin.bottom;\n            var width = widthList_1.reduce(function (pre, width, index) {\n                if (index === 0) {\n                    return pre + width;\n                }\n                return pre + width + _this.config.padding;\n            }, 0) +\n                this.config.margin.left +\n                this.config.margin.right;\n            var result = dagInstanceList.reduce(function (pre, dag, index) {\n                var addWidth = pre.addWidth;\n                var curheight = dag.getSize().height;\n                var ans = dag.getOutput(addWidth, (height_2 - curheight) / 2);\n                return {\n                    nodes: tslib_1.__spread(pre.nodes, ans.nodes),\n                    links: tslib_1.__spread(pre.links, ans.links),\n                    addWidth: addWidth + _this.config.padding + ans.pos.width\n                };\n            }, {\n                nodes: [],\n                links: [],\n                addWidth: this.config.margin.left\n            });\n            return {\n                nodes: result.nodes,\n                links: result.links.map(function (link) {\n                    return tslib_1.__assign(tslib_1.__assign({}, link), { pathPoint: link.path, path: \"\" + link.path\n                            .map(function (point, index) {\n                            if (index === 0)\n                                return \"M\" + point.x + \",\" + point.y;\n                            return \"L\" + point.x + \",\" + point.y;\n                        })\n                            .join(' ') });\n                }),\n                pos: {\n                    width: width,\n                    height: height_2\n                }\n            };\n        }\n    };\n    DAGAIU.prototype.dfs = function (node, result, queueId, nodeMarkMap) {\n        var _this = this;\n        tslib_1.__spread(node.upRelations, node.downRelations).forEach(function (link) {\n            var nodeId = link.targetId !== node.id ? link.targetId : link.sourceId;\n            if (nodeMarkMap.has(nodeId)) {\n                if (nodeMarkMap.get(nodeId).queueId === -1) {\n                    var targetNode = nodeMarkMap.get(nodeId).node;\n                    nodeMarkMap.set(nodeId, {\n                        node: targetNode,\n                        queueId: queueId\n                    });\n                    result.push(targetNode);\n                    _this.dfs(targetNode, result, queueId, nodeMarkMap);\n                }\n                else {\n                    if (nodeMarkMap.get(nodeId).queueId !== queueId) {\n                        throw new Error(\"\\u56FE\\u6570\\u636E\\u5F02\\u5E38, \" + nodeId + \"\\uFF0C\" + node.id);\n                    }\n                }\n            }\n        });\n    };\n    DAGAIU.prototype._separateNodes = function (data) {\n        var _this = this;\n        var nodeMarkMap = new Map();\n        data.forEach(function (node) {\n            if (!nodeMarkMap.has(node.id)) {\n                nodeMarkMap.set(node.id, {\n                    node: node,\n                    queueId: -1\n                });\n            }\n        });\n        var result = [];\n        var index = 0;\n        data.forEach(function (node) {\n            if (nodeMarkMap.get(node.id).queueId === -1) {\n                result[index] = [];\n                result[index].push(node);\n                var targetNode = nodeMarkMap.get(node.id).node;\n                nodeMarkMap.set(node.id, {\n                    node: targetNode,\n                    queueId: index\n                });\n                _this.dfs(node, result[index], index, nodeMarkMap);\n                index++;\n            }\n        });\n        return result;\n    };\n    return DAGAIU;\n}());\nexports.default = DAGAIU;\n//# sourceMappingURL=DAGAIU.js.map"]},"metadata":{},"sourceType":"script"}