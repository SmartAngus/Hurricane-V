{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction sortNodelevel(nodelevel) {\n  var noChangeList = [];\n  var internalNodeLevel = nodelevel.filter(function (node) {\n    if (node._median === -1) {\n      noChangeList.push(node);\n    }\n\n    return node._median !== -1;\n  });\n  internalNodeLevel.sort(function (node1, node2) {\n    return node1._median - node2._median;\n  });\n  noChangeList.sort(function (node1, node2) {\n    return node1.levelPos - node2.levelPos;\n  });\n  noChangeList.forEach(function (node) {\n    var pos = node.levelPos;\n    internalNodeLevel.splice(pos, 0, node);\n  });\n  internalNodeLevel.forEach(function (node, i) {\n    return node._levelPos = i;\n  });\n  return internalNodeLevel;\n}\n\nexports.sortNodelevel = sortNodelevel;\n\nfunction crossing(upNodes, downNodes) {\n  var pieNodeList = [];\n  upNodes.forEach(function (node) {\n    node.sourceLinks.sort(function (link1, link2) {\n      return link1.target._levelPos - link2.target._levelPos;\n    });\n    node.sourceLinks.forEach(function (link) {\n      if (link.target.level - link.source.level === 1) {\n        pieNodeList.push(link.target);\n      }\n    });\n  });\n  var q = downNodes.length;\n  var firstIndex = 1;\n\n  while (firstIndex < q) firstIndex *= 2;\n\n  var treesize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = new Array(treesize).fill(0);\n  var crossCount = 0;\n  pieNodeList.map(function (node) {\n    var index = node._levelPos + firstIndex;\n    tree[index]++;\n\n    while (index > 0) {\n      if (index % 2) crossCount += tree[index + 1];\n      index = Math.floor((index - 1) / 2);\n      tree[index]++;\n    }\n  });\n  return crossCount;\n}\n\nexports.crossing = crossing;\n\nfunction getRatio(idx, length) {\n  var range = [0, 1];\n  var count = Math.ceil(length / 2) + 1;\n  var interval = (range[1] - range[0]) / count;\n\n  if (length % 2 === 1) {\n    var median_1 = (length - 1) / 2;\n    return interval * (Math.abs(median_1 - idx) + 1);\n  }\n\n  var median = [length / 2 - 1, length / 2];\n\n  if (idx <= median[0]) {\n    return interval * (Math.abs(median[0] - idx) + 1);\n  }\n\n  return interval * (Math.abs(median[1] - idx) + 1);\n}\n\nexports.getRatio = getRatio;","map":{"version":3,"sources":["../../../src/BaseLayout/DAG/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction sortNodelevel(nodelevel) {\n    var noChangeList = [];\n    var internalNodeLevel = nodelevel.filter(function (node) {\n        if (node._median === -1) {\n            noChangeList.push(node);\n        }\n        return node._median !== -1;\n    });\n    internalNodeLevel.sort(function (node1, node2) {\n        return node1._median - node2._median;\n    });\n    noChangeList.sort(function (node1, node2) {\n        return node1.levelPos - node2.levelPos;\n    });\n    noChangeList.forEach(function (node) {\n        var pos = node.levelPos;\n        internalNodeLevel.splice(pos, 0, node);\n    });\n    internalNodeLevel.forEach(function (node, i) { return node._levelPos = i; });\n    return internalNodeLevel;\n}\nexports.sortNodelevel = sortNodelevel;\nfunction crossing(upNodes, downNodes) {\n    var pieNodeList = [];\n    upNodes.forEach(function (node) {\n        node.sourceLinks.sort(function (link1, link2) {\n            return link1.target._levelPos - link2.target._levelPos;\n        });\n        node.sourceLinks.forEach(function (link) {\n            if (link.target.level - link.source.level === 1) {\n                pieNodeList.push(link.target);\n            }\n        });\n    });\n    var q = downNodes.length;\n    var firstIndex = 1;\n    while (firstIndex < q)\n        firstIndex *= 2;\n    var treesize = 2 * firstIndex - 1;\n    firstIndex -= 1;\n    var tree = (new Array(treesize)).fill(0);\n    var crossCount = 0;\n    pieNodeList.map(function (node) {\n        var index = node._levelPos + firstIndex;\n        tree[index]++;\n        while (index > 0) {\n            if (index % 2)\n                crossCount += tree[index + 1];\n            index = Math.floor((index - 1) / 2);\n            tree[index]++;\n        }\n    });\n    return crossCount;\n}\nexports.crossing = crossing;\nfunction getRatio(idx, length) {\n    var range = [0, 1];\n    var count = Math.ceil(length / 2) + 1;\n    var interval = (range[1] - range[0]) / count;\n    if (length % 2 === 1) {\n        var median_1 = (length - 1) / 2;\n        return interval * (Math.abs(median_1 - idx) + 1);\n    }\n    var median = [length / 2 - 1, length / 2];\n    if (idx <= median[0]) {\n        return interval * (Math.abs(median[0] - idx) + 1);\n    }\n    return interval * (Math.abs(median[1] - idx) + 1);\n}\nexports.getRatio = getRatio;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}