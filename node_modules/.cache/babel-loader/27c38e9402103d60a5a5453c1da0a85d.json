{"ast":null,"code":"/** \n * 本地持久化存储\n */\nimport { useState } from 'react';\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n\n  const setValue = async value => new Promise(resolve => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      return resolve(true);\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n      return resolve(false);\n    }\n  });\n\n  return [storedValue, setValue];\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/hooks/useLocalStorage.tsx"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","Promise","resolve","valueToStore","Function","setItem","stringify"],"mappings":"AAAA;;;AAIA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AACjD;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb;AACA,aAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,KAHD,CAGE,OAAOS,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOT,YAAP;AACD;AACF,GAR6C,CAA9C,CAHiD,CAajD;;AACA,QAAMY,QAAQ,GAAG,MAAMC,KAAN,IAAe,IAAIC,OAAJ,CAAqBC,OAAO,IAAI;AAC9D,QAAI;AACF;AACA,YAAMC,YAAY,GAChBH,KAAK,YAAYI,QAAjB,GAA4BJ,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KADnD,CAFE,CAIF;;AACAX,MAAAA,cAAc,CAACc,YAAD,CAAd,CALE,CAMF;;AACAZ,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BnB,GAA5B,EAAiCQ,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;AACA,aAAOD,OAAO,CAAC,IAAD,CAAd;AACD,KATD,CASE,OAAON,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOM,OAAO,CAAC,KAAD,CAAd;AACD;AACF,GAf+B,CAAhC;;AAiBA,SAAO,CAACd,WAAD,EAAcW,QAAd,CAAP;AACD","sourcesContent":["/** \n * 本地持久化存储\n */\n\nimport {useState} from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  const setValue = async value => new Promise<boolean>(resolve => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      return resolve(true)\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n      return resolve(false);\n    }\n  });\n\n  return [storedValue, setValue];\n}"]},"metadata":{},"sourceType":"module"}