{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar utils_1 = require(\"./utils\");\n\nvar graph_1 = require(\"../../Utils/graph\");\n\nvar utils_2 = require(\"../../Utils/utils\");\n\nvar StraightLine = function () {\n  function StraightLine(nodesByLevel, selfLinks, config) {\n    this.nodeLinkByLevelSourceNodeCount = [];\n    this.nodesByLevel = nodesByLevel;\n    this.selfLinks = selfLinks;\n    this.config = config;\n  }\n\n  StraightLine.prototype.calcPosAndPadding = function () {\n    var _this = this;\n\n    this.nodesByLevel.forEach(function (nodelevel) {\n      var count = 0;\n      nodelevel.forEach(function (node) {\n        if (node.sourceLinks && node.sourceLinks.length) {\n          count += node.sourceLinks.filter(function (link) {\n            return link.target.level - link.source.level === 1;\n          }).length;\n        }\n      });\n\n      _this.nodeLinkByLevelSourceNodeCount.push(count);\n    });\n    var levelPaddings = [];\n    this.nodesByLevel.forEach(function (nodelevel, level) {\n      if (level === _this.nodesByLevel.length - 1) {\n        levelPaddings[level] = 0;\n      } else {\n        levelPaddings[level] = Math.max(_this.nodeLinkByLevelSourceNodeCount[level] * 15, _this.config.levelSpace);\n      }\n    });\n    return levelPaddings;\n  };\n\n  StraightLine.prototype.getFinalPath = function (link, levelPaddings, isLast, isFirst) {\n    var bDis = 6;\n    var angle = 1 / 2;\n    var startPoint = {\n      x: link.source.finalPos.x + link.source.nodeWidth / 2,\n      y: link.source.finalPos.y + link.source.nodeHeight / 2\n    };\n    var endPoint = {\n      x: link.target.finalPos.x + link.target.nodeWidth / 2,\n      y: link.target.finalPos.y + link.target.nodeHeight / 2\n    };\n\n    if (isFirst && link.isReverse) {\n      var startNodeEdge_1 = [{\n        x: link.source.finalPos.x,\n        y: link.source.finalPos.y\n      }, {\n        x: link.source.finalPos.x + link.source.nodeWidth,\n        y: link.source.finalPos.y\n      }, {\n        x: link.source.finalPos.x + link.source.nodeWidth,\n        y: link.source.finalPos.y + link.source.nodeHeight\n      }, {\n        x: link.source.finalPos.x,\n        y: link.source.finalPos.y + link.source.nodeHeight\n      }];\n      var cPoint = startNodeEdge_1.reduce(function (pre, edge, index) {\n        if (graph_1.isCross(startNodeEdge_1[index], startNodeEdge_1[index === startNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint)) {\n          return graph_1.crossPoint(startNodeEdge_1[index], startNodeEdge_1[index === startNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint);\n        }\n\n        return pre;\n      }, null);\n      var aDis = graph_1.distance(endPoint, cPoint);\n      var b = (endPoint.x - cPoint.x) * aDis * bDis * 2 * angle;\n      var a = (endPoint.x - cPoint.x) * (endPoint.x - cPoint.x) + (endPoint.y - cPoint.y) * (endPoint.y - cPoint.y);\n      var c = angle * angle * aDis * aDis * bDis * bDis - (endPoint.y - cPoint.y) * (endPoint.y - cPoint.y) * bDis * bDis;\n      var y1 = cPoint.y + (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n      var x1 = (angle * aDis * bDis + (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a) * (endPoint.x - cPoint.x)) / (endPoint.y - cPoint.y) + cPoint.x;\n      var y2 = cPoint.y + (b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n      var x2 = ((endPoint.x - cPoint.x) * (b - Math.sqrt(b * b - 4 * a * c)) / (2 * a) - angle * aDis * bDis) / (endPoint.y - cPoint.y) + cPoint.x;\n      return [startPoint, cPoint, {\n        x: x1,\n        y: y1\n      }, cPoint, {\n        x: x2,\n        y: y2\n      }, cPoint, endPoint];\n    }\n\n    if (isLast && !link.isReverse) {\n      var endNodeEdge_1 = [{\n        x: link.target.finalPos.x,\n        y: link.target.finalPos.y\n      }, {\n        x: link.target.finalPos.x + link.target.nodeWidth,\n        y: link.target.finalPos.y\n      }, {\n        x: link.target.finalPos.x + link.target.nodeWidth,\n        y: link.target.finalPos.y + link.target.nodeHeight\n      }, {\n        x: link.target.finalPos.x,\n        y: link.target.finalPos.y + link.target.nodeHeight\n      }];\n      var cPoint = endNodeEdge_1.reduce(function (pre, edge, index) {\n        if (graph_1.isCross(endNodeEdge_1[index], endNodeEdge_1[index === endNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint)) {\n          return graph_1.crossPoint(endNodeEdge_1[index], endNodeEdge_1[index === endNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint);\n        }\n\n        return pre;\n      }, null);\n      var aDis = graph_1.distance(startPoint, cPoint);\n      var b = (startPoint.x - cPoint.x) * aDis * bDis * 2 * angle;\n      var a = (startPoint.x - cPoint.x) * (startPoint.x - cPoint.x) + (startPoint.y - cPoint.y) * (startPoint.y - cPoint.y);\n      var c = angle * angle * aDis * aDis * bDis * bDis - (startPoint.y - cPoint.y) * (startPoint.y - cPoint.y) * bDis * bDis;\n      var y1 = cPoint.y + (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n      var x1 = (angle * aDis * bDis + (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a) * (startPoint.x - cPoint.x)) / (startPoint.y - cPoint.y) + cPoint.x;\n      var y2 = cPoint.y + (b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n      var x2 = ((startPoint.x - cPoint.x) * (b - Math.sqrt(b * b - 4 * a * c)) / (2 * a) - angle * aDis * bDis) / (startPoint.y - cPoint.y) + cPoint.x;\n      return [startPoint, cPoint, {\n        x: x1,\n        y: y1\n      }, cPoint, {\n        x: x2,\n        y: y2\n      }, cPoint, endPoint];\n    }\n\n    return [startPoint, endPoint];\n  };\n\n  StraightLine.prototype.getSelfFinalPath = function (link) {\n    var x0 = link.source.finalPos.x + link.source.nodeWidth / 2;\n    var y0 = link.source.finalPos.y + link.source.nodeHeight;\n    var x1 = link.target.finalPos.x + link.source.nodeWidth / 2 - 30;\n    var y1 = link.target.finalPos.y;\n    return [{\n      x: x0,\n      y: y0\n    }, {\n      x: x0,\n      y: y0 + 12\n    }, {\n      x: link.source.finalPos.x - 24,\n      y: y0 + 12\n    }, {\n      x: link.source.finalPos.x - 24,\n      y: y1 - 12\n    }, {\n      x: x1,\n      y: y1 - 12\n    }, {\n      x: x1,\n      y: y1\n    }, {\n      x: x1 - 3,\n      y: y1 - 5\n    }, {\n      x: x1,\n      y: y1\n    }, {\n      x: x1 + 3,\n      y: y1 - 5\n    }, {\n      x: x1,\n      y: y1\n    }];\n  };\n\n  return StraightLine;\n}();\n\nexports.StraightLine = StraightLine;\n\nvar Polyline = function () {\n  function Polyline(nodesByLevel, selfLinks, config) {\n    this.nodeLinkByLevelSourceNodeCount = [];\n    this.nodesByLevel = nodesByLevel;\n    this.selfLinks = selfLinks;\n    this.config = config;\n  }\n\n  Polyline.prototype.calcPosAndPadding = function () {\n    var _this = this;\n\n    this.nodesByLevel.forEach(function (nodelevel) {\n      var count = -1;\n      nodelevel.forEach(function (node) {\n        if (node.sourceLinks && node.sourceLinks.length) {\n          node.sourceNodeIndex = ++count;\n        }\n\n        var selfLink = utils_2.find(_this.selfLinks, function (link) {\n          return link.source.id === node.id;\n        });\n        var singleLevelSourceLinkCount = node.sourceLinks.filter(function (link) {\n          return link.target.level - link.source.level === 1;\n        }).length;\n        var singleLevelTargetLinkCount = node.targetLinks.filter(function (link) {\n          return link.target.level - link.source.level === 1;\n        }).length;\n        var singleLevelSourceLinks = node.sourceLinks.filter(function (link) {\n          return link.target.level - link.source.level === 1;\n        }).sort(function (alink, blink) {\n          return alink.source.levelPos - blink.source.levelPos || (alink.isReverse ? 1 : 0) - (blink.isReverse ? 1 : 0);\n        });\n        var sourceCount = node.sourceLinks.filter(function (link) {\n          return link.isReverse;\n        }).length + 1;\n        var index = 0;\n        singleLevelSourceLinks.forEach(function (link) {\n          if (link.isReverse) index++;\n          link.sourcePos = (((index + 1) / (sourceCount + 1) - 0.5) * 0.6 + 0.5) * link.source.nodeWidth;\n        });\n        var singleLevelTargetLinks = node.targetLinks.filter(function (link) {\n          return link.target.level - link.source.level === 1;\n        }).sort(function (alink, blink) {\n          return alink.source.levelPos - blink.source.levelPos || (alink.isReverse ? 1 : 0) - (blink.isReverse ? 1 : 0);\n        });\n        singleLevelTargetLinks.forEach(function (link, index) {\n          link.targetPos = (((index + 1) / (singleLevelTargetLinkCount + 1) - 0.5) * 0.6 + 0.5) * link.target.nodeWidth;\n        });\n\n        if (selfLink) {\n          selfLink.sourcePos = ((1 / (singleLevelSourceLinkCount + 2) - 0.5) * 0.6 + 0.5) * node.nodeWidth;\n          selfLink.targetPos = ((1 / (singleLevelTargetLinkCount + 2) - 0.5) * 0.6 + 0.5) * node.nodeWidth;\n        }\n      });\n\n      _this.nodeLinkByLevelSourceNodeCount.push(count + 1);\n    });\n    var levelPaddings = [];\n    this.nodesByLevel.forEach(function (nodelevel, level) {\n      if (level === _this.nodesByLevel.length - 1) {\n        levelPaddings[level] = 0;\n      } else {\n        var turnYCount = _this.getLevelTurnYIndex(level);\n\n        levelPaddings[level] = Math.max((turnYCount + 1) * _this.config.paddingLineSpace, _this.config.levelSpace);\n      }\n    });\n    return levelPaddings;\n  };\n\n  Polyline.prototype.getLevelTurnYIndex = function (level) {\n    var _this = this;\n\n    var turnYCount = 0;\n    var nodelevel = this.nodesByLevel[level];\n    this.turnYMap = new Map();\n    nodelevel.forEach(function (node, index) {\n      node.sourceLinks.forEach(function (link) {\n        var turnYValue = utils_1.getRatio(link.source.sourceNodeIndex, _this.nodeLinkByLevelSourceNodeCount[link.source.level]);\n\n        if (_this.turnYMap.has(turnYValue)) {\n          var _a = _this.turnYMap.get(turnYValue),\n              allLine = _a.allLine,\n              allRecord = _a.allRecord;\n\n          if (!_this.config._isLinkMerge && utils_2.find(allRecord, function (item) {\n            return item.source.pos < link.source.pos && item.target.pos > link.target.pos || item.source.pos > link.source.pos && item.target.pos < link.target.pos;\n          })) {\n            var maxTurnYValue = -Infinity;\n            var flag = false;\n\n            for (var i = 0; i < allLine.length; i++) {\n              var line = allLine[i];\n              maxTurnYValue = Math.max(line.turnYValue, maxTurnYValue);\n\n              if (line.source.id === link.source.id || line.target.id === link.target.id) {\n                turnYValue = line.turnYValue;\n                link.turnYValue = turnYValue;\n                flag = true;\n                break;\n              }\n            }\n\n            if (!flag) {\n              turnYValue = maxTurnYValue + 0.1;\n              link.turnYValue = turnYValue;\n              turnYCount++;\n              allLine.push(link);\n            }\n          } else {\n            link.turnYValue = turnYValue;\n          }\n\n          allRecord.push(link);\n\n          _this.turnYMap.set(turnYValue, {\n            allLine: allLine,\n            allRecord: allRecord\n          });\n        } else {\n          turnYCount++;\n          link.turnYValue = turnYValue;\n\n          _this.turnYMap.set(turnYValue, {\n            allLine: [link],\n            allRecord: [link]\n          });\n        }\n      });\n    });\n\n    var valueArr = tslib_1.__spread(this.turnYMap.keys()).sort();\n\n    nodelevel.forEach(function (node) {\n      node.sourceLinks.forEach(function (link) {\n        link.turnYIndex = valueArr.indexOf(link.turnYValue) + 1;\n        link.turnYCount = turnYCount;\n      });\n    });\n    return turnYCount;\n  };\n\n  Polyline.prototype.getFinalPath = function (link, levelPaddings, isLast, isFirst) {\n    var x0 = link.source.finalPos.x + link.sourcePos;\n    var y0 = link.source.finalPos.y + link.source.nodeHeight;\n    var x1 = link.target.finalPos.x + link.targetPos;\n    var y1 = link.target.finalPos.y;\n    var turnY = y0 + levelPaddings[link.source.level] * (link.turnYIndex / (link.turnYCount + 1));\n\n    if (isLast && !link.isReverse) {\n      return [{\n        x: x0,\n        y: y0\n      }, {\n        x: x0,\n        y: turnY\n      }, {\n        x: x1,\n        y: turnY\n      }, {\n        x: x1,\n        y: y1\n      }, {\n        x: x1 - 3,\n        y: y1 - 5\n      }, {\n        x: x1,\n        y: y1\n      }, {\n        x: x1 + 3,\n        y: y1 - 5\n      }, {\n        x: x1,\n        y: y1\n      }];\n    }\n\n    if (isFirst && link.isReverse) {\n      return [{\n        x: x1,\n        y: y1\n      }, {\n        x: x1,\n        y: turnY\n      }, {\n        x: x0,\n        y: turnY\n      }, {\n        x: x0,\n        y: y0\n      }, {\n        x: x0 + 3,\n        y: y0 + 5\n      }, {\n        x: x0,\n        y: y0\n      }, {\n        x: x0 - 3,\n        y: y0 + 5\n      }, {\n        x: x0,\n        y: y0\n      }];\n    }\n\n    return [{\n      x: x0,\n      y: y0\n    }, {\n      x: x0,\n      y: turnY\n    }, {\n      x: x1,\n      y: turnY\n    }, {\n      x: x1,\n      y: y1\n    }];\n  };\n\n  Polyline.prototype.getSelfFinalPath = function (link) {\n    var x0 = link.source.finalPos.x + link.sourcePos;\n    var y0 = link.source.finalPos.y + link.source.nodeHeight;\n    var x1 = link.target.finalPos.x + link.targetPos;\n    var y1 = link.target.finalPos.y;\n    return [{\n      x: x0,\n      y: y0\n    }, {\n      x: x0,\n      y: y0 + 12\n    }, {\n      x: link.source.finalPos.x - 24,\n      y: y0 + 12\n    }, {\n      x: link.source.finalPos.x - 24,\n      y: y1 - 12\n    }, {\n      x: x1,\n      y: y1 - 12\n    }, {\n      x: x1,\n      y: y1\n    }, {\n      x: x1 - 3,\n      y: y1 - 5\n    }, {\n      x: x1,\n      y: y1\n    }, {\n      x: x1 + 3,\n      y: y1 - 5\n    }, {\n      x: x1,\n      y: y1\n    }];\n  };\n\n  return Polyline;\n}();\n\nexports.Polyline = Polyline;\n\nfunction LinkGenerator(type, DiyLine) {\n  switch (type) {\n    case 'straightLine':\n      {\n        return StraightLine;\n      }\n\n    case 'polyline':\n      {\n        return Polyline;\n      }\n\n    case 'diy':\n      {\n        return DiyLine;\n      }\n  }\n}\n\nexports.default = LinkGenerator;","map":{"version":3,"sources":["../../../src/BaseLayout/DAG/Link.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"./utils\");\nvar graph_1 = require(\"../../Utils/graph\");\nvar utils_2 = require(\"../../Utils/utils\");\nvar StraightLine = (function () {\n    function StraightLine(nodesByLevel, selfLinks, config) {\n        this.nodeLinkByLevelSourceNodeCount = [];\n        this.nodesByLevel = nodesByLevel;\n        this.selfLinks = selfLinks;\n        this.config = config;\n    }\n    StraightLine.prototype.calcPosAndPadding = function () {\n        var _this = this;\n        this.nodesByLevel.forEach(function (nodelevel) {\n            var count = 0;\n            nodelevel.forEach(function (node) {\n                if (node.sourceLinks && node.sourceLinks.length) {\n                    count += node.sourceLinks.filter(function (link) {\n                        return link.target.level - link.source.level === 1;\n                    }).length;\n                }\n            });\n            _this.nodeLinkByLevelSourceNodeCount.push(count);\n        });\n        var levelPaddings = [];\n        this.nodesByLevel.forEach(function (nodelevel, level) {\n            if (level === _this.nodesByLevel.length - 1) {\n                levelPaddings[level] = 0;\n            }\n            else {\n                levelPaddings[level] = Math.max(_this.nodeLinkByLevelSourceNodeCount[level] * 15, _this.config.levelSpace);\n            }\n        });\n        return levelPaddings;\n    };\n    StraightLine.prototype.getFinalPath = function (link, levelPaddings, isLast, isFirst) {\n        var bDis = 6;\n        var angle = 1 / 2;\n        var startPoint = {\n            x: link.source.finalPos.x + link.source.nodeWidth / 2,\n            y: link.source.finalPos.y + link.source.nodeHeight / 2\n        };\n        var endPoint = {\n            x: link.target.finalPos.x + link.target.nodeWidth / 2,\n            y: link.target.finalPos.y + link.target.nodeHeight / 2\n        };\n        if (isFirst && link.isReverse) {\n            var startNodeEdge_1 = [\n                { x: link.source.finalPos.x, y: link.source.finalPos.y },\n                {\n                    x: link.source.finalPos.x + link.source.nodeWidth,\n                    y: link.source.finalPos.y\n                },\n                {\n                    x: link.source.finalPos.x + link.source.nodeWidth,\n                    y: link.source.finalPos.y + link.source.nodeHeight\n                },\n                {\n                    x: link.source.finalPos.x,\n                    y: link.source.finalPos.y + link.source.nodeHeight\n                }\n            ];\n            var cPoint = startNodeEdge_1.reduce(function (pre, edge, index) {\n                if (graph_1.isCross(startNodeEdge_1[index], startNodeEdge_1[index === startNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint)) {\n                    return graph_1.crossPoint(startNodeEdge_1[index], startNodeEdge_1[index === startNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint);\n                }\n                return pre;\n            }, null);\n            var aDis = graph_1.distance(endPoint, cPoint);\n            var b = (endPoint.x - cPoint.x) * aDis * bDis * 2 * angle;\n            var a = (endPoint.x - cPoint.x) * (endPoint.x - cPoint.x) +\n                (endPoint.y - cPoint.y) * (endPoint.y - cPoint.y);\n            var c = angle * angle * aDis * aDis * bDis * bDis -\n                (endPoint.y - cPoint.y) * (endPoint.y - cPoint.y) * bDis * bDis;\n            var y1 = cPoint.y + (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n            var x1 = (angle * aDis * bDis +\n                ((-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a)) *\n                    (endPoint.x - cPoint.x)) /\n                (endPoint.y - cPoint.y) +\n                cPoint.x;\n            var y2 = cPoint.y + (b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n            var x2 = (((endPoint.x - cPoint.x) * (b - Math.sqrt(b * b - 4 * a * c))) /\n                (2 * a) -\n                angle * aDis * bDis) /\n                (endPoint.y - cPoint.y) +\n                cPoint.x;\n            return [\n                startPoint,\n                cPoint,\n                { x: x1, y: y1 },\n                cPoint,\n                { x: x2, y: y2 },\n                cPoint,\n                endPoint\n            ];\n        }\n        if (isLast && !link.isReverse) {\n            var endNodeEdge_1 = [\n                { x: link.target.finalPos.x, y: link.target.finalPos.y },\n                {\n                    x: link.target.finalPos.x + link.target.nodeWidth,\n                    y: link.target.finalPos.y\n                },\n                {\n                    x: link.target.finalPos.x + link.target.nodeWidth,\n                    y: link.target.finalPos.y + link.target.nodeHeight\n                },\n                {\n                    x: link.target.finalPos.x,\n                    y: link.target.finalPos.y + link.target.nodeHeight\n                }\n            ];\n            var cPoint = endNodeEdge_1.reduce(function (pre, edge, index) {\n                if (graph_1.isCross(endNodeEdge_1[index], endNodeEdge_1[index === endNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint)) {\n                    return graph_1.crossPoint(endNodeEdge_1[index], endNodeEdge_1[index === endNodeEdge_1.length - 1 ? 0 : index + 1], startPoint, endPoint);\n                }\n                return pre;\n            }, null);\n            var aDis = graph_1.distance(startPoint, cPoint);\n            var b = (startPoint.x - cPoint.x) * aDis * bDis * 2 * angle;\n            var a = (startPoint.x - cPoint.x) * (startPoint.x - cPoint.x) +\n                (startPoint.y - cPoint.y) * (startPoint.y - cPoint.y);\n            var c = angle * angle * aDis * aDis * bDis * bDis -\n                (startPoint.y - cPoint.y) * (startPoint.y - cPoint.y) * bDis * bDis;\n            var y1 = cPoint.y + (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n            var x1 = (angle * aDis * bDis +\n                ((-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a)) *\n                    (startPoint.x - cPoint.x)) /\n                (startPoint.y - cPoint.y) +\n                cPoint.x;\n            var y2 = cPoint.y + (b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n            var x2 = (((startPoint.x - cPoint.x) * (b - Math.sqrt(b * b - 4 * a * c))) /\n                (2 * a) -\n                angle * aDis * bDis) /\n                (startPoint.y - cPoint.y) +\n                cPoint.x;\n            return [\n                startPoint,\n                cPoint,\n                { x: x1, y: y1 },\n                cPoint,\n                { x: x2, y: y2 },\n                cPoint,\n                endPoint\n            ];\n        }\n        return [startPoint, endPoint];\n    };\n    StraightLine.prototype.getSelfFinalPath = function (link) {\n        var x0 = link.source.finalPos.x + link.source.nodeWidth / 2;\n        var y0 = link.source.finalPos.y + link.source.nodeHeight;\n        var x1 = link.target.finalPos.x + link.source.nodeWidth / 2 - 30;\n        var y1 = link.target.finalPos.y;\n        return [\n            { x: x0, y: y0 },\n            { x: x0, y: y0 + 12 },\n            { x: link.source.finalPos.x - 24, y: y0 + 12 },\n            { x: link.source.finalPos.x - 24, y: y1 - 12 },\n            { x: x1, y: y1 - 12 },\n            { x: x1, y: y1 },\n            { x: x1 - 3, y: y1 - 5 },\n            { x: x1, y: y1 },\n            { x: x1 + 3, y: y1 - 5 },\n            { x: x1, y: y1 }\n        ];\n    };\n    return StraightLine;\n}());\nexports.StraightLine = StraightLine;\nvar Polyline = (function () {\n    function Polyline(nodesByLevel, selfLinks, config) {\n        this.nodeLinkByLevelSourceNodeCount = [];\n        this.nodesByLevel = nodesByLevel;\n        this.selfLinks = selfLinks;\n        this.config = config;\n    }\n    Polyline.prototype.calcPosAndPadding = function () {\n        var _this = this;\n        this.nodesByLevel.forEach(function (nodelevel) {\n            var count = -1;\n            nodelevel.forEach(function (node) {\n                if (node.sourceLinks && node.sourceLinks.length) {\n                    node.sourceNodeIndex = ++count;\n                }\n                var selfLink = utils_2.find(_this.selfLinks, function (link) {\n                    return link.source.id === node.id;\n                });\n                var singleLevelSourceLinkCount = node.sourceLinks.filter(function (link) {\n                    return link.target.level - link.source.level === 1;\n                }).length;\n                var singleLevelTargetLinkCount = node.targetLinks.filter(function (link) {\n                    return link.target.level - link.source.level === 1;\n                }).length;\n                var singleLevelSourceLinks = node.sourceLinks\n                    .filter(function (link) {\n                    return link.target.level - link.source.level === 1;\n                })\n                    .sort(function (alink, blink) {\n                    return (alink.source.levelPos - blink.source.levelPos ||\n                        (alink.isReverse ? 1 : 0) - (blink.isReverse ? 1 : 0));\n                });\n                var sourceCount = node.sourceLinks.filter(function (link) {\n                    return link.isReverse;\n                }).length + 1;\n                var index = 0;\n                singleLevelSourceLinks.forEach(function (link) {\n                    if (link.isReverse)\n                        index++;\n                    link.sourcePos =\n                        (((index + 1) / (sourceCount + 1) - 0.5) * 0.6 + 0.5) *\n                            link.source.nodeWidth;\n                });\n                var singleLevelTargetLinks = node.targetLinks\n                    .filter(function (link) {\n                    return link.target.level - link.source.level === 1;\n                })\n                    .sort(function (alink, blink) {\n                    return (alink.source.levelPos - blink.source.levelPos ||\n                        (alink.isReverse ? 1 : 0) - (blink.isReverse ? 1 : 0));\n                });\n                singleLevelTargetLinks.forEach(function (link, index) {\n                    link.targetPos =\n                        (((index + 1) / (singleLevelTargetLinkCount + 1) - 0.5) * 0.6 +\n                            0.5) *\n                            link.target.nodeWidth;\n                });\n                if (selfLink) {\n                    selfLink.sourcePos =\n                        ((1 / (singleLevelSourceLinkCount + 2) - 0.5) * 0.6 + 0.5) *\n                            node.nodeWidth;\n                    selfLink.targetPos =\n                        ((1 / (singleLevelTargetLinkCount + 2) - 0.5) * 0.6 + 0.5) *\n                            node.nodeWidth;\n                }\n            });\n            _this.nodeLinkByLevelSourceNodeCount.push(count + 1);\n        });\n        var levelPaddings = [];\n        this.nodesByLevel.forEach(function (nodelevel, level) {\n            if (level === _this.nodesByLevel.length - 1) {\n                levelPaddings[level] = 0;\n            }\n            else {\n                var turnYCount = _this.getLevelTurnYIndex(level);\n                levelPaddings[level] = Math.max((turnYCount + 1) *\n                    _this.config.paddingLineSpace, _this.config.levelSpace);\n            }\n        });\n        return levelPaddings;\n    };\n    Polyline.prototype.getLevelTurnYIndex = function (level) {\n        var _this = this;\n        var turnYCount = 0;\n        var nodelevel = this.nodesByLevel[level];\n        this.turnYMap = new Map();\n        nodelevel.forEach(function (node, index) {\n            node.sourceLinks.forEach(function (link) {\n                var turnYValue = utils_1.getRatio(link.source.sourceNodeIndex, _this.nodeLinkByLevelSourceNodeCount[link.source.level]);\n                if (_this.turnYMap.has(turnYValue)) {\n                    var _a = _this.turnYMap.get(turnYValue), allLine = _a.allLine, allRecord = _a.allRecord;\n                    if (!_this.config._isLinkMerge && utils_2.find(allRecord, function (item) {\n                        return (item.source.pos < link.source.pos\n                            && item.target.pos > link.target.pos)\n                            || (item.source.pos > link.source.pos\n                                && item.target.pos < link.target.pos);\n                    })) {\n                        var maxTurnYValue = -Infinity;\n                        var flag = false;\n                        for (var i = 0; i < allLine.length; i++) {\n                            var line = allLine[i];\n                            maxTurnYValue = Math.max(line.turnYValue, maxTurnYValue);\n                            if (line.source.id === link.source.id || line.target.id === link.target.id) {\n                                turnYValue = line.turnYValue;\n                                link.turnYValue = turnYValue;\n                                flag = true;\n                                break;\n                            }\n                        }\n                        if (!flag) {\n                            turnYValue = maxTurnYValue + 0.1;\n                            link.turnYValue = turnYValue;\n                            turnYCount++;\n                            allLine.push(link);\n                        }\n                    }\n                    else {\n                        link.turnYValue = turnYValue;\n                    }\n                    allRecord.push(link);\n                    _this.turnYMap.set(turnYValue, {\n                        allLine: allLine,\n                        allRecord: allRecord,\n                    });\n                }\n                else {\n                    turnYCount++;\n                    link.turnYValue = turnYValue;\n                    _this.turnYMap.set(turnYValue, {\n                        allLine: [link],\n                        allRecord: [link],\n                    });\n                }\n            });\n        });\n        var valueArr = tslib_1.__spread(this.turnYMap.keys()).sort();\n        nodelevel.forEach(function (node) {\n            node.sourceLinks.forEach(function (link) {\n                link.turnYIndex = valueArr.indexOf(link.turnYValue) + 1;\n                link.turnYCount = turnYCount;\n            });\n        });\n        return turnYCount;\n    };\n    Polyline.prototype.getFinalPath = function (link, levelPaddings, isLast, isFirst) {\n        var x0 = link.source.finalPos.x + link.sourcePos;\n        var y0 = link.source.finalPos.y + link.source.nodeHeight;\n        var x1 = link.target.finalPos.x + link.targetPos;\n        var y1 = link.target.finalPos.y;\n        var turnY = y0 + levelPaddings[link.source.level] * (link.turnYIndex / (link.turnYCount + 1));\n        if (isLast && !link.isReverse) {\n            return [\n                { x: x0, y: y0 },\n                { x: x0, y: turnY },\n                { x: x1, y: turnY },\n                { x: x1, y: y1 },\n                { x: x1 - 3, y: y1 - 5 },\n                { x: x1, y: y1 },\n                { x: x1 + 3, y: y1 - 5 },\n                { x: x1, y: y1 }\n            ];\n        }\n        if (isFirst && link.isReverse) {\n            return [\n                { x: x1, y: y1 },\n                { x: x1, y: turnY },\n                { x: x0, y: turnY },\n                { x: x0, y: y0 },\n                { x: x0 + 3, y: y0 + 5 },\n                { x: x0, y: y0 },\n                { x: x0 - 3, y: y0 + 5 },\n                { x: x0, y: y0 }\n            ];\n        }\n        return [\n            { x: x0, y: y0 },\n            { x: x0, y: turnY },\n            { x: x1, y: turnY },\n            { x: x1, y: y1 }\n        ];\n    };\n    Polyline.prototype.getSelfFinalPath = function (link) {\n        var x0 = link.source.finalPos.x + link.sourcePos;\n        var y0 = link.source.finalPos.y + link.source.nodeHeight;\n        var x1 = link.target.finalPos.x + link.targetPos;\n        var y1 = link.target.finalPos.y;\n        return [\n            { x: x0, y: y0 },\n            { x: x0, y: y0 + 12 },\n            { x: link.source.finalPos.x - 24, y: y0 + 12 },\n            { x: link.source.finalPos.x - 24, y: y1 - 12 },\n            { x: x1, y: y1 - 12 },\n            { x: x1, y: y1 },\n            { x: x1 - 3, y: y1 - 5 },\n            { x: x1, y: y1 },\n            { x: x1 + 3, y: y1 - 5 },\n            { x: x1, y: y1 }\n        ];\n    };\n    return Polyline;\n}());\nexports.Polyline = Polyline;\nfunction LinkGenerator(type, DiyLine) {\n    switch (type) {\n        case 'straightLine': {\n            return StraightLine;\n        }\n        case 'polyline': {\n            return Polyline;\n        }\n        case 'diy': {\n            return DiyLine;\n        }\n    }\n}\nexports.default = LinkGenerator;\n//# sourceMappingURL=Link.js.map"]},"metadata":{},"sourceType":"script"}