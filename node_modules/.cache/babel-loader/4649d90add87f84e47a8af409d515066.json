{"ast":null,"code":"import { useEffect, useCallback, useRef } from 'react';\n// 键盘事件 keyCode 别名\nconst aliasKeyCodeMap = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  delete: [8, 46]\n}; // 键盘事件 key 别名\n\nconst aliasKeyMap = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  delete: ['Backspace', 'Delete']\n}; // 修饰键\n\nconst modifierKey = {\n  ctrl: event => event.ctrlKey,\n  shift: event => event.shiftKey,\n  alt: event => event.altKey,\n  meta: event => event.metaKey\n}; // 返回空对象\n\nconst noop = () => {};\n/**\n * 判断对象类型\n * @param [obj: any] 参数对象\n * @returns String\n */\n\n\nfunction isType(obj) {\n  return Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n}\n/**\n * 判断按键是否激活\n * @param [event: KeyboardEvent]键盘事件\n * @param [keyFilter: any] 当前键\n * @returns Boolean\n */\n\n\nfunction genFilterKey(event, keyFilter) {\n  const type = isType(keyFilter); // 数字类型直接匹配事件的 keyCode\n\n  if (type === 'number') {\n    return event.keyCode === keyFilter;\n  } // 字符串依次判断是否有组合键\n\n\n  const genArr = keyFilter.split('.');\n  let genLen = 0;\n\n  for (const key of genArr) {\n    // 组合键\n    const genModifier = modifierKey[key]; // key 别名\n\n    const aliasKey = aliasKeyMap[key]; // keyCode 别名\n\n    const aliasKeyCode = aliasKeyCodeMap[key];\n    /**\n     * 满足以上规则\n     * 1. 自定义组合键别名\n     * 2. 自定义 key 别名\n     * 3. 自定义 keyCode 别名\n     * 4. 匹配 key 或 keyCode\n     */\n\n    if (genModifier && genModifier(event) || (aliasKey && isType(aliasKey) === 'array' ? aliasKey.includes(event.key) : aliasKey === event.key) || (aliasKeyCode && isType(aliasKeyCode) === 'array' ? aliasKeyCode.includes(event.keyCode) : aliasKeyCode === event.keyCode) || event.key.toUpperCase() === key.toUpperCase()) {\n      genLen++;\n    }\n  }\n\n  return genLen === genArr.length;\n}\n/**\n * 键盘输入预处理方法\n * @param [keyFilter: any] 当前键\n * @returns () => Boolean\n */\n\n\nfunction genKeyFormater(keyFilter) {\n  const type = isType(keyFilter);\n\n  if (type === 'function') {\n    return keyFilter;\n  }\n\n  if (type === 'string' || type === 'number') {\n    return event => genFilterKey(event, keyFilter);\n  }\n\n  if (type === 'array') {\n    return event => keyFilter.some(item => genFilterKey(event, item));\n  }\n\n  return keyFilter ? () => true : () => false;\n}\n\nconst defaultEvents = ['keydown'];\n\nfunction useKeyPress(keyFilter, eventHandler = noop, option = {}) {\n  const {\n    events = defaultEvents,\n    target\n  } = option;\n  const element = useRef();\n  const callbackRef = useRef(eventHandler);\n  callbackRef.current = eventHandler;\n  const callbackHandler = useCallback(event => {\n    const genGuard = genKeyFormater(keyFilter);\n\n    if (genGuard(event)) {\n      return callbackRef.current(event);\n    }\n  }, [keyFilter]);\n  useEffect(() => {\n    const targetElement = typeof target === 'function' ? target() : target;\n    const el = element.current || targetElement || window;\n\n    for (const eventName of events) {\n      el.addEventListener(eventName, callbackHandler);\n    }\n\n    return () => {\n      for (const eventName of events) {\n        el.removeEventListener(eventName, callbackHandler);\n      }\n    };\n  }, [events, callbackHandler, target]);\n  return element;\n}\n\nexport { useKeyPress };","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/hooks/useKeyPress.tsx"],"names":["useEffect","useCallback","useRef","aliasKeyCodeMap","esc","tab","enter","space","up","left","right","down","delete","aliasKeyMap","modifierKey","ctrl","event","ctrlKey","shift","shiftKey","alt","altKey","meta","metaKey","noop","isType","obj","Object","prototype","toString","call","replace","toLowerCase","genFilterKey","keyFilter","type","keyCode","genArr","split","genLen","key","genModifier","aliasKey","aliasKeyCode","includes","toUpperCase","length","genKeyFormater","some","item","defaultEvents","useKeyPress","eventHandler","option","events","target","element","callbackRef","current","callbackHandler","genGuard","targetElement","el","window","eventName","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { useEffect, useCallback, useRef, RefObject } from 'react';\n\nexport type KeyPredicate = (event: KeyboardEvent) => boolean;\nexport type keyType = KeyboardEvent['keyCode'] | KeyboardEvent['key'];\nexport type KeyFilter = keyType | Array<keyType> | ((event: KeyboardEvent) => boolean);\nexport type EventHandler = (event: KeyboardEvent) => void;\nexport type keyEvent = 'keydown' | 'keyup';\nexport type RefType = HTMLElement | (() => HTMLElement | null);\nexport type EventOption = {\n  events?: Array<keyEvent>;\n  target?: Window | RefType;\n};\n\n// 键盘事件 keyCode 别名\nconst aliasKeyCodeMap: any = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  delete: [8, 46]\n};\n\n// 键盘事件 key 别名\nconst aliasKeyMap: any = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  delete: ['Backspace', 'Delete']\n};\n\n// 修饰键\nconst modifierKey: any = {\n  ctrl: (event: KeyboardEvent) => event.ctrlKey,\n  shift: (event: KeyboardEvent) => event.shiftKey,\n  alt: (event: KeyboardEvent) => event.altKey,\n  meta: (event: KeyboardEvent) => event.metaKey\n};\n\n// 返回空对象\nconst noop = () => {};\n\n/**\n * 判断对象类型\n * @param [obj: any] 参数对象\n * @returns String\n */\nfunction isType(obj: any) {\n  return Object.prototype.toString\n    .call(obj)\n    .replace(/^\\[object (.+)\\]$/, '$1')\n    .toLowerCase();\n}\n\n/**\n * 判断按键是否激活\n * @param [event: KeyboardEvent]键盘事件\n * @param [keyFilter: any] 当前键\n * @returns Boolean\n */\nfunction genFilterKey(event: any, keyFilter: any) {\n  const type = isType(keyFilter);\n  // 数字类型直接匹配事件的 keyCode\n  if (type === 'number') {\n    return event.keyCode === keyFilter;\n  }\n  // 字符串依次判断是否有组合键\n  const genArr = keyFilter.split('.');\n  let genLen = 0;\n  for (const key of genArr) {\n    // 组合键\n    const genModifier = modifierKey[key];\n    // key 别名\n    const aliasKey = aliasKeyMap[key];\n    // keyCode 别名\n    const aliasKeyCode = aliasKeyCodeMap[key];\n    /**\n     * 满足以上规则\n     * 1. 自定义组合键别名\n     * 2. 自定义 key 别名\n     * 3. 自定义 keyCode 别名\n     * 4. 匹配 key 或 keyCode\n     */\n    if (\n      (genModifier && genModifier(event)) ||\n      (aliasKey && isType(aliasKey) === 'array' ? aliasKey.includes(event.key) : aliasKey === event.key) ||\n      (aliasKeyCode && isType(aliasKeyCode) === 'array'\n        ? aliasKeyCode.includes(event.keyCode)\n        : aliasKeyCode === event.keyCode) ||\n      event.key.toUpperCase() === key.toUpperCase()\n    ) {\n      genLen++;\n    }\n  }\n  return genLen === genArr.length;\n}\n\n/**\n * 键盘输入预处理方法\n * @param [keyFilter: any] 当前键\n * @returns () => Boolean\n */\nfunction genKeyFormater(keyFilter: any): KeyPredicate {\n  const type = isType(keyFilter);\n  if (type === 'function') {\n    return keyFilter;\n  }\n  if (type === 'string' || type === 'number') {\n    return (event: KeyboardEvent) => genFilterKey(event, keyFilter);\n  }\n  if (type === 'array') {\n    return (event: KeyboardEvent) => keyFilter.some((item: any) => genFilterKey(event, item));\n  }\n  return keyFilter ? () => true : () => false;\n}\n\nconst defaultEvents: Array<keyEvent> = ['keydown'];\n\nfunction useKeyPress<T extends HTMLElement = HTMLInputElement>(\n  keyFilter: KeyFilter,\n  eventHandler: EventHandler = noop,\n  option: EventOption = {}\n): RefObject<T> {\n  const { events = defaultEvents, target } = option;\n  const element = useRef<T>();\n  const callbackRef = useRef(eventHandler);\n  callbackRef.current = eventHandler;\n\n  const callbackHandler = useCallback(\n    event => {\n      const genGuard: KeyPredicate = genKeyFormater(keyFilter);\n      if (genGuard(event)) {\n        return callbackRef.current(event);\n      }\n    },\n    [keyFilter]\n  );\n\n  useEffect(() => {\n    const targetElement = typeof target === 'function' ? target() : target;\n    const el = element.current || targetElement || window;\n    for (const eventName of events) {\n      el.addEventListener(eventName, callbackHandler);\n    }\n    return () => {\n      for (const eventName of events) {\n        el.removeEventListener(eventName, callbackHandler);\n      }\n    };\n  }, [events, callbackHandler, target]);\n\n  return element as RefObject<T>;\n}\n\nexport { useKeyPress };\n"]},"metadata":{},"sourceType":"module"}