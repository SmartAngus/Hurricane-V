{"ast":null,"code":"import { useRef, useEffect, useCallback } from 'react'; // 鼠标点击事件，click 不会监听右键\n\nconst defaultEvent = 'click';\nexport function useClickAway(onClickAway, dom, eventName = defaultEvent) {\n  const element = useRef();\n  const handler = useCallback(event => {\n    const targetElement = typeof dom === 'function' ? dom() : dom;\n    const el = targetElement || element.current;\n\n    if (!el || el.contains(event.target)) {\n      return;\n    }\n\n    onClickAway(event);\n  }, [element.current, onClickAway, dom]);\n  useEffect(() => {\n    document.addEventListener(eventName, handler);\n    return () => {\n      document.removeEventListener(eventName, handler);\n    };\n  }, [eventName, handler]);\n  return element;\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/hooks/useClickAway.tsx"],"names":["useRef","useEffect","useCallback","defaultEvent","useClickAway","onClickAway","dom","eventName","element","handler","event","targetElement","el","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAA2BA,MAA3B,EAAmCC,SAAnC,EAA8CC,WAA9C,QAA0E,OAA1E,C,CAEA;;AACA,MAAMC,YAAY,GAAG,OAArB;AAIA,OAAO,SAASC,YAAT,CACLC,WADK,EAELC,GAFK,EAGLC,SAAiB,GAAGJ,YAHf,EAIgB;AACrB,QAAMK,OAAO,GAAGR,MAAM,EAAtB;AAEA,QAAMS,OAAO,GAAGP,WAAW,CACzBQ,KAAK,IAAI;AACP,UAAMC,aAAa,GAAG,OAAOL,GAAP,KAAe,UAAf,GAA4BA,GAAG,EAA/B,GAAoCA,GAA1D;AACA,UAAMM,EAAE,GAAGD,aAAa,IAAIH,OAAO,CAACK,OAApC;;AACA,QAAI,CAACD,EAAD,IAAOA,EAAE,CAACE,QAAH,CAAYJ,KAAK,CAACK,MAAlB,CAAX,EAAsC;AACpC;AACD;;AAEDV,IAAAA,WAAW,CAACK,KAAD,CAAX;AACD,GATwB,EAUzB,CAACF,OAAO,CAACK,OAAT,EAAkBR,WAAlB,EAA+BC,GAA/B,CAVyB,CAA3B;AAaAL,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACC,gBAAT,CAA0BV,SAA1B,EAAqCE,OAArC;AAEA,WAAO,MAAM;AACXO,MAAAA,QAAQ,CAACE,mBAAT,CAA6BX,SAA7B,EAAwCE,OAAxC;AACD,KAFD;AAGD,GANQ,EAMN,CAACF,SAAD,EAAYE,OAAZ,CANM,CAAT;AAQA,SAAOD,OAAP;AACD","sourcesContent":["import { MutableRefObject, useRef, useEffect, useCallback, useMemo } from 'react';\n\n// 鼠标点击事件，click 不会监听右键\nconst defaultEvent = 'click';\n\ntype RefType = HTMLElement | (() => HTMLElement | null) | null;\n\nexport function useClickAway<T extends HTMLElement = HTMLDivElement>(\n  onClickAway: (event: KeyboardEvent) => void,\n  dom?: RefType,\n  eventName: string = defaultEvent,\n): MutableRefObject<T> {\n  const element = useRef<T>();\n\n  const handler = useCallback(\n    event => {\n      const targetElement = typeof dom === 'function' ? dom() : dom;\n      const el = targetElement || element.current;\n      if (!el || el.contains(event.target)) {\n        return;\n      }\n\n      onClickAway(event);\n    },\n    [element.current, onClickAway, dom],\n  );\n\n  useEffect(() => {\n    document.addEventListener(eventName, handler);\n\n    return () => {\n      document.removeEventListener(eventName, handler);\n    };\n  }, [eventName, handler]);\n\n  return element as MutableRefObject<T>;\n}"]},"metadata":{},"sourceType":"module"}