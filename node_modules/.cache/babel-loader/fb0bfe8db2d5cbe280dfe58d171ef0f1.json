{"ast":null,"code":"/**\n * @file 统一图方法\n */\nexport class Point {\n  constructor() {\n    this.x = void 0;\n    this.y = void 0;\n  }\n\n}\n/** \n * 节点叉积 p2-p1 * p3-p1\n */\n\nexport function crossProduct(p1, p2, p3) {\n  const x1 = p2.x - p1.x;\n  const y1 = p2.y - p1.y;\n  const x2 = p3.x - p1.x;\n  const y2 = p3.y - p1.y;\n  return x1 * y2 - x2 * y1;\n}\n/** 求线段与线段间的交点(p1,p2)、(p3,p4) */\n\nexport function crossPoint(p1, p2, p3, p4) {\n  const area1 = crossProduct(p3, p2, p1);\n  const area2 = crossProduct(p4, p1, p2);\n  const ansx = (p3.x * area2 + p4.x * area1) / (area2 + area1);\n  const ansy = (p3.y * area2 + p4.y * area1) / (area2 + area1);\n  return {\n    x: ansx,\n    y: ansy\n  };\n}\nconst ZERO = 1e-9;\nexport function isCross(p1, p2, p3, p4) {\n  // (vector_product(AC, AD) * vector_product(BC, BD) <= ZERO) \n  // and(vector_product(CA, CB) * vector_product(DA, DB) <= ZERO)\n  if (crossProduct(p1, p3, p4) * crossProduct(p2, p3, p4) <= ZERO && crossProduct(p3, p1, p2) * crossProduct(p4, p1, p2) <= ZERO) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 获取两点间的距离\n * @param p1 点1\n * @param p2 点2\n */\n\nexport const distance = (p1, p2) => {\n  return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\n};\n/**\n * 获取二次贝塞尔曲线的控制点\n * @param from 起点坐标\n * @param to 终点坐标\n */\n\nexport const getControlPoint = (from, to, ratio, direct = 1) => {\n  const {\n    x: x1,\n    y: y1\n  } = from;\n  const {\n    x: x2,\n    y: y2\n  } = to; // 中点的横坐标\n\n  const midX = (x1 + x2) / 2; // 中点的纵坐标\n\n  const midY = (y1 + y2) / 2;\n\n  if (x1 === x2 && y1 === y2) {\n    // 起点和终点重合\n    return {\n      x: x1,\n      y: y2\n    };\n  } else if (x1 === x2) {\n    // 起点和终点的横坐标相同\n    return {\n      x: x1 - ratio * Math.abs(y2 - y1),\n      y: midY\n    };\n  } else if (y1 === y2) {\n    // 起点和终点的纵坐标相同\n    return {\n      x: midX,\n      y: y1 + ratio * Math.abs(x2 - x1)\n    };\n  } // 法线的斜率，经过中点的垂直平分线方程 y = normalSlope * (x - midX) + midY\n\n\n  const normalSlope = -(x2 - x1) / (y2 - y1); // 控制点和中点的线段长度\n\n  const delta = ratio * Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n  const deltaX = -Math.sign(normalSlope) * delta / Math.sqrt(1 + Math.pow(normalSlope, 2));\n  return {\n    x: midX + direct * deltaX,\n    y: midY + direct * normalSlope * deltaX\n  };\n};\n/**\n * 两点间曲线\n * @param sourcePoint\n * @param targetPoint\n */\n\nexport const quadratic = (sourcePoint, targetPoint) => {\n  const centerX = (sourcePoint.x + targetPoint.x) / 2;\n  const centerY = (sourcePoint.y + targetPoint.y) / 2;\n  let tolerance = 50;\n  const sub = targetPoint.y - sourcePoint.y;\n\n  if (sub > -100 && sub < 100) {\n    tolerance = Math.max(Math.abs(targetPoint.y - sourcePoint.y) / 2, 30);\n  }\n\n  return ['M', sourcePoint.x, sourcePoint.y, 'Q', sourcePoint.x, sourcePoint.y + tolerance, centerX, centerY, 'T', targetPoint.x, targetPoint.y].join(' ');\n};\n/**\n * 求向量夹角\n * @param op1 向量1\n * @param op2 向量2\n */\n\nexport const vectorAngle = (o, p1, p2) => {\n  // 向量1\n  const va = {\n    x: p1.x - o.x,\n    y: p1.y - o.y\n  }; // 向量2\n\n  const vb = {\n    x: p2.x - o.x,\n    y: p2.y - o.y\n  }; // 向量的乘积\n\n  const va_vb = va.x * vb.x + va.y * vb.y; // 向量a的模\n\n  const va_val = Math.sqrt(va.x * va.x + va.y * va.y); // 向量b的模\n\n  const vb_val = Math.sqrt(vb.x * vb.x + vb.y * vb.y); // 余弦值\n\n  const cosValue = va_vb / (va_val * vb_val);\n  return Math.acos(cosValue) / Math.PI * 180;\n};","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/regraph/Utils/graph.ts"],"names":["Point","x","y","crossProduct","p1","p2","p3","x1","y1","x2","y2","crossPoint","p4","area1","area2","ansx","ansy","ZERO","isCross","distance","Math","sqrt","getControlPoint","from","to","ratio","direct","midX","midY","abs","normalSlope","delta","pow","deltaX","sign","quadratic","sourcePoint","targetPoint","centerX","centerY","tolerance","sub","max","join","vectorAngle","o","va","vb","va_vb","va_val","vb_val","cosValue","acos","PI"],"mappings":"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","sourcesContent":["/**\n * @file 统一图方法\n */\n\nexport class Point {\n  x: number;\n  y: number;\n}\n\n/** \n * 节点叉积 p2-p1 * p3-p1\n */\nexport function crossProduct(p1: Point, p2: Point, p3: Point) {\n  const x1 = p2.x - p1.x;\n  const y1 = p2.y - p1.y;\n  const x2 = p3.x - p1.x;\n  const y2 = p3.y - p1.y;\n  return x1 * y2 - x2 * y1;\n}\n\n/** 求线段与线段间的交点(p1,p2)、(p3,p4) */\nexport function crossPoint(p1: Point, p2: Point, p3: Point, p4: Point): Point {\n  const area1 = crossProduct(p3, p2, p1);\n  const area2 = crossProduct(p4, p1, p2);\n  const ansx = (p3.x * area2 + p4.x * area1) / (area2 + area1);\n  const ansy = (p3.y * area2 + p4.y * area1) / (area2 + area1);\n  return {\n    x: ansx,\n    y: ansy,\n  };\n}\n\nconst ZERO = 1e-9;\n\nexport function isCross(p1: Point, p2: Point, p3: Point, p4: Point): boolean {\n  // (vector_product(AC, AD) * vector_product(BC, BD) <= ZERO) \n  // and(vector_product(CA, CB) * vector_product(DA, DB) <= ZERO)\n  if (crossProduct(p1, p3, p4) * crossProduct(p2, p3, p4) <= ZERO\n    && crossProduct(p3, p1, p2) * crossProduct(p4, p1, p2) <= ZERO) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * 获取两点间的距离\n * @param p1 点1\n * @param p2 点2\n */\nexport const distance = (p1: Point, p2: Point): number => {\n  return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\n}\n\n/**\n * 获取二次贝塞尔曲线的控制点\n * @param from 起点坐标\n * @param to 终点坐标\n */\nexport const getControlPoint = (from: Point, to: Point, ratio: number, direct = 1): Point => {\n  const { x: x1, y: y1 } = from;\n  const { x: x2, y: y2 } = to;\n  // 中点的横坐标\n  const midX = (x1 + x2) / 2;\n  // 中点的纵坐标\n  const midY = (y1 + y2) / 2;\n\n  if (x1 === x2 && y1 === y2) {\n    // 起点和终点重合\n    return {\n      x: x1,\n      y: y2,\n    };\n  } else if (x1 === x2) {\n    // 起点和终点的横坐标相同\n    return {\n      x: x1 - ratio * Math.abs(y2 - y1),\n      y: midY,\n    };\n  } else if (y1 === y2) {\n    // 起点和终点的纵坐标相同\n    return {\n      x: midX,\n      y: y1 + ratio * Math.abs(x2 - x1),\n    };\n  }\n\n  // 法线的斜率，经过中点的垂直平分线方程 y = normalSlope * (x - midX) + midY\n  const normalSlope = -(x2 - x1) / (y2 - y1);\n  // 控制点和中点的线段长度\n  const delta = ratio * Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n  const deltaX = -Math.sign(normalSlope) * delta / Math.sqrt(1 + Math.pow(normalSlope, 2));\n\n  return {\n    x: midX + direct * deltaX,\n    y: midY + direct * normalSlope * deltaX\n  };\n};\n\n/**\n * 两点间曲线\n * @param sourcePoint\n * @param targetPoint\n */\nexport const quadratic = (sourcePoint: Point, targetPoint: Point): string => {\n  const centerX = (sourcePoint.x + targetPoint.x) / 2;\n  const centerY = (sourcePoint.y + targetPoint.y) / 2;\n  let tolerance = 50;\n\n  const sub = targetPoint.y - sourcePoint.y;\n\n  if (sub > -100 && sub < 100) {\n    tolerance = Math.max(Math.abs(targetPoint.y - sourcePoint.y) / 2, 30);\n  }\n\n  return [\n    'M',\n    sourcePoint.x,\n    sourcePoint.y,\n    'Q',\n    sourcePoint.x,\n    sourcePoint.y + tolerance,\n    centerX,\n    centerY,\n    'T',\n    targetPoint.x,\n    targetPoint.y\n  ].join(' ');\n};\n\n/**\n * 求向量夹角\n * @param op1 向量1\n * @param op2 向量2\n */\nexport const vectorAngle = (o: Point, p1: Point, p2: Point): number => {\n  // 向量1\n  const va = {\n    x: p1.x - o.x,\n    y: p1.y - o.y,\n  }\n  // 向量2\n  const vb = {\n    x: p2.x - o.x,\n    y: p2.y - o.y,\n  }\n\n  // 向量的乘积\n  const va_vb = (va.x * vb.x) + (va.y * vb.y);\n  // 向量a的模\n  const va_val = Math.sqrt(va.x * va.x + va.y * va.y);\n  // 向量b的模\n  const vb_val = Math.sqrt(vb.x * vb.x + vb.y * vb.y);\n  // 余弦值\n  const cosValue = va_vb / (va_val * vb_val);\n\n  return Math.acos(cosValue) / Math.PI * 180;\n}"]},"metadata":{},"sourceType":"module"}