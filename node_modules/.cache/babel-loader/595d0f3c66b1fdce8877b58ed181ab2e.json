{"ast":null,"code":"var _jsxFileName = \"/Users/majy/work/bici/code/editor-demo/src/features/editor/CanvasContent.tsx\";\n\n/**\n * @file 处理画布内的操作\n */\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { ReScreen, BaseLayout } from \"regraph-next\";\nimport { zoomIdentity } from \"d3-zoom\";\nimport { Menu } from \"antd\";\nimport { EditorNode } from \"./EditorNode\";\nimport { EditorGroup } from \"./EditorGroup\";\nimport { EditorEdges } from \"./EditorEdges\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport { CONNECTOR, OperateType, NODE_WIDTH, NODE_HEIGHT, LINK_AREA } from \"./defines\";\nimport { findNearbyNode } from \"./utils/find\";\nimport { calcLinkPosition } from \"./utils/calc\";\nimport { checkNodeIsOverGroup } from \"./utils/layout\";\nimport { exitFullscreen, launchFullscreen, isFull, getOffset } from \"../utils\";\n\nclass CanvasContentProps {\n  constructor() {\n    this.ref = void 0;\n    this.nodes = void 0;\n    this.links = void 0;\n    this.groups = void 0;\n    this.setNodes = void 0;\n    this.setLinks = void 0;\n    this.setGroups = void 0;\n    this.selectedLinks = void 0;\n    this.setSelectedLinks = void 0;\n    this.selectedNodes = void 0;\n    this.setSelectedNodes = void 0;\n    this.dragNode = void 0;\n    this.updateNodes = void 0;\n    this.updateLinks = void 0;\n    this.updateGroups = void 0;\n    this.deleteNodes = void 0;\n    this.copiedNodes = void 0;\n    this.setCopiedNodes = void 0;\n    this.currTrans = void 0;\n    this.setCurrTrans = void 0;\n    this.isKeyPressing = void 0;\n  }\n\n}\n\nclass CanvasContentState {\n  constructor() {\n    this.isDraggingNode = void 0;\n    this.isDraggingLink = void 0;\n    this.isDraggingGroup = void 0;\n    this.dragGroup = void 0;\n    this.dragNode = void 0;\n    this.dragNodeOffset = void 0;\n    this.dragGroupOffset = void 0;\n    this.dragLink = void 0;\n    this.sourcePos = void 0;\n    this.menuDisplay = void 0;\n    this.menuPos = void 0;\n    this.screenScale = void 0;\n    this.currentHoverNode = void 0;\n    this.deleteVisible = void 0;\n  }\n\n}\n\nexport default class CanvasContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nodesContainerRef = void 0;\n    this.container = void 0;\n    this.screenWidth = void 0;\n    this.screenHeight = void 0;\n    this.handleApplyTransform = void 0;\n    this.handleResize = void 0;\n    this.handleAdapt = void 0;\n    this.handleResizeTo = void 0;\n\n    this.openContainerMenu = event => {\n      event.preventDefault();\n    };\n\n    this.toggleDragGroup = isDraggingGroup => {\n      if (isDraggingGroup) {\n        window.addEventListener(\"mousemove\", this.onDragGroupMouseMove);\n        window.addEventListener(\"mouseup\", this.onDragGroupMouseUp);\n      } else {\n        window.removeEventListener(\"mousemove\", this.onDragGroupMouseMove);\n        window.removeEventListener(\"mouseup\", this.onDragGroupMouseUp);\n      }\n    };\n\n    this.toggleDragNode = isDraggingNode => {\n      if (isDraggingNode) {\n        window.addEventListener(\"mousemove\", this.onDragNodeMouseMove);\n        window.addEventListener(\"mouseup\", this.onDragNodeMouseUp);\n      } else {\n        window.removeEventListener(\"mousemove\", this.onDragNodeMouseMove);\n        window.removeEventListener(\"mouseup\", this.onDragNodeMouseUp);\n      }\n    };\n\n    this.toggleDragLink = isDraggingLink => {\n      if (isDraggingLink) {\n        window.addEventListener(\"mousemove\", this.onDragLinkMouseMove);\n        window.addEventListener(\"mouseup\", this.onDragLinkMouseUp);\n      } else {\n        window.removeEventListener(\"mousemove\", this.onDragLinkMouseMove);\n        window.removeEventListener(\"mouseup\", this.onDragLinkMouseUp);\n      }\n    };\n\n    this.onDragLinkMouseMove = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const {\n        offsetTop,\n        offsetLeft\n      } = getOffset(this.container.current); // 计算滚动条的位置\n      // @ts-ignore\n\n      const scrollLeft = document.documentElement.scrollLeft + document.querySelector(\"#root\").scrollLeft; // @ts-ignore\n\n      const scrollTop = document.documentElement.scrollTop + document.querySelector(\"#root\").scrollTop;\n      const screenX = event.clientX - offsetLeft + scrollLeft;\n      const screenY = event.clientY - offsetTop + scrollTop;\n      const {\n        k,\n        x,\n        y\n      } = this.props.currTrans;\n      this.setState(preState => {\n        const {\n          dragLink\n        } = preState;\n        return {\n          dragLink: { ...dragLink,\n            x: (screenX - x) / k,\n            y: (screenY - y) / k\n          }\n        };\n      });\n    };\n\n    this.onNodesContainerMouseDown = event => {\n      event.stopPropagation();\n      const {\n        nodes,\n        groups\n      } = this.props;\n\n      if (nodes && nodes.length > 0) {\n        const currentNode = _.find(nodes, c => {\n          if (c.ref && c.ref.current) {\n            return c.ref.current.contains(event.target);\n          }\n\n          return false;\n        });\n\n        const type = event.target.dataset && event.target.dataset.type;\n        const position = event.target.dataset && event.target.dataset.position;\n\n        if (currentNode) {\n          if (type === \"edge\" && position) {\n            /** 拖拽连线 */\n            this.onDragLinkMouseDown(currentNode, position);\n            return;\n          } else if (type === \"resize\") {\n            return;\n          } else {\n            /** 拖拽节点，排除resize节点 */\n            this.onDragNodeMouseDown(currentNode, event);\n          }\n        }\n      }\n\n      if (groups && groups.length > 0) {\n        const currentGroup = _.find(groups, c => {\n          if (c.ref && c.ref.current) {\n            return c.ref.current.contains(event.target);\n          }\n\n          return false;\n        });\n\n        this.onDragGroupMouseDown(currentGroup, event);\n      }\n    };\n\n    this.onContainerMouseDown = event => {\n      // event.stopPropagation();\n      // 过滤掉节点和边\n      const path = event.path;\n      const isNodeOrLink = this.hasNodeOrLink(path, \"editor-node\", \"editor-link\");\n\n      if (!isNodeOrLink) {\n        // 清空高亮的节点和边\n        this.handleClearActive();\n      }\n    };\n\n    this.onNodesContainerMouseMove = event => {\n      event.preventDefault();\n      const path = event.path;\n      const isNodeOrLink = this.hasNodeOrLink(path, \"editor-node\", \"editor-link\");\n      const {\n        nodes\n      } = this.props;\n\n      if (nodes && nodes.length > 0) {\n        const currentNode = _.find(nodes, c => {\n          if (c.ref && c.ref.current) {\n            return c.ref.current.contains(event.target);\n          }\n\n          return false;\n        });\n\n        if (currentNode) {\n          if (isNodeOrLink) {\n            this.setState({\n              currentHoverNode: currentNode.id\n            });\n          } else {\n            this.setState({\n              currentHoverNode: \"\"\n            });\n          }\n        }\n      }\n    };\n\n    this.onDragLinkMouseDown = (node, position) => {\n      const {\n        x,\n        y\n      } = calcLinkPosition(node, position);\n      this.setState({\n        isDraggingLink: true,\n        dragLink: {\n          originId: node.id,\n          originX: x,\n          originY: y,\n          x,\n          y\n        },\n        sourcePos: position\n      });\n    };\n\n    this.onDragLinkMouseUp = event => {\n      const {\n        setLinks,\n        links,\n        nodes\n      } = this.props;\n      const {\n        dragLink\n      } = this.state;\n      const {\n        offsetTop,\n        offsetLeft\n      } = getOffset(this.container.current); // 计算滚动条的位置\n\n      const scrollLeft = document.documentElement.scrollLeft + document.querySelector(\"#root\").scrollLeft;\n      const scrollTop = document.documentElement.scrollTop + document.querySelector(\"#root\").scrollTop;\n      const screenX = event.clientX - offsetLeft + scrollLeft;\n      const screenY = event.clientY - offsetTop + scrollTop;\n      const {\n        k,\n        x,\n        y\n      } = this.props.currTrans;\n      const nearNode = findNearbyNode({\n        x: (screenX - x) / k,\n        y: (screenY - y) / k\n      }, nodes, LINK_AREA); // 需要找到链接的是哪个节点\n\n      if (nearNode) {\n        const {\n          targetNode,\n          targetPos\n        } = nearNode;\n        const newLink = {\n          id: dragLink.originId + CONNECTOR + targetNode.id + CONNECTOR + targetPos,\n          source: dragLink.originId,\n          target: targetNode.id,\n          sourcePos: this.state.sourcePos,\n          targetPos\n        };\n        setLinks([...links, newLink]);\n      }\n\n      this.setState({\n        isDraggingLink: false,\n        dragLink: null,\n        sourcePos: \"\"\n      });\n    };\n\n    this.handleNodeIsOverGroup = (currentGroup, dragNode) => {\n      const {\n        updateNodes,\n        updateGroups\n      } = this.props;\n\n      if (checkNodeIsOverGroup(dragNode, currentGroup, \"leave\") === \"out\") {\n        // 该节点是否在组外\n        console.log(\"leave out\", dragNode);\n        updateNodes({ ...dragNode,\n          groupId: \"\"\n        });\n        const newNodes = currentGroup.nodes.filter(node => node.id !== dragNode.id); // 更新组，重新计算组的宽度\n\n        updateGroups(newNodes, dragNode.groupId);\n      } else {\n        console.log(\"leave in\"); // 改变组的大小\n\n        const newNodes = currentGroup.nodes.map(node => node.id === dragNode.id ? dragNode : node);\n        updateGroups(newNodes);\n      }\n    };\n\n    this.onDragNodeMouseDown = (node, event) => {\n      if (node) {\n        const {\n          k,\n          x,\n          y\n        } = this.props.currTrans;\n        const {\n          offsetTop,\n          offsetLeft\n        } = getOffset(this.container.current);\n        const screenX = event.clientX - offsetLeft;\n        const screenY = event.clientY - offsetTop;\n        this.setState(preState => {\n          // 计算鼠标位置在节点中的偏移量\n          return {\n            isDraggingNode: true,\n            dragNode: node,\n            dragNodeOffset: {\n              x: (screenX - x) / k - node.x,\n              y: (screenY - y) / k - node.y\n            }\n          };\n        });\n      }\n    };\n\n    this.onDragNodeMouseMove = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      const {\n        setNodes,\n        nodes,\n        groups\n      } = this.props;\n      const {\n        k,\n        x,\n        y\n      } = this.props.currTrans;\n      const {\n        offsetTop,\n        offsetLeft\n      } = getOffset(this.container.current);\n      const screenX = event.clientX - offsetLeft;\n      const screenY = event.clientY - offsetTop; // 判断当前节点平移后是否溢出画布\n      // const isOver = this.checkNodeIsOverScreen(dragNode, screenX, screenY);\n      // if (!isOver) {\n\n      this.setState(preState => {\n        const {\n          dragNode,\n          dragNodeOffset\n        } = preState;\n        const newX = (screenX - x) / k - dragNodeOffset.x;\n        const newY = (screenY - y) / k - dragNodeOffset.y;\n        return { ...preState,\n          dragNode: { ...dragNode,\n            x: newX,\n            y: newY\n          }\n        };\n      });\n      const {\n        dragNodeOffset,\n        dragNode\n      } = this.state;\n      setNodes(nodes.map(c => {\n        return c.id === dragNode.id ? { ...c,\n          x: (screenX - x) / k - dragNodeOffset.x,\n          y: (screenY - y) / k - dragNodeOffset.y\n        } : c;\n      }));\n    };\n\n    this.onDragNodeMouseUp = event => {\n      event.stopPropagation();\n      const {\n        groups,\n        updateNodes,\n        updateGroups\n      } = this.props;\n      const {\n        dragNode\n      } = this.state; // 通过是否有groupId来区分是从组中脱离还是拖入组中\n\n      if (groups) {\n        groups.forEach(group => {\n          const {\n            nodes\n          } = group; // 判断根据拖拽的节点有无groupId来属于enter还是leave\n\n          const groupId = dragNode === null || dragNode === void 0 ? void 0 : dragNode.groupId;\n\n          if (groupId) {\n            // 拖出\n            this.handleNodeIsOverGroup(group, dragNode);\n          } else {\n            // 考虑是否在组内\n            if (checkNodeIsOverGroup(dragNode, group, \"enter\") === \"in\") {\n              const newNodes = [...nodes, dragNode]; // 更新组，重新计算组的宽度\n\n              updateGroups(newNodes);\n            } else {\n              updateGroups(nodes);\n            }\n          }\n        });\n      }\n\n      this.setState({\n        isDraggingNode: false\n      });\n    };\n\n    this.onDragGroupMouseDown = (group, event) => {\n      if (group) {\n        const {\n          k,\n          x,\n          y\n        } = this.props.currTrans;\n        const {\n          offsetTop,\n          offsetLeft\n        } = getOffset(this.container.current);\n        const screenX = event.clientX - offsetLeft;\n        const screenY = event.clientY - offsetTop;\n        this.setState(preState => {\n          // 计算鼠标位置在节点中的偏移量\n          return {\n            isDraggingGroup: true,\n            dragGroup: group,\n            dragGroupOffset: {\n              x: (screenX - x) / k - group.x,\n              y: (screenY - y) / k - group.y\n            }\n          };\n        });\n      }\n    };\n\n    this.onDragGroupMouseMove = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      const {\n        setGroups,\n        groups,\n        nodes,\n        setNodes\n      } = this.props;\n      const {\n        k,\n        x,\n        y\n      } = this.props.currTrans;\n      const {\n        offsetTop,\n        offsetLeft\n      } = getOffset(this.container.current);\n      const screenX = event.clientX - offsetLeft;\n      const screenY = event.clientY - offsetTop;\n      let diffX = 0;\n      let diffY = 0;\n      this.setState(preState => {\n        const {\n          dragGroup,\n          dragGroupOffset\n        } = preState;\n        const newX = (screenX - x) / k - dragGroupOffset.x;\n        const newY = (screenY - y) / k - dragGroupOffset.y;\n        diffX = dragGroup.x - newX;\n        diffY = dragGroup.y - newY;\n        return { ...preState,\n          dragGroup: { ...dragGroup,\n            x: newX,\n            y: newY\n          }\n        };\n      });\n      const {\n        dragGroupOffset,\n        dragGroup\n      } = this.state;\n      const newGroups = groups.map(c => {\n        if (c.id === dragGroup.id) {\n          const nodes = c.nodes;\n          return { ...c,\n            x: (screenX - x) / k - dragGroupOffset.x,\n            y: (screenY - y) / k - dragGroupOffset.y,\n            // 更新节点\n            nodes: nodes.map(node => {\n              return { ...node,\n                x: node.x - diffX,\n                y: node.y - diffY\n              };\n            })\n          };\n        } else {\n          return c;\n        }\n      }); // 同时更新nodes\n\n      const newNodes = nodes.map(node => {\n        if (node.groupId === dragGroup.id) {\n          return { ...node,\n            x: node.x - diffX,\n            y: node.y - diffY\n          };\n        } else {\n          return node;\n        }\n      });\n      setNodes(newNodes);\n      setGroups(newGroups);\n    };\n\n    this.onDragGroupMouseUp = event => {\n      event.stopPropagation();\n      const {\n        groups,\n        updateNodes,\n        updateGroups\n      } = this.props;\n      const {\n        dragGroup\n      } = this.state;\n      this.setState({\n        isDraggingGroup: false,\n        dragGroup: null,\n        dragGroupOffset: null\n      });\n    };\n\n    this.getTransformInfo = currTrans => {\n      this.props.setCurrTrans(currTrans);\n    };\n\n    this.getScreenHandler = handleMap => {\n      this.handleApplyTransform = handleMap.handleApplyTransform;\n      this.handleResize = handleMap.handleResize;\n      this.handleResizeTo = handleMap.handleResizeTo;\n      this.handleAdapt = handleMap.handleAdapt;\n      this.screenWidth = handleMap.screenWidth;\n      this.screenHeight = handleMap.screenHeight;\n    };\n\n    this.handleClearActive = () => {\n      this.props.setSelectedLinks([]);\n      this.props.setSelectedNodes([]);\n    };\n\n    this.hasNodeOrLink = (array, node, link) => {\n      let isNodeOrLink = false;\n\n      for (let i = 0; i < array.length; i++) {\n        const inNode = _.includes(array[i].classList, node);\n\n        const inLink = _.includes(array[i].classList, link);\n\n        if (inNode || inLink) {\n          isNodeOrLink = true;\n          break;\n        }\n      }\n\n      return isNodeOrLink;\n    };\n\n    this.changeScreenScale = screenScale => {\n      this.setState({\n        screenScale\n      });\n    };\n\n    this.handleFullScreen = () => {\n      const fullScreen = isFull();\n\n      if (fullScreen) {\n        exitFullscreen();\n      } else {\n        launchFullscreen(this.container.current);\n      }\n    };\n\n    this.handleShowAll = () => {\n      var _$maxBy, _$maxBy2, _$maxBy3, _$maxBy4;\n\n      const {\n        nodes\n      } = this.props;\n\n      if (nodes && nodes.length === 0) {\n        return;\n      } // 组件实际范围\n\n\n      const minX = _.minBy(nodes, c => c.x).x;\n\n      const maxX = ((_$maxBy = _.maxBy(nodes, c => c.x)) === null || _$maxBy === void 0 ? void 0 : _$maxBy.x) + ((_$maxBy2 = _.maxBy(nodes, c => c.x)) === null || _$maxBy2 === void 0 ? void 0 : _$maxBy2.width);\n\n      const minY = _.minBy(nodes, c => c.y).y;\n\n      const maxY = ((_$maxBy3 = _.maxBy(nodes, c => c.y)) === null || _$maxBy3 === void 0 ? void 0 : _$maxBy3.y) + ((_$maxBy4 = _.maxBy(nodes, c => c.y)) === null || _$maxBy4 === void 0 ? void 0 : _$maxBy4.height);\n      const componentWidth = maxX - minX;\n      const componentHeight = maxY - minY; // 先在不缩放的场景下，平移到画布中点\n\n      const x = this.screenWidth / 2 - (minX + maxX) / 2;\n      const y = this.screenHeight / 2 - (minY + maxY) / 2;\n      const transform = zoomIdentity.translate(x, y).scale(1); // 适应画布最大100%，保证在节点少的情况下不发生放大\n\n      const scale = Math.min(this.screenWidth / componentWidth, this.screenHeight / componentHeight, 1); // Todo 待收敛到 ReScreen\n\n      const P0 = [this.screenWidth / 2, this.screenHeight / 2];\n      const P1 = transform.invert(P0);\n      const newTransform = zoomIdentity.translate(P0[0] - P1[0] * scale, P0[1] - P1[1] * scale).scale(scale);\n      this.handleApplyTransform(newTransform);\n    };\n\n    this.layout = () => {\n      var _$maxBy5, _$maxBy6;\n\n      const {\n        nodes,\n        links,\n        setNodes\n      } = this.props;\n\n      if (nodes && nodes.length === 0) {\n        return {\n          nodes,\n          screen: {\n            k: 1,\n            x: 0,\n            y: 0\n          }\n        };\n      }\n\n      const datas = nodes.map(component => {\n        // 兼容 BaseLayout 数据结构\n        component.nodeWidth = component.width;\n        component.nodeHeight = component.height;\n        const downRelations = links.filter(link => {\n          return link.target === component.id;\n        }).map(link => {\n          return {\n            sourceId: link.source,\n            targetId: link.target\n          };\n        });\n        const upRelations = links.filter(link => {\n          return link.source === component.id;\n        }).map(link => {\n          return {\n            sourceId: link.source,\n            targetId: link.target\n          };\n        });\n        return {\n          id: component.id,\n          downRelations,\n          upRelations\n        };\n      });\n      const maxWidth = (_$maxBy5 = _.maxBy(nodes, item => item.width)) === null || _$maxBy5 === void 0 ? void 0 : _$maxBy5.width;\n      const maxHeight = (_$maxBy6 = _.maxBy(nodes, item => item.height)) === null || _$maxBy6 === void 0 ? void 0 : _$maxBy6.height;\n      const dag = new BaseLayout.DAG({\n        isTransverse: true,\n        padding: 20,\n        margin: {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        },\n        defaultNodeWidth: maxWidth,\n        defaultNodeHeight: maxHeight\n      });\n      const {\n        nodes: newNodes\n      } = dag.getMultiDAG(datas);\n      const layoutNodes = nodes.map(component => {\n        const node = _.find(newNodes, n => n.id === component.id);\n\n        return { ...component,\n          x: node.view.x,\n          y: node.view.y\n        };\n      });\n      setNodes(layoutNodes);\n    };\n\n    this.onSelectLink = key => {\n      const {\n        selectedLinks,\n        setSelectedLinks\n      } = this.props;\n\n      if (selectedLinks) {\n        // 若连线已高线，则取消高亮状态\n        const index = _.findIndex(selectedLinks, link => link === key);\n\n        if (index > -1) {\n          setSelectedLinks([...selectedLinks.slice(0, index), ...selectedLinks.slice(index + 1)]);\n        } else {\n          setSelectedLinks([...selectedLinks, key]);\n        }\n      } else {\n        setSelectedLinks([key]);\n      }\n    };\n\n    this.onClickNode = currentNode => {\n      const {\n        selectedNodes,\n        setSelectedNodes,\n        setSelectedLinks,\n        isKeyPressing\n      } = this.props; // 区分多选按钮是否按下\n\n      if (isKeyPressing) {\n        if (selectedNodes) {\n          // 若节点已被点击则清除点击状态\n          const index = _.findIndex(selectedNodes, id => id === currentNode.id);\n\n          if (index > -1) {\n            setSelectedNodes([...selectedNodes.slice(0, index), ...selectedNodes.slice(index + 1)]);\n          } else {\n            setSelectedNodes(_.compact([...selectedNodes, currentNode.id]));\n          }\n        } else {\n          setSelectedNodes([currentNode.id]);\n        }\n      } else {\n        setSelectedNodes([currentNode.id]); // 清空高亮的连线\n\n        setSelectedLinks(null);\n      }\n    };\n\n    this.onSelectNode = (currentNode, key) => {\n      const {\n        selectedNodes,\n        deleteNodes\n      } = this.props;\n\n      if (key === OperateType.delete) {\n        // 删除组件以及删除连线\n        // 判断改节点是否在多选区域内\n        if (selectedNodes && selectedNodes.includes(currentNode.id)) {\n          deleteNodes(_.compact([...selectedNodes, currentNode.id]));\n        } else {\n          deleteNodes([currentNode.id]);\n        }\n      }\n    };\n\n    this.onContextMenuLink = (key, event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      this.props.setSelectedLinks([key]); // 清空高亮的组件\n\n      this.props.setSelectedNodes(null);\n      const currentPos = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      this.setState({\n        deleteVisible: true,\n        menuPos: currentPos\n      });\n    };\n\n    this.onResize = (node, width, height, x, y) => {\n      const {\n        updateNodes\n      } = this.props;\n      const newNode = { ...node,\n        width,\n        height,\n        x,\n        y\n      };\n      updateNodes(newNode);\n    };\n\n    this.renderCanvas = () => {\n      const {\n        currentHoverNode\n      } = this.state;\n      const {\n        nodes,\n        links,\n        selectedNodes,\n        selectedLinks,\n        groups\n      } = this.props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editor-view\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"editor-view-content\",\n        ref: this.nodesContainerRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 9\n        }\n      }, (nodes || []).map(child => {\n        const id = child === null || child === void 0 ? void 0 : child.id;\n        const isSelected = selectedNodes ? selectedNodes.includes(id) : false;\n        const showSelector = isSelected || currentHoverNode === id;\n        return /*#__PURE__*/React.createElement(EditorNode, {\n          nodeRef: child.ref,\n          currentNode: child,\n          key: id,\n          onClick: this.onClickNode,\n          isSelected: isSelected,\n          showSelector: showSelector,\n          onResize: this.onResize.bind(this, child),\n          currTrans: this.props.currTrans,\n          onSelect: this.onSelectNode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 965,\n            columnNumber: 15\n          }\n        });\n      }), (groups || []).map(child => {\n        const id = child === null || child === void 0 ? void 0 : child.id;\n        const nodesInGroup = child === null || child === void 0 ? void 0 : child.nodes;\n        return /*#__PURE__*/React.createElement(EditorGroup, {\n          key: id,\n          id: id,\n          groupRef: child === null || child === void 0 ? void 0 : child.ref,\n          currentGroup: child,\n          nodes: nodesInGroup,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 15\n          }\n        });\n      }), /*#__PURE__*/React.createElement(EditorEdges, {\n        links: links,\n        nodes: nodes,\n        selectedLinks: selectedLinks,\n        onContextMenu: this.onContextMenuLink,\n        onSelectLink: this.onSelectLink,\n        isDraggingLink: this.state.isDraggingLink,\n        dragLink: this.state.dragLink,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.state = {\n      isDraggingNode: false,\n      isDraggingLink: false,\n      isDraggingGroup: false,\n      dragNode: undefined,\n      dragLink: undefined,\n      dragGroup: undefined,\n      dragNodeOffset: null,\n      dragGroupOffset: null,\n      menuDisplay: false,\n      menuPos: {\n        id: \"\",\n        x: 0,\n        y: 0\n      },\n      screenScale: 100,\n      sourcePos: \"\",\n      currentHoverNode: \"\",\n      deleteVisible: false\n    };\n    this.nodesContainerRef = React.createRef();\n    this.container = React.createRef();\n  }\n\n  componentDidMount() {\n    this.nodesContainerRef.current.addEventListener(\"mousedown\", this.onNodesContainerMouseDown);\n    this.container.current.addEventListener(\"contextmenu\", this.openContainerMenu);\n    this.container.current.addEventListener(\"click\", this.onContainerMouseDown); // 初始化布局\n    // @ts-ignore\n\n    this.handleApplyTransform(zoomIdentity);\n  }\n\n  componentWillUnmount() {\n    this.nodesContainerRef.current.removeEventListener(\"mousedown\", this.onNodesContainerMouseDown);\n    this.container.current.removeEventListener(\"contextmenu\", this.openContainerMenu);\n    this.container.current.removeEventListener(\"click\", this.onContainerMouseDown);\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (this.state.isDraggingNode !== nextState.isDraggingNode) {\n      this.toggleDragNode(nextState.isDraggingNode);\n    }\n\n    if (this.state.isDraggingLink !== nextState.isDraggingLink) {\n      this.toggleDragLink(nextState.isDraggingLink);\n    }\n\n    if (this.state.isDraggingGroup !== nextState.isDraggingGroup) {\n      this.toggleDragGroup(nextState.isDraggingGroup);\n    }\n\n    if (nextProps.groups !== this.props.groups) {\n      this.forceUpdate();\n    }\n  }\n  /** 打开全局操作菜单，包括复制，粘贴，删除等 */\n\n\n  onDrag(event, name) {}\n\n  onDrop(event) {\n    const {\n      setNodes,\n      nodes,\n      dragNode\n    } = this.props;\n    const {\n      offsetTop,\n      offsetLeft\n    } = getOffset(this.container.current); // 计算滚动条的位置\n\n    const scrollLeft = document.documentElement.scrollLeft + document.querySelector(\"#root\").scrollLeft;\n    const scrollTop = document.documentElement.scrollTop + document.querySelector(\"#root\").scrollTop;\n    const screenX = event.clientX - offsetLeft + scrollLeft;\n    const screenY = event.clientY - offsetTop + scrollTop;\n    const {\n      k,\n      x,\n      y\n    } = this.props.currTrans;\n\n    if (dragNode) {\n      const {\n        key,\n        name,\n        type,\n        width,\n        height\n      } = dragNode;\n      const newNode = {\n        key,\n        name,\n        type,\n        width,\n        height,\n        x: (screenX - x) / k - NODE_WIDTH / 2,\n        y: (screenY - y) / k - NODE_HEIGHT / 2,\n        id: uuid.v4(),\n        ref: React.createRef()\n      };\n      setNodes([...nodes, newNode]);\n    }\n  }\n  /** 清空高亮组件和连线 */\n\n\n  render() {\n    const {\n      deleteVisible,\n      menuPos\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"canvas-container-content\",\n      ref: this.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReScreen, {\n      type: \"DOM\",\n      getScreenHandler: this.getScreenHandler,\n      needMinimap: true,\n      needRefresh: true,\n      zoomEnabled: false,\n      mapPosition: \"RT-IN\",\n      mapWidth: 200,\n      mapHeight: 300,\n      mapRectStyle: {\n        stroke: \"#468CFF\",\n        fill: \"transparent\",\n        strokeWidth: 1.5\n      },\n      focusEnabled: 2,\n      onScreenChange: this.getTransformInfo,\n      onDragOver: event => {\n        event.preventDefault();\n      },\n      onDrop: this.onDrop.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 9\n      }\n    }, this.renderCanvas()), /*#__PURE__*/React.createElement(ContextMenu, {\n      visible: deleteVisible // onHide={() => {\n      //   this.props.setLinks(null);\n      //   this.setState({\n      //     deleteVisible: false\n      //   });\n      // }}\n      ,\n      left: menuPos.x,\n      top: menuPos.y // onClick={this.handleDeleteLinks.bind(this, selectedLinks)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Menu, {\n      getPopupContainer: triggerNode => triggerNode.parentNode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 11\n      }\n    }, [{\n      name: \"删除\",\n      key: OperateType.delete\n    }].map(child => {\n      return /*#__PURE__*/React.createElement(Menu.Item, {\n        key: child.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 22\n        }\n      }, child.name);\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/CanvasContent.tsx"],"names":["React","_","uuid","ReScreen","BaseLayout","zoomIdentity","Menu","EditorNode","EditorGroup","EditorEdges","ContextMenu","CONNECTOR","OperateType","NODE_WIDTH","NODE_HEIGHT","LINK_AREA","findNearbyNode","calcLinkPosition","checkNodeIsOverGroup","exitFullscreen","launchFullscreen","isFull","getOffset","CanvasContentProps","ref","nodes","links","groups","setNodes","setLinks","setGroups","selectedLinks","setSelectedLinks","selectedNodes","setSelectedNodes","dragNode","updateNodes","updateLinks","updateGroups","deleteNodes","copiedNodes","setCopiedNodes","currTrans","setCurrTrans","isKeyPressing","CanvasContentState","isDraggingNode","isDraggingLink","isDraggingGroup","dragGroup","dragNodeOffset","dragGroupOffset","dragLink","sourcePos","menuDisplay","menuPos","screenScale","currentHoverNode","deleteVisible","CanvasContent","Component","constructor","props","nodesContainerRef","container","screenWidth","screenHeight","handleApplyTransform","handleResize","handleAdapt","handleResizeTo","openContainerMenu","event","preventDefault","toggleDragGroup","window","addEventListener","onDragGroupMouseMove","onDragGroupMouseUp","removeEventListener","toggleDragNode","onDragNodeMouseMove","onDragNodeMouseUp","toggleDragLink","onDragLinkMouseMove","onDragLinkMouseUp","stopPropagation","offsetTop","offsetLeft","current","scrollLeft","document","documentElement","querySelector","scrollTop","screenX","clientX","screenY","clientY","k","x","y","setState","preState","onNodesContainerMouseDown","length","currentNode","find","c","contains","target","type","dataset","position","onDragLinkMouseDown","onDragNodeMouseDown","currentGroup","onDragGroupMouseDown","onContainerMouseDown","path","isNodeOrLink","hasNodeOrLink","handleClearActive","onNodesContainerMouseMove","id","node","originId","originX","originY","state","nearNode","targetNode","targetPos","newLink","source","handleNodeIsOverGroup","console","log","groupId","newNodes","filter","map","newX","newY","forEach","group","diffX","diffY","newGroups","getTransformInfo","getScreenHandler","handleMap","array","link","i","inNode","includes","classList","inLink","changeScreenScale","handleFullScreen","fullScreen","handleShowAll","minX","minBy","maxX","maxBy","width","minY","maxY","height","componentWidth","componentHeight","transform","translate","scale","Math","min","P0","P1","invert","newTransform","layout","screen","datas","component","nodeWidth","nodeHeight","downRelations","sourceId","targetId","upRelations","maxWidth","item","maxHeight","dag","DAG","isTransverse","padding","margin","left","right","top","bottom","defaultNodeWidth","defaultNodeHeight","getMultiDAG","layoutNodes","n","view","onSelectLink","key","index","findIndex","slice","onClickNode","compact","onSelectNode","delete","onContextMenuLink","currentPos","onResize","newNode","renderCanvas","child","isSelected","showSelector","bind","nodesInGroup","undefined","createRef","componentDidMount","componentWillUnmount","componentWillUpdate","nextProps","nextState","forceUpdate","onDrag","name","onDrop","v4","render","stroke","fill","strokeWidth","triggerNode","parentNode"],"mappings":"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","sourcesContent":["/**\n * @file 处理画布内的操作\n */\n\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { ReScreen, BaseLayout } from \"regraph-next\";\nimport { ZoomTransform, zoomIdentity } from \"d3-zoom\";\nimport { Menu } from \"antd\";\nimport { EditorNode } from \"./EditorNode\";\nimport { EditorGroup } from \"./EditorGroup\";\nimport { EditorEdges } from \"./EditorEdges\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport {\n  MenuPos,\n  CONNECTOR,\n  OperateType,\n  Link,\n  Node,\n  Group,\n  NODE_WIDTH,\n  NODE_HEIGHT,\n  LINK_AREA\n} from \"./defines\";\nimport {\n  findUpstreamNode,\n  findAllUpstreamNodes,\n  findDownstreamNode,\n  findAllDownstreamNodes,\n  findAllDownstreamLinks,\n  findNearbyNode\n} from \"./utils/find\";\nimport { calcLinkPosition } from \"./utils/calc\";\nimport { pointInPoly, checkNodeIsOverGroup } from \"./utils/layout\";\nimport { exitFullscreen, launchFullscreen, isFull, getOffset } from \"../utils\";\n\nclass CanvasContentProps {\n  ref: any;\n  nodes: Node[] | undefined;\n  links: Link[] | undefined;\n  groups: Group[] | undefined;\n  setNodes: ((nodes: Node[]) => void) | undefined;\n  setLinks: ((links: Link[]) => void) | undefined;\n  setGroups?: (groups: Group[]) => void;\n  selectedLinks: string[] | undefined;\n  setSelectedLinks: ((links: string[]) => void) | undefined;\n  selectedNodes: string[] | undefined;\n  setSelectedNodes: ((links: string[]) => void) | undefined;\n  /** 当前拖拽的节点 */\n  dragNode: Node | undefined;\n  updateNodes: ((node: Node) => void) | undefined;\n  updateLinks: ((link: Link) => void) | undefined;\n  updateGroups?: (nodes: Node[], deleteGroupId?: string) => void;\n  deleteNodes: ((selectedNodes: string[]) => void) | undefined;\n  copiedNodes: Node[] | undefined;\n  setCopiedNodes: ((nodes: Node[]) => void) | undefined;\n  currTrans: ZoomTransform | undefined;\n  setCurrTrans: ((transform: ZoomTransform) => void) | undefined;\n  /** 是否被按住 */\n  isKeyPressing: boolean | undefined;\n}\n\nclass CanvasContentState {\n  /** 拖拽节点 */\n  isDraggingNode: boolean | any;\n  /** 拖拽边 */\n  isDraggingLink: boolean | any;\n  /** 拖拽组 */\n  isDraggingGroup: boolean | any;\n  /** 拖拽组 */\n  dragGroup: Group | undefined;\n  /** 拖拽节点 */\n  dragNode: Node | undefined;\n  /** 鼠标位置在拖动节点的偏移量 */\n  dragNodeOffset: any;\n  /** 鼠标位置在拖动组的偏移量 */\n  dragGroupOffset: any;\n  /** 移动边 */\n  dragLink: {\n    /** 源起节点id */\n    originId: string;\n    /** 源起节点 */\n    originX: number;\n    originY: number;\n    /** 鼠标移动节点 */\n    x: number;\n    y: number;\n  } | undefined;\n  sourcePos: string | undefined;\n  /** 对话框展示标志位 */\n  menuDisplay: boolean | undefined;\n  /** 对话框的位置信息 */\n  menuPos: MenuPos | undefined;\n  /** 画布的放大倍率 */\n  screenScale: number | undefined;\n  /** 当前鼠标悬浮的节点 */\n  currentHoverNode: string | undefined;\n  /** 删除框 */\n  deleteVisible: boolean | undefined;\n}\n\nexport default class CanvasContent extends React.Component<\n  CanvasContentProps,\n  CanvasContentState\n> {\n  nodesContainerRef: any;\n  container: any;\n  screenWidth: number | undefined;\n  screenHeight: number | undefined;\n\n  handleApplyTransform: ((transform: ZoomTransform) => void) | undefined;\n  handleResize: ((isLarge: boolean) => void) | undefined;\n  handleAdapt: (() => void) | undefined;\n  handleResizeTo: ((scale: number, P0?: [number, number]) => void) | undefined;\n\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      isDraggingNode: false,\n      isDraggingLink: false,\n      isDraggingGroup: false,\n      dragNode: undefined,\n      dragLink: undefined,\n      dragGroup: undefined,\n      dragNodeOffset: null,\n      dragGroupOffset: null,\n      menuDisplay: false,\n      menuPos: {\n        id: \"\",\n        x: 0,\n        y: 0\n      },\n      screenScale: 100,\n      sourcePos: \"\",\n      currentHoverNode: \"\",\n      deleteVisible: false\n    };\n    this.nodesContainerRef = React.createRef();\n    this.container = React.createRef();\n  }\n\n  componentDidMount() {\n    this.nodesContainerRef.current.addEventListener(\n      \"mousedown\",\n      this.onNodesContainerMouseDown\n    );\n    this.container.current.addEventListener(\n      \"contextmenu\",\n      this.openContainerMenu\n    );\n    this.container.current.addEventListener(\"click\", this.onContainerMouseDown);\n\n    // 初始化布局\n    // @ts-ignore\n    this.handleApplyTransform(zoomIdentity);\n  }\n\n  componentWillUnmount() {\n    this.nodesContainerRef.current.removeEventListener(\n      \"mousedown\",\n      this.onNodesContainerMouseDown\n    );\n    this.container.current.removeEventListener(\n      \"contextmenu\",\n      this.openContainerMenu\n    );\n    this.container.current.removeEventListener(\n      \"click\",\n      this.onContainerMouseDown\n    );\n  }\n\n  componentWillUpdate(\n    nextProps: CanvasContentProps,\n    nextState: CanvasContentState\n  ) {\n    if (this.state.isDraggingNode !== nextState.isDraggingNode) {\n      this.toggleDragNode(nextState.isDraggingNode);\n    }\n    if (this.state.isDraggingLink !== nextState.isDraggingLink) {\n      this.toggleDragLink(nextState.isDraggingLink);\n    }\n    if (this.state.isDraggingGroup !== nextState.isDraggingGroup) {\n      this.toggleDragGroup(nextState.isDraggingGroup);\n    }\n    if (nextProps.groups !== this.props.groups) {\n      this.forceUpdate();\n    }\n  }\n\n  /** 打开全局操作菜单，包括复制，粘贴，删除等 */\n  openContainerMenu = (event: any) => {\n    event.preventDefault();\n  };\n\n  toggleDragGroup = (isDraggingGroup: Boolean) => {\n    if (isDraggingGroup) {\n      window.addEventListener(\"mousemove\", this.onDragGroupMouseMove);\n      window.addEventListener(\"mouseup\", this.onDragGroupMouseUp);\n    } else {\n      window.removeEventListener(\"mousemove\", this.onDragGroupMouseMove);\n      window.removeEventListener(\"mouseup\", this.onDragGroupMouseUp);\n    }\n  };\n\n  toggleDragNode = (isDraggingNode: Boolean) => {\n    if (isDraggingNode) {\n      window.addEventListener(\"mousemove\", this.onDragNodeMouseMove);\n      window.addEventListener(\"mouseup\", this.onDragNodeMouseUp);\n    } else {\n      window.removeEventListener(\"mousemove\", this.onDragNodeMouseMove);\n      window.removeEventListener(\"mouseup\", this.onDragNodeMouseUp);\n    }\n  };\n\n  toggleDragLink = (isDraggingLink: Boolean) => {\n    if (isDraggingLink) {\n      window.addEventListener(\"mousemove\", this.onDragLinkMouseMove);\n      window.addEventListener(\"mouseup\", this.onDragLinkMouseUp);\n    } else {\n      window.removeEventListener(\"mousemove\", this.onDragLinkMouseMove);\n      window.removeEventListener(\"mouseup\", this.onDragLinkMouseUp);\n    }\n  };\n\n  onDragLinkMouseMove = (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    // 计算滚动条的位置\n    // @ts-ignore\n    const scrollLeft =\n      document.documentElement.scrollLeft +\n      document.querySelector(\"#root\").scrollLeft;\n    // @ts-ignore\n    const scrollTop =\n      document.documentElement.scrollTop +\n      document.querySelector(\"#root\").scrollTop;\n\n    const screenX = event.clientX - offsetLeft + scrollLeft;\n    const screenY = event.clientY - offsetTop + scrollTop;\n\n    const { k, x, y } = this.props.currTrans;\n\n    this.setState(preState => {\n      const { dragLink } = preState;\n      return {\n        dragLink: {\n          ...dragLink,\n          x: (screenX - x) / k,\n          y: (screenY - y) / k\n        }\n      };\n    });\n  };\n\n  /** 监听整个区域，提升性能 */\n  onNodesContainerMouseDown = (event: any) => {\n    event.stopPropagation();\n    const { nodes, groups } = this.props;\n    if (nodes && nodes.length > 0) {\n      const currentNode = _.find(nodes, c => {\n        if (c.ref && c.ref.current) {\n          return c.ref.current.contains(event.target);\n        }\n        return false;\n      });\n\n      const type = event.target.dataset && event.target.dataset.type;\n      const position = event.target.dataset && event.target.dataset.position;\n\n      if (currentNode) {\n        if (type === \"edge\" && position) {\n          /** 拖拽连线 */\n          this.onDragLinkMouseDown(currentNode as any, position);\n          return;\n        } else if (type === \"resize\") {\n          return;\n        } else {\n          /** 拖拽节点，排除resize节点 */\n          this.onDragNodeMouseDown(currentNode as any, event);\n        }\n      }\n    }\n\n    if (groups && groups.length > 0) {\n      const currentGroup = _.find(groups, c => {\n        if (c.ref && c.ref.current) {\n          return c.ref.current.contains(event.target);\n        }\n        return false;\n      });\n      this.onDragGroupMouseDown(currentGroup as any, event);\n    }\n  };\n\n  /** 监听整个容器click事件 */\n  onContainerMouseDown = (event: any) => {\n    // event.stopPropagation();\n\n    // 过滤掉节点和边\n    const path = event.path;\n    const isNodeOrLink = this.hasNodeOrLink(path, \"editor-node\", \"editor-link\");\n    if (!isNodeOrLink) {\n      // 清空高亮的节点和边\n      this.handleClearActive();\n    }\n  };\n\n  /** 监听整个容器mousemove 事件 */\n  onNodesContainerMouseMove = (event: any) => {\n    event.preventDefault();\n    const path = event.path;\n    const isNodeOrLink = this.hasNodeOrLink(path, \"editor-node\", \"editor-link\");\n    const { nodes } = this.props;\n\n    if (nodes && nodes.length > 0) {\n      const currentNode = _.find(nodes, c => {\n        if (c.ref && c.ref.current) {\n          return c.ref.current.contains(event.target);\n        }\n        return false;\n      }) as Node;\n\n      if (currentNode) {\n        if (isNodeOrLink) {\n          this.setState({\n            currentHoverNode: currentNode.id\n          });\n        } else {\n          this.setState({\n            currentHoverNode: \"\"\n          });\n        }\n      }\n    }\n  };\n\n  /** 鼠标按下，进行连线 */\n  onDragLinkMouseDown = (node: Node, position: string) => {\n    const { x, y } = calcLinkPosition(node, position);\n    this.setState({\n      isDraggingLink: true,\n      dragLink: {\n        originId: node.id,\n        originX: x,\n        originY: y,\n        x,\n        y\n      },\n      sourcePos: position\n    });\n  };\n\n  /** 鼠标抬起，连线结束 */\n  onDragLinkMouseUp = (event: any) => {\n    const { setLinks, links, nodes } = this.props;\n    const { dragLink } = this.state;\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n\n    // 计算滚动条的位置\n    const scrollLeft =\n      document.documentElement.scrollLeft +\n      document.querySelector(\"#root\").scrollLeft;\n    const scrollTop =\n      document.documentElement.scrollTop +\n      document.querySelector(\"#root\").scrollTop;\n\n    const screenX = event.clientX - offsetLeft + scrollLeft;\n    const screenY = event.clientY - offsetTop + scrollTop;\n\n    const { k, x, y } = this.props.currTrans;\n\n    const nearNode = findNearbyNode(\n      {\n        x: (screenX - x) / k,\n        y: (screenY - y) / k\n      },\n      nodes,\n      LINK_AREA\n    );\n\n    // 需要找到链接的是哪个节点\n\n    if (nearNode) {\n      const { targetNode, targetPos } = nearNode;\n      const newLink = {\n        id:\n          dragLink.originId + CONNECTOR + targetNode.id + CONNECTOR + targetPos,\n        source: dragLink.originId,\n        target: targetNode.id,\n        sourcePos: this.state.sourcePos,\n        targetPos\n      };\n      setLinks([...links, newLink]);\n    }\n\n    this.setState({\n      isDraggingLink: false,\n      dragLink: null,\n      sourcePos: \"\"\n    });\n  };\n\n  /** 处理节点与组的关系 */\n  handleNodeIsOverGroup = (currentGroup: Group, dragNode: Node) => {\n    const { updateNodes, updateGroups } = this.props;\n\n    if (checkNodeIsOverGroup(dragNode, currentGroup, \"leave\") === \"out\") {\n      // 该节点是否在组外\n      console.log(\"leave out\", dragNode);\n      updateNodes({ ...dragNode, groupId: \"\" });\n      const newNodes = currentGroup.nodes.filter(\n        node => node.id !== dragNode.id\n      );\n      // 更新组，重新计算组的宽度\n      updateGroups(newNodes, dragNode.groupId);\n    } else {\n      console.log(\"leave in\");\n      // 改变组的大小\n      const newNodes = currentGroup.nodes.map(node =>\n        node.id === dragNode.id ? dragNode : node\n      );\n      updateGroups(newNodes);\n    }\n  };\n\n  /** 按下节点 */\n  onDragNodeMouseDown = (node: Node, event: any) => {\n    if (node) {\n      const { k, x, y } = this.props.currTrans;\n\n      const { offsetTop, offsetLeft } = getOffset(this.container.current);\n      const screenX = event.clientX - offsetLeft;\n      const screenY = event.clientY - offsetTop;\n      this.setState(preState => {\n        // 计算鼠标位置在节点中的偏移量\n        return {\n          isDraggingNode: true,\n          dragNode: node,\n          dragNodeOffset: {\n            x: (screenX - x) / k - node.x,\n            y: (screenY - y) / k - node.y\n          }\n        };\n      });\n    }\n  };\n\n  /** 移动节点 */\n  onDragNodeMouseMove = (event: any) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const { setNodes, nodes, groups } = this.props;\n\n    const { k, x, y } = this.props.currTrans;\n\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n\n    // 判断当前节点平移后是否溢出画布\n    // const isOver = this.checkNodeIsOverScreen(dragNode, screenX, screenY);\n\n    // if (!isOver) {\n    this.setState(preState => {\n      const { dragNode, dragNodeOffset } = preState;\n\n      const newX = (screenX - x) / k - dragNodeOffset.x;\n      const newY = (screenY - y) / k - dragNodeOffset.y;\n\n      return {\n        ...preState,\n        dragNode: {\n          ...dragNode,\n          x: newX,\n          y: newY\n        }\n      };\n    });\n\n    const { dragNodeOffset, dragNode } = this.state;\n\n    setNodes(\n      nodes.map(c => {\n        return c.id === dragNode.id\n          ? {\n              ...c,\n              x: (screenX - x) / k - dragNodeOffset.x,\n              y: (screenY - y) / k - dragNodeOffset.y\n            }\n          : c;\n      })\n    );\n  };\n\n  /** 放开节点 */\n  onDragNodeMouseUp = (event: any) => {\n    event.stopPropagation();\n    const { groups, updateNodes, updateGroups } = this.props;\n\n    const { dragNode } = this.state;\n    // 通过是否有groupId来区分是从组中脱离还是拖入组中\n    if (groups) {\n      groups.forEach(group => {\n        const { nodes } = group;\n\n        // 判断根据拖拽的节点有无groupId来属于enter还是leave\n        const groupId = dragNode?.groupId;\n        if (groupId) {\n          // 拖出\n          this.handleNodeIsOverGroup(group, dragNode);\n        } else {\n          // 考虑是否在组内\n          if (checkNodeIsOverGroup(dragNode, group, \"enter\") === \"in\") {\n            const newNodes = [...nodes, dragNode];\n            // 更新组，重新计算组的宽度\n            updateGroups(newNodes);\n          } else {\n            updateGroups(nodes);\n          }\n        }\n      });\n    }\n\n    this.setState({\n      isDraggingNode: false\n    });\n  };\n\n  /** 按下组 */\n  onDragGroupMouseDown = (group: Group, event: any) => {\n    if (group) {\n      const { k, x, y } = this.props.currTrans;\n\n      const { offsetTop, offsetLeft } = getOffset(this.container.current);\n      const screenX = event.clientX - offsetLeft;\n      const screenY = event.clientY - offsetTop;\n      this.setState(preState => {\n        // 计算鼠标位置在节点中的偏移量\n        return {\n          isDraggingGroup: true,\n          dragGroup: group,\n          dragGroupOffset: {\n            x: (screenX - x) / k - group.x,\n            y: (screenY - y) / k - group.y\n          }\n        };\n      });\n    }\n  };\n\n  /** 移动组 */\n  onDragGroupMouseMove = (event: any) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const { setGroups, groups, nodes, setNodes } = this.props;\n\n    const { k, x, y } = this.props.currTrans;\n\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    const screenX = event.clientX - offsetLeft;\n    const screenY = event.clientY - offsetTop;\n    let diffX = 0;\n    let diffY = 0;\n\n    this.setState(preState => {\n      const { dragGroup, dragGroupOffset } = preState;\n\n      const newX = (screenX - x) / k - dragGroupOffset.x;\n      const newY = (screenY - y) / k - dragGroupOffset.y;\n\n      diffX = dragGroup.x - newX;\n      diffY = dragGroup.y - newY;\n\n      return {\n        ...preState,\n        dragGroup: {\n          ...dragGroup,\n          x: newX,\n          y: newY\n        }\n      };\n    });\n\n    const { dragGroupOffset, dragGroup } = this.state;\n\n    const newGroups = groups.map(c => {\n      if (c.id === dragGroup.id) {\n        const nodes = c.nodes;\n        return {\n          ...c,\n          x: (screenX - x) / k - dragGroupOffset.x,\n          y: (screenY - y) / k - dragGroupOffset.y,\n          // 更新节点\n          nodes: nodes.map(node => {\n            return {\n              ...node,\n              x: node.x - diffX,\n              y: node.y - diffY\n            };\n          })\n        };\n      } else {\n        return c;\n      }\n    });\n    // 同时更新nodes\n\n    const newNodes = nodes.map(node => {\n      if (node.groupId === dragGroup.id) {\n        return {\n          ...node,\n          x: node.x - diffX,\n          y: node.y - diffY\n        };\n      } else {\n        return node;\n      }\n    });\n    setNodes(newNodes);\n    setGroups(newGroups);\n  };\n\n  /** 放开组 */\n  onDragGroupMouseUp = (event: any) => {\n    event.stopPropagation();\n    const { groups, updateNodes, updateGroups } = this.props;\n\n    const { dragGroup } = this.state;\n\n    this.setState({\n      isDraggingGroup: false,\n      dragGroup: null,\n      dragGroupOffset: null\n    });\n  };\n\n  getTransformInfo = (currTrans: ZoomTransform) => {\n    this.props.setCurrTrans(currTrans);\n  };\n\n  getScreenHandler = handleMap => {\n    this.handleApplyTransform = handleMap.handleApplyTransform;\n    this.handleResize = handleMap.handleResize;\n    this.handleResizeTo = handleMap.handleResizeTo;\n    this.handleAdapt = handleMap.handleAdapt;\n    this.screenWidth = handleMap.screenWidth;\n    this.screenHeight = handleMap.screenHeight;\n  };\n\n  onDrag(event, name: string) {}\n\n  onDrop(event: React.DragEvent<HTMLDivElement>) {\n    const { setNodes, nodes, dragNode } = this.props;\n    const { offsetTop, offsetLeft } = getOffset(this.container.current);\n    // 计算滚动条的位置\n    const scrollLeft =\n      document.documentElement.scrollLeft +\n      document.querySelector(\"#root\").scrollLeft;\n    const scrollTop =\n      document.documentElement.scrollTop +\n      document.querySelector(\"#root\").scrollTop;\n\n    const screenX = event.clientX - offsetLeft + scrollLeft;\n    const screenY = event.clientY - offsetTop + scrollTop;\n\n    const { k, x, y } = this.props.currTrans;\n\n    if (dragNode) {\n      const { key, name, type, width, height } = dragNode;\n\n      const newNode = {\n        key,\n        name,\n        type,\n        width,\n        height,\n        x: (screenX - x) / k - NODE_WIDTH / 2,\n        y: (screenY - y) / k - NODE_HEIGHT / 2,\n        id: uuid.v4(),\n        ref: React.createRef()\n      };\n\n      setNodes([...nodes, newNode]);\n    }\n  }\n\n  /** 清空高亮组件和连线 */\n  handleClearActive = () => {\n    this.props.setSelectedLinks([]);\n    this.props.setSelectedNodes([]);\n  };\n\n  /** 判断点击的节点是否为节点和边 */\n  hasNodeOrLink = (array: any[], node?: string, link?: string) => {\n    let isNodeOrLink = false;\n\n    for (let i = 0; i < array.length; i++) {\n      const inNode = _.includes(array[i].classList, node);\n      const inLink = _.includes(array[i].classList, link);\n\n      if (inNode || inLink) {\n        isNodeOrLink = true;\n        break;\n      }\n    }\n    return isNodeOrLink;\n  };\n\n  /** 改变缩放倍率 */\n  changeScreenScale = (screenScale: number) => {\n    this.setState({\n      screenScale\n    });\n  };\n\n  /** 处理全屏事件 */\n  handleFullScreen = () => {\n    const fullScreen = isFull();\n    if (fullScreen) {\n      exitFullscreen();\n    } else {\n      launchFullscreen(this.container.current);\n    }\n  };\n\n  /** 适应画布 */\n  handleShowAll = () => {\n    const { nodes } = this.props;\n\n    if (nodes && nodes.length === 0) {\n      return;\n    }\n\n    // 组件实际范围\n    const minX = _.minBy(nodes, c => c.x).x;\n    const maxX = _.maxBy(nodes, c => c.x)?.x + _.maxBy(nodes, c => c.x)?.width;\n    const minY = _.minBy(nodes, c => c.y).y;\n    const maxY = _.maxBy(nodes, c => c.y)?.y + _.maxBy(nodes, c => c.y)?.height;\n\n    const componentWidth = maxX - minX;\n    const componentHeight = maxY - minY;\n\n    // 先在不缩放的场景下，平移到画布中点\n    const x = this.screenWidth / 2 - (minX + maxX) / 2;\n    const y = this.screenHeight / 2 - (minY + maxY) / 2;\n    const transform = zoomIdentity.translate(x, y).scale(1);\n    // 适应画布最大100%，保证在节点少的情况下不发生放大\n    const scale = Math.min(\n      this.screenWidth / componentWidth,\n      this.screenHeight / componentHeight,\n      1\n    );\n    // Todo 待收敛到 ReScreen\n    const P0 = [this.screenWidth / 2, this.screenHeight / 2] as [\n      number,\n      number\n    ];\n    const P1 = transform.invert(P0);\n    const newTransform = zoomIdentity\n      .translate(P0[0] - P1[0] * scale, P0[1] - P1[1] * scale)\n      .scale(scale);\n    this.handleApplyTransform(newTransform);\n  };\n\n  /** 格式化画布 */\n  layout = () => {\n    const { nodes, links, setNodes } = this.props;\n    if (nodes && nodes.length === 0) {\n      return {\n        nodes,\n        screen: {\n          k: 1,\n          x: 0,\n          y: 0\n        }\n      };\n    }\n\n    const datas = nodes.map(component => {\n      // 兼容 BaseLayout 数据结构\n      (component as any).nodeWidth = component.width;\n      (component as any).nodeHeight = component.height;\n      const downRelations = links\n        .filter(link => {\n          return link.target === component.id;\n        })\n        .map(link => {\n          return {\n            sourceId: link.source,\n            targetId: link.target\n          };\n        });\n      const upRelations = links\n        .filter(link => {\n          return link.source === component.id;\n        })\n        .map(link => {\n          return {\n            sourceId: link.source,\n            targetId: link.target\n          };\n        });\n      return {\n        id: component.id,\n        downRelations,\n        upRelations\n      };\n    });\n\n    const maxWidth = _.maxBy(nodes, item => item.width)?.width;\n    const maxHeight = _.maxBy(nodes, item => item.height)?.height;\n\n    const dag = new BaseLayout.DAG({\n      isTransverse: true,\n      padding: 20,\n      margin: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      },\n      defaultNodeWidth: maxWidth,\n      defaultNodeHeight: maxHeight\n    });\n\n    const { nodes: newNodes } = dag.getMultiDAG(datas);\n\n    const layoutNodes = nodes.map(component => {\n      const node = _.find(newNodes, n => n.id === component.id);\n\n      return {\n        ...component,\n        x: node.view.x,\n        y: node.view.y\n      };\n    });\n    setNodes(layoutNodes);\n  };\n\n  /** 点击连线 */\n  onSelectLink = (key: string) => {\n    const { selectedLinks, setSelectedLinks } = this.props;\n    if (selectedLinks) {\n      // 若连线已高线，则取消高亮状态\n      const index = _.findIndex(selectedLinks, link => link === key);\n      if (index > -1) {\n        setSelectedLinks([\n          ...selectedLinks.slice(0, index),\n          ...selectedLinks.slice(index + 1)\n        ]);\n      } else {\n        setSelectedLinks([...selectedLinks, key]);\n      }\n    } else {\n      setSelectedLinks([key]);\n    }\n  };\n\n  /** 点击节点 */\n  onClickNode = (currentNode: Node) => {\n    const {\n      selectedNodes,\n      setSelectedNodes,\n      setSelectedLinks,\n      isKeyPressing\n    } = this.props;\n\n    // 区分多选按钮是否按下\n    if (isKeyPressing) {\n      if (selectedNodes) {\n        // 若节点已被点击则清除点击状态\n        const index = _.findIndex(selectedNodes, id => id === currentNode.id);\n\n        if (index > -1) {\n          setSelectedNodes([\n            ...selectedNodes.slice(0, index),\n            ...selectedNodes.slice(index + 1)\n          ]);\n        } else {\n          setSelectedNodes(_.compact([...selectedNodes, currentNode.id]));\n        }\n      } else {\n        setSelectedNodes([currentNode.id]);\n      }\n    } else {\n      setSelectedNodes([currentNode.id]);\n      // 清空高亮的连线\n      setSelectedLinks(null);\n    }\n  };\n\n  /** 被连线的节点 */\n  onSelectNode = (currentNode: Node, key: OperateType) => {\n    const { selectedNodes, deleteNodes } = this.props;\n    if (key === OperateType.delete) {\n      // 删除组件以及删除连线\n      // 判断改节点是否在多选区域内\n      if (selectedNodes && selectedNodes.includes(currentNode.id)) {\n        deleteNodes(_.compact([...selectedNodes, currentNode.id]));\n      } else {\n        deleteNodes([currentNode.id]);\n      }\n    }\n  };\n\n  /** 右键连线 */\n  onContextMenuLink = (\n    key: string,\n    event: React.MouseEvent<SVGPathElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.props.setSelectedLinks([key]);\n    // 清空高亮的组件\n    this.props.setSelectedNodes(null);\n\n    const currentPos = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    this.setState({\n      deleteVisible: true,\n      menuPos: currentPos\n    });\n  };\n\n  /** 伸缩节点 */\n  onResize = (\n    node: Node,\n    width: number,\n    height: number,\n    x: number,\n    y: number\n  ) => {\n    const { updateNodes } = this.props;\n    const newNode = {\n      ...node,\n      width,\n      height,\n      x,\n      y\n    };\n    updateNodes(newNode);\n  };\n\n  renderCanvas = () => {\n    const { currentHoverNode } = this.state;\n    const { nodes, links, selectedNodes, selectedLinks, groups } = this.props;\n    return (\n      <div className=\"editor-view\">\n        <div className=\"editor-view-content\" ref={this.nodesContainerRef}>\n          {(nodes || []).map(child => {\n            const id = child?.id;\n            const isSelected = selectedNodes\n              ? selectedNodes.includes(id)\n              : false;\n            const showSelector = isSelected || currentHoverNode === id;\n            return (\n              <EditorNode\n                nodeRef={child.ref}\n                currentNode={child}\n                key={id}\n                onClick={this.onClickNode}\n                isSelected={isSelected}\n                showSelector={showSelector}\n                onResize={this.onResize.bind(this, child)}\n                currTrans={this.props.currTrans}\n                onSelect={this.onSelectNode}\n              />\n            );\n          })}\n\n          {(groups || []).map(child => {\n            const id = child?.id;\n            const nodesInGroup = child?.nodes;\n            return (\n              <EditorGroup\n                key={id}\n                id={id}\n                groupRef={child?.ref}\n                currentGroup={child}\n                nodes={nodesInGroup}\n              />\n            );\n          })}\n\n          <EditorEdges\n            links={links}\n            nodes={nodes}\n            selectedLinks={selectedLinks}\n            onContextMenu={this.onContextMenuLink}\n            onSelectLink={this.onSelectLink}\n            isDraggingLink={this.state.isDraggingLink}\n            dragLink={this.state.dragLink}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { deleteVisible, menuPos } = this.state;\n    return (\n      <div className=\"canvas-container-content\" ref={this.container}>\n        <ReScreen\n          type=\"DOM\"\n          getScreenHandler={this.getScreenHandler}\n          needMinimap={true}\n          needRefresh={true}\n          zoomEnabled={false}\n          mapPosition=\"RT-IN\"\n          mapWidth={200}\n          mapHeight={300}\n          mapRectStyle={{\n            stroke: \"#468CFF\",\n            fill: \"transparent\",\n            strokeWidth: 1.5\n          }}\n          focusEnabled={2}\n          onScreenChange={this.getTransformInfo}\n          onDragOver={event => {\n            event.preventDefault();\n          }}\n          onDrop={this.onDrop.bind(this)}\n        >\n          {this.renderCanvas()}\n        </ReScreen>\n        {/** 删除连线的菜单 */}\n        <ContextMenu\n          visible={deleteVisible}\n          // onHide={() => {\n          //   this.props.setLinks(null);\n          //   this.setState({\n          //     deleteVisible: false\n          //   });\n          // }}\n          left={menuPos.x}\n          top={menuPos.y}\n          // onClick={this.handleDeleteLinks.bind(this, selectedLinks)}\n        >\n          <Menu\n            getPopupContainer={(triggerNode: any) => triggerNode.parentNode}\n          >\n            {[\n              {\n                name: \"删除\",\n                key: OperateType.delete\n              }\n            ].map(child => {\n              return <Menu.Item key={child.key}>{child.name}</Menu.Item>;\n            })}\n          </Menu>\n        </ContextMenu>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}