{"ast":null,"code":"/**\n * @file 统一工具方法，简版 lodash\n */\n\n/**\n * 简版 lodash.find \n * @param array 目标数组\n * @param func 查找函数\n */\nexport function find(array, func) {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i])) {\n      return array[i];\n    }\n  }\n\n  return undefined;\n}\n/**\n * 简版 lodash.findIndex\n * @param array 目标数组\n * @param func 查找函数\n */\n\nexport function findIndex(array, func) {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\nexport function minBy(array, fn) {\n  return array.reduce((pre, cur) => {\n    if (!pre) return cur;\n    if (fn(cur) < fn(pre)) return cur;\n    return pre;\n  }, undefined);\n}\nexport function maxBy(array, fn) {\n  return array.reduce((pre, cur) => {\n    if (!pre) return cur;\n    if (fn(cur) > fn(pre)) return cur;\n    return pre;\n  }, undefined);\n}\nexport function sumBy(array, fn) {\n  return array.reduce((pre, cur) => {\n    return pre + (fn(cur) || 0);\n  }, 0);\n}\nexport function reverseArray(array, func) {\n  const tmpArray = [];\n\n  for (let i = array.length - 1; i >= 0; i--) {\n    tmpArray.push(func(array[i], array.length - i - 1));\n  }\n\n  return tmpArray;\n}\nexport function getObjectMaxMin(obj) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n\n  for (let key in obj) {\n    const value = obj[key];\n    if (value > maxValue) maxValue = value;\n    if (value < minValue) minValue = value;\n  }\n\n  return {\n    maxValue,\n    minValue\n  };\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/regraph/Utils/utils.ts"],"names":["find","array","func","i","length","undefined","findIndex","minBy","fn","reduce","pre","cur","maxBy","sumBy","reverseArray","tmpArray","push","getObjectMaxMin","obj","minValue","Number","MAX_SAFE_INTEGER","maxValue","MIN_SAFE_INTEGER","key","value"],"mappings":"AAAA;;;;AAMA;;;;;AAKA,OAAO,SAASA,IAAT,CAAiBC,KAAjB,EAA6BC,IAA7B,EAAkE;AACvE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAID,IAAI,CAACD,KAAK,CAACE,CAAD,CAAN,CAAR,EAAoB;AAClB,aAAOF,KAAK,CAACE,CAAD,CAAZ;AACD;AACF;;AACD,SAAOE,SAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASC,SAAT,CAAsBL,KAAtB,EAAkCC,IAAlC,EAAgE;AACrE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAID,IAAI,CAACD,KAAK,CAACE,CAAD,CAAN,CAAR,EAAoB;AAClB,aAAOA,CAAP;AACD;AACF;;AACD,SAAO,CAAC,CAAR;AACD;AAED,OAAO,SAASI,KAAT,CAAqBN,KAArB,EAAiCO,EAAjC,EAA8D;AACnE,SAAOP,KAAK,CAACQ,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChC,QAAI,CAACD,GAAL,EAAU,OAAOC,GAAP;AACV,QAAIH,EAAE,CAACG,GAAD,CAAF,GAAUH,EAAE,CAACE,GAAD,CAAhB,EAAuB,OAAOC,GAAP;AACvB,WAAOD,GAAP;AACD,GAJM,EAIJL,SAJI,CAAP;AAKD;AAED,OAAO,SAASO,KAAT,CAAqBX,KAArB,EAAiCO,EAAjC,EAA8D;AACnE,SAAOP,KAAK,CAACQ,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChC,QAAI,CAACD,GAAL,EAAU,OAAOC,GAAP;AACV,QAAIH,EAAE,CAACG,GAAD,CAAF,GAAUH,EAAE,CAACE,GAAD,CAAhB,EAAuB,OAAOC,GAAP;AACvB,WAAOD,GAAP;AACD,GAJM,EAIJL,SAJI,CAAP;AAKD;AAED,OAAO,SAASQ,KAAT,CAAkBZ,KAAlB,EAA8BO,EAA9B,EAAyD;AAC9D,SAAOP,KAAK,CAACQ,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChC,WAAOD,GAAG,IAAIF,EAAE,CAACG,GAAD,CAAF,IAAW,CAAf,CAAV;AACD,GAFM,EAEJ,CAFI,CAAP;AAGD;AAED,OAAO,SAASG,YAAT,CAAyBb,KAAzB,EAAqCC,IAArC,EAA+E;AACpF,QAAMa,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIZ,CAAC,GAAGF,KAAK,CAACG,MAAN,GAAe,CAA5B,EAA+BD,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC1CY,IAAAA,QAAQ,CAACC,IAAT,CAAcd,IAAI,CAACD,KAAK,CAACE,CAAD,CAAN,EAAWF,KAAK,CAACG,MAAN,GAAeD,CAAf,GAAmB,CAA9B,CAAlB;AACD;;AACD,SAAOY,QAAP;AACD;AAED,OAAO,SAASE,eAAT,CAAyBC,GAAzB,EAAmC;AACxC,MAAIC,QAAQ,GAAGC,MAAM,CAACC,gBAAtB;AACA,MAAIC,QAAQ,GAAGF,MAAM,CAACG,gBAAtB;;AACA,OAAK,IAAIC,GAAT,IAAgBN,GAAhB,EAAqB;AACnB,UAAMO,KAAK,GAAGP,GAAG,CAACM,GAAD,CAAjB;AACA,QAAIC,KAAK,GAAGH,QAAZ,EAAsBA,QAAQ,GAAGG,KAAX;AACtB,QAAIA,KAAK,GAAGN,QAAZ,EAAsBA,QAAQ,GAAGM,KAAX;AACvB;;AACD,SAAO;AACLH,IAAAA,QADK;AAELH,IAAAA;AAFK,GAAP;AAID","sourcesContent":["/**\n * @file 统一工具方法，简版 lodash\n */\n\ntype fn<T, TResult> = (item: T) => TResult\n\n/**\n * 简版 lodash.find \n * @param array 目标数组\n * @param func 查找函数\n */\nexport function find<T>(array: T[], func: fn<T, boolean>): T | undefined {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i])) {\n      return array[i];\n    }\n  }\n  return undefined;\n}\n\n/**\n * 简版 lodash.findIndex\n * @param array 目标数组\n * @param func 查找函数\n */\nexport function findIndex<T>(array: T[], func: fn<T, boolean>): number {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function minBy<T, U>(array: T[], fn: fn<T, U>): T | undefined {\n  return array.reduce((pre, cur) => {\n    if (!pre) return cur;\n    if (fn(cur) < fn(pre)) return cur;\n    return pre;\n  }, undefined);\n}\n\nexport function maxBy<T, U>(array: T[], fn: fn<T, U>): T | undefined {\n  return array.reduce((pre, cur) => {\n    if (!pre) return cur;\n    if (fn(cur) > fn(pre)) return cur;\n    return pre;\n  }, undefined);\n}\n\nexport function sumBy<T>(array: T[], fn: fn<T, number>): number {\n  return array.reduce((pre, cur) => {\n    return pre + (fn(cur) || 0);\n  }, 0);\n}\n\nexport function reverseArray<T>(array: T[], func: (data: T, index: number) => T): T[] {\n  const tmpArray = [];\n  for (let i = array.length - 1; i >= 0; i--) {\n    tmpArray.push(func(array[i], array.length - i - 1));\n  }\n  return tmpArray;\n}\n\nexport function getObjectMaxMin(obj: any) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = Number.MIN_SAFE_INTEGER;\n  for (let key in obj) {\n    const value = obj[key];\n    if (value > maxValue) maxValue = value;\n    if (value < minValue) minValue = value;\n  }\n  return {\n    maxValue,\n    minValue,\n  }\n}"]},"metadata":{},"sourceType":"module"}