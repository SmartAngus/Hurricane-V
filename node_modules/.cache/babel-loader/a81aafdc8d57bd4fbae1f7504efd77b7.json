{"ast":null,"code":"var _jsxFileName = \"/Users/majy/work/bici/code/editor-demo/src/features/editor/index.tsx\";\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { message } from \"antd\";\nimport { Toolbar, NodePanel, DragSelector } from \"./components\";\nimport CanvasContent from \"./CanvasContent\";\nimport { useEditorStore, useKeyPress, useEventListener } from \"./hooks\";\nimport { pointInPoly } from \"./utils/layout\";\nimport { GROUP_PADDING } from \"./defines\";\nimport \"./index.scss\";\nconst {\n  useState,\n  useRef,\n  useEffect\n} = React;\nexport default function EditorDemo(props) {\n  const [screenScale, changeScreenScale] = useState(100);\n  const [dragSelectable, setDragSelectable] = useState(false);\n  const [keyPressing, setKeyPressing] = useState(false);\n  const {\n    nodes,\n    links,\n    setNodes,\n    setLinks,\n    selectedLinks,\n    setSelectedLinks,\n    dragNode,\n    setDragNode,\n    selectedNodes,\n    setSelectedNodes,\n    updateNodes,\n    updateLinks,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    handleSaveData,\n    groups,\n    setGroups,\n    updateGroups\n  } = useEditorStore(); // 画布容器\n\n  const screenRef = useRef(null); // 画布 ref\n\n  const canvasRef = useRef({\n    getWrappedInstance: () => Object\n  });\n  const canvasInstance = canvasRef.current;\n  /** 删除组件 */\n\n  const handleDeleteNodes = ids => {\n    if (!ids) {\n      return;\n    } // 删除与组件相连的连线，不论上游或下游\n\n\n    const newLinks = _.cloneDeep(links);\n\n    ids.forEach(id => {\n      // 删除与节点连接的任意边\n      _.remove(newLinks, link => link.source === id || link.target === id);\n    }); // 更新连线\n\n    setLinks(newLinks); // 剔除components\n\n    const cloneNodes = _.cloneDeep(nodes);\n\n    const newNodes = _.remove(cloneNodes, item => !ids.includes(item.id));\n\n    setNodes(newNodes); // 清空高亮状态\n\n    setSelectedLinks([]);\n    setSelectedNodes([]);\n  };\n  /** 删除连线 */\n\n\n  const handleDeleteLinks = activeLinks => {\n    if (!activeLinks) {\n      return;\n    }\n\n    const linkList = links.map(link => link.id);\n\n    const diffLinks = _.difference(linkList, activeLinks);\n\n    const newLinks = diffLinks ? diffLinks.map(link => _.find(links, item => item.id === link)) : [];\n    setLinks(newLinks);\n  };\n  /** 复制节点 */\n\n\n  const handleNodesCopy = ids => {\n    const newCopiedNodes = ids.map(id => {\n      return _.find(nodes, item => item.id === id);\n    });\n    setCopiedNodes(newCopiedNodes);\n  };\n  /** 粘贴节点 */\n\n\n  const handleNodesPaste = () => {\n    if (copiedNodes) {\n      const currentCopied = copiedNodes.map(node => {\n        return { ...node,\n          id: uuid.v4(),\n\n          /**  @todo 后续可优化布局算法 */\n          x: node.x + node.width + 20,\n          ref: React.createRef()\n        };\n      });\n      setCopiedNodes(currentCopied);\n      setNodes([...nodes, ...currentCopied]);\n    }\n  }; // 剪切\n\n\n  const handleShear = () => {\n    if (selectedNodes) {\n      handleNodesCopy(selectedNodes);\n      handleDeleteNodes(selectedNodes);\n    }\n  }; // 复制\n\n\n  const handleCopy = () => {\n    if (selectedNodes) {\n      handleNodesCopy(_.compact(selectedNodes));\n    }\n  }; // 粘贴\n\n\n  const handlePaste = () => {\n    if (copiedNodes) {\n      handleNodesPaste();\n    }\n  }; // 删除\n\n\n  const handleDelete = () => {\n    if (selectedNodes) {\n      handleDeleteNodes(selectedNodes); // 判断删除的节点是否在组内，删除组内的节点\n\n      const newGroups = groups.map(group => {\n        selectedNodes.forEach(id => {\n          var _group;\n\n          const index = _.findIndex((_group = group) === null || _group === void 0 ? void 0 : _group.nodes, node => node.id === id);\n\n          if (index > -1) {\n            group.nodes = [...group.nodes.slice(0, index), ...group.nodes.slice(index + 1)];\n            group = handleGroupInfo(group.nodes);\n          }\n        });\n        return group;\n      });\n      setGroups(_.compact(newGroups));\n    }\n\n    if (selectedLinks) {\n      handleDeleteLinks(selectedLinks);\n    }\n  }; // 圈选\n\n\n  const handleDragSelect = () => {\n    setDragSelectable(!dragSelectable);\n  };\n  /** 处理DragSelector 关闭事件 */\n\n\n  const onDragSelectorClose = selectorProps => {\n    // 计算区域内的位置有多少节点需要高亮,其实计算的是一个点是否在矩形内\n    // 1. 计算每个节点的中心\n    // 多边形的位置信息要与画布同步\n    const {\n      k,\n      x,\n      y\n    } = currTrans;\n    const points = nodes.map(node => {\n      return {\n        x: k * node.x + x + node.width / 2 * k,\n        y: k * node.y + y + node.height / 2 * k,\n        id: node.id\n      };\n    }); // 2. 多边形各个点转化为数组，暂时为矩形，后面考虑其他形状\n\n    let poly = [];\n\n    if (selectorProps.direction === \"left\") {\n      poly = [{\n        x: selectorProps.x,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x + selectorProps.width,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x + selectorProps.width,\n        y: selectorProps.y + selectorProps.height\n      }, {\n        x: selectorProps.x,\n        y: selectorProps.y + selectorProps.height\n      }];\n    } else {\n      poly = [{\n        x: selectorProps.x,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x - selectorProps.width,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x - selectorProps.width,\n        y: selectorProps.y - selectorProps.height\n      }, {\n        x: selectorProps.x,\n        y: selectorProps.y - selectorProps.height\n      }];\n    } // 3. 射线法判断点是否在多边形的内部\n\n\n    const ids = points.map(point => {\n      if (pointInPoly(point, poly) === \"in\") {\n        return point.id;\n      }\n    });\n    setSelectedNodes(_.compact(ids));\n    setDragSelectable(false);\n  };\n  /** 保存 */\n\n\n  const handleSave = async () => {\n    const data = await handleSaveData();\n\n    if (data) {\n      message.success(\"保存成功\");\n    } else {\n      message.error(\"保存失败\");\n    }\n  };\n  /** 计算选中节点的位置，形成大的group */\n\n\n  const handleGroupInfo = nodes => {\n    if (!nodes) {\n      return;\n    }\n\n    const minXNode = _.minBy(nodes, node => node.x);\n\n    const minYNode = _.minBy(nodes, node => node.y);\n\n    const maxXNode = _.maxBy(nodes, node => node.x + node.width);\n\n    const maxYNode = _.maxBy(nodes, node => node.y + node.height);\n\n    const x = (minXNode === null || minXNode === void 0 ? void 0 : minXNode.x) - GROUP_PADDING;\n    const y = (minYNode === null || minYNode === void 0 ? void 0 : minYNode.y) - GROUP_PADDING;\n    const minXId = minXNode === null || minXNode === void 0 ? void 0 : minXNode.id;\n    const maxYId = maxYNode === null || maxYNode === void 0 ? void 0 : maxYNode.id;\n    const width = (maxXNode === null || maxXNode === void 0 ? void 0 : maxXNode.x) + (maxXNode === null || maxXNode === void 0 ? void 0 : maxXNode.width) - x + GROUP_PADDING;\n    const height = (maxYNode === null || maxYNode === void 0 ? void 0 : maxYNode.y) + (maxYNode === null || maxYNode === void 0 ? void 0 : maxYNode.height) - y + GROUP_PADDING;\n\n    if (minXId && maxYId) {\n      return {\n        id: `group_${minXId}_${maxYId}`,\n        x,\n        y,\n        width,\n        height,\n        nodes: nodes.map(node => ({ ...node,\n          groupId: `group_${minXId}_${maxYId}`\n        })),\n        ref: React.createRef()\n      };\n    }\n  };\n  /** 更新组的数据 */\n\n\n  const updateGroupsInfo = (currentNodes, type = \"merge\", deleteGroupId) => {\n    const newGroup = handleGroupInfo(currentNodes);\n\n    if (newGroup) {\n      // 更新节点\n      const groupId = newGroup.id;\n      const groupNodes = newGroup.nodes.map(node => ({ ...node,\n        groupId\n      })); // 原来的groupId\n\n      const originGroupId = currentNodes[0].groupId; // 更新节点\n\n      const newNodes = nodes.map(node => {\n        const groupNode = _.find(groupNodes, item => item.id === node.id);\n\n        if (groupNode) {\n          return groupNode;\n        } else {\n          const {\n            groupId,\n            ...newNode\n          } = node;\n          return newNode;\n        }\n      });\n      setNodes(newNodes);\n      let newGroups = type === \"merge\" ? groups.filter(group => group.id !== originGroupId) : groups;\n\n      if (type === \"merge\" && newGroups && newGroups.length > 0) {\n        newGroups = newGroups.map(group => {\n          return group.id === newGroup.id ? newGroup : group;\n        });\n      } else {\n        newGroups.push(newGroup);\n      } // let newGroups = _.uniqBy(_.compact([...groups, newGroup]), \"id\");\n\n\n      if (deleteGroupId) {\n        newGroups = newGroups.filter(group => group.id !== deleteGroupId);\n      }\n\n      setGroups(newGroups);\n    } else {\n      if (deleteGroupId) {\n        const newGroups = groups.filter(group => group.id !== deleteGroupId);\n        setGroups(newGroups);\n      }\n    }\n  };\n  /** 成组 */\n\n\n  const handleGroup = () => {\n    const currentNodes = _.compact(nodes.map(node => {\n      if (selectedNodes.includes(node.id)) {\n        return node;\n      }\n    })); // 更新组\n\n\n    updateGroupsInfo(currentNodes, \"new\");\n    setSelectedNodes([]);\n  };\n\n  useKeyPress(\"delete\", () => {\n    handleDelete();\n  }, {\n    events: [\"keydown\", \"keyup\"]\n  });\n  const isMac = navigator.platform.startsWith(\"Mac\");\n  useKeyPress(isMac ? [\"meta.x\"] : [\"ctrl.x\"], () => {\n    handleShear();\n  });\n  useKeyPress(isMac ? [\"meta.c\"] : [\"ctrl.c\"], () => {\n    handleCopy();\n  });\n  useKeyPress(isMac ? [\"meta.v\"] : [\"ctrl.v\"], () => {\n    handlePaste();\n  });\n  useEventListener(\"keydown\", event => {\n    const SUPER_KEY_CODE = navigator.platform.startsWith(\"Mac\") ? event.metaKey : event.ctrlKey;\n\n    if (SUPER_KEY_CODE) {\n      setKeyPressing(true);\n    }\n  }, canvasInstance);\n  useEventListener(\"keyup\", event => {\n    setKeyPressing(false);\n  }, canvasInstance);\n  /** 操作区 */\n\n  const renderOperation = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    ref: screenRef,\n    screenScale: screenScale,\n    changeScreenScale: changeScreenScale,\n    handleResizeTo: canvasInstance && canvasInstance.handleResizeTo,\n    items: [\"save\", \"fullscreen\", \"zoom\", \"adapt\", \"format\", \"ratio\", \"shear\", \"copy\", \"paste\", \"delete\", \"dragSelect\", // \"layout\",\n    \"adapt\", \"group\"],\n    onCopy: handleCopy,\n    onPaste: handlePaste,\n    onDelete: handleDelete,\n    onShear: handleShear,\n    onDragSelect: handleDragSelect,\n    onSave: handleSave,\n    onLayout: canvasInstance && canvasInstance.layout,\n    onAdapt: canvasInstance && canvasInstance.handleShowAll,\n    onGroup: handleGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }\n  }));\n  /** 渲染节点选择区 */\n\n  const renderNodePanel = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-nodePanel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NodePanel, {\n    onDrag: setDragNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }\n  }));\n  /** 渲染中间画布区 */\n\n  const renderCanvas = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DragSelector, {\n    visible: dragSelectable,\n    getPopupContainer: () => document.querySelector(\".editor-canvas\"),\n    overlayColor: \"rgba(0,0,0,0.1)\",\n    selectorStyle: {\n      fill: \"transparent\",\n      strokeWidth: 1,\n      stroke: \"#6ca0f5\",\n      strokeDasharray: \"5 5\"\n    },\n    onClose: onDragSelectorClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CanvasContent, {\n    dragNode: dragNode,\n    ref: canvasRef,\n    nodes: nodes,\n    links: links,\n    groups: groups,\n    setNodes: setNodes,\n    setLinks: setLinks,\n    selectedLinks: selectedLinks,\n    setSelectedLinks: setSelectedLinks,\n    selectedNodes: selectedNodes,\n    setGroups: setGroups,\n    setSelectedNodes: setSelectedNodes,\n    updateNodes: updateNodes,\n    updateLinks: updateLinks,\n    deleteNodes: handleDeleteNodes,\n    deleteLinks: handleDeleteLinks,\n    copiedNodes: copiedNodes,\n    setCopiedNodes: setCopiedNodes,\n    currTrans: currTrans,\n    setCurrTrans: setCurrTrans,\n    isKeyPressing: keyPressing,\n    updateGroups: updateGroupsInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }\n  }));\n  /** 渲染配置区 */\n\n  const renderProperty = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-property\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 26\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-demo\",\n    ref: screenRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-operation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }\n  }, renderOperation), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }\n  }, renderNodePanel, renderCanvas, renderProperty));\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/index.tsx"],"names":["React","_","uuid","message","Toolbar","NodePanel","DragSelector","CanvasContent","useEditorStore","useKeyPress","useEventListener","pointInPoly","GROUP_PADDING","useState","useRef","useEffect","EditorDemo","props","screenScale","changeScreenScale","dragSelectable","setDragSelectable","keyPressing","setKeyPressing","nodes","links","setNodes","setLinks","selectedLinks","setSelectedLinks","dragNode","setDragNode","selectedNodes","setSelectedNodes","updateNodes","updateLinks","copiedNodes","setCopiedNodes","currTrans","setCurrTrans","handleSaveData","groups","setGroups","updateGroups","screenRef","canvasRef","getWrappedInstance","Object","canvasInstance","current","handleDeleteNodes","ids","newLinks","cloneDeep","forEach","id","remove","link","source","target","cloneNodes","newNodes","item","includes","handleDeleteLinks","activeLinks","linkList","map","diffLinks","difference","find","handleNodesCopy","newCopiedNodes","handleNodesPaste","currentCopied","node","v4","x","width","ref","createRef","handleShear","handleCopy","compact","handlePaste","handleDelete","newGroups","group","index","findIndex","slice","handleGroupInfo","handleDragSelect","onDragSelectorClose","selectorProps","k","y","points","height","poly","direction","point","handleSave","data","success","error","minXNode","minBy","minYNode","maxXNode","maxBy","maxYNode","minXId","maxYId","groupId","updateGroupsInfo","currentNodes","type","deleteGroupId","newGroup","groupNodes","originGroupId","groupNode","newNode","filter","length","push","handleGroup","events","isMac","navigator","platform","startsWith","event","SUPER_KEY_CODE","metaKey","ctrlKey","renderOperation","handleResizeTo","layout","handleShowAll","renderNodePanel","renderCanvas","document","querySelector","fill","strokeWidth","stroke","strokeDasharray","renderProperty"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { message } from \"antd\";\nimport { Toolbar, NodePanel, DragSelector } from \"./components\";\nimport CanvasContent from \"./CanvasContent\";\nimport { useEditorStore, useKeyPress, useEventListener } from \"./hooks\";\nimport { ShapeProps } from \"./utils/useDragSelect\";\nimport { pointInPoly } from \"./utils/layout\";\nimport { GROUP_PADDING, Node, Group } from \"./defines\";\n\nimport \"./index.scss\";\n\nconst { useState, useRef, useEffect } = React;\n\nexport default function EditorDemo(props) {\n  const [screenScale, changeScreenScale] = useState(100);\n  const [dragSelectable, setDragSelectable] = useState(false);\n  const [keyPressing, setKeyPressing] = useState(false);\n  const {\n    nodes,\n    links,\n    setNodes,\n    setLinks,\n    selectedLinks,\n    setSelectedLinks,\n    dragNode,\n    setDragNode,\n    selectedNodes,\n    setSelectedNodes,\n    updateNodes,\n    updateLinks,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    handleSaveData,\n    groups,\n    setGroups,\n    updateGroups\n  } = useEditorStore();\n\n  // 画布容器\n  const screenRef = useRef(null);\n\n  // 画布 ref\n  const canvasRef = useRef({\n    getWrappedInstance: () => Object\n  } as any);\n\n  const canvasInstance = canvasRef.current;\n\n  /** 删除组件 */\n  const handleDeleteNodes = (ids: string[]) => {\n    if (!ids) {\n      return;\n    }\n    // 删除与组件相连的连线，不论上游或下游\n\n    const newLinks = _.cloneDeep(links);\n    ids.forEach(id => {\n      // 删除与节点连接的任意边\n      _.remove(newLinks, link => link.source === id || link.target === id);\n    });\n    // 更新连线\n    setLinks(newLinks);\n\n    // 剔除components\n    const cloneNodes = _.cloneDeep(nodes);\n    const newNodes = _.remove(cloneNodes, item => !ids.includes(item.id));\n\n    setNodes(newNodes);\n\n    // 清空高亮状态\n    setSelectedLinks([]);\n    setSelectedNodes([]);\n  };\n\n  /** 删除连线 */\n  const handleDeleteLinks = (activeLinks: string[]) => {\n    if (!activeLinks) {\n      return;\n    }\n    const linkList = links.map(link => link.id);\n    const diffLinks = _.difference(linkList, activeLinks);\n    const newLinks = diffLinks\n      ? diffLinks.map(link => _.find(links, item => item.id === link))\n      : [];\n    setLinks(newLinks);\n  };\n\n  /** 复制节点 */\n  const handleNodesCopy = (ids: string[]) => {\n    const newCopiedNodes = ids.map(id => {\n      return _.find(nodes, item => item.id === id);\n    });\n\n    setCopiedNodes(newCopiedNodes);\n  };\n\n  /** 粘贴节点 */\n  const handleNodesPaste = () => {\n    if (copiedNodes) {\n      const currentCopied = copiedNodes.map(node => {\n        return {\n          ...node,\n          id: uuid.v4(),\n          /**  @todo 后续可优化布局算法 */\n          x: node.x + node.width + 20,\n          ref: React.createRef()\n        };\n      });\n      setCopiedNodes(currentCopied);\n      setNodes([...nodes, ...currentCopied]);\n    }\n  };\n\n  // 剪切\n  const handleShear = () => {\n    if (selectedNodes) {\n      handleNodesCopy(selectedNodes);\n      handleDeleteNodes(selectedNodes);\n    }\n  };\n\n  // 复制\n  const handleCopy = () => {\n    if (selectedNodes) {\n      handleNodesCopy(_.compact(selectedNodes));\n    }\n  };\n\n  // 粘贴\n  const handlePaste = () => {\n    if (copiedNodes) {\n      handleNodesPaste();\n    }\n  };\n\n  // 删除\n  const handleDelete = () => {\n    if (selectedNodes) {\n      handleDeleteNodes(selectedNodes);\n      // 判断删除的节点是否在组内，删除组内的节点\n      const newGroups = groups.map(group => {\n        selectedNodes.forEach(id => {\n          const index = _.findIndex(group?.nodes, node => node.id === id);\n          if (index > -1) {\n            group.nodes = [\n              ...group.nodes.slice(0, index),\n              ...group.nodes.slice(index + 1)\n            ];\n            group = handleGroupInfo(group.nodes);\n          }\n        });\n        return group;\n      });\n      setGroups(_.compact(newGroups));\n    }\n    if (selectedLinks) {\n      handleDeleteLinks(selectedLinks);\n    }\n  };\n\n  // 圈选\n  const handleDragSelect = () => {\n    setDragSelectable(!dragSelectable);\n  };\n\n  /** 处理DragSelector 关闭事件 */\n  const onDragSelectorClose = (selectorProps: ShapeProps) => {\n    // 计算区域内的位置有多少节点需要高亮,其实计算的是一个点是否在矩形内\n\n    // 1. 计算每个节点的中心\n    // 多边形的位置信息要与画布同步\n    const { k, x, y } = currTrans;\n\n    const points = nodes.map(node => {\n      return {\n        x: k * node.x + x + (node.width / 2) * k,\n        y: k * node.y + y + (node.height / 2) * k,\n        id: node.id\n      };\n    });\n\n    // 2. 多边形各个点转化为数组，暂时为矩形，后面考虑其他形状\n    let poly = [];\n    if (selectorProps.direction === \"left\") {\n      poly = [\n        { x: selectorProps.x, y: selectorProps.y },\n        { x: selectorProps.x + selectorProps.width, y: selectorProps.y },\n        {\n          x: selectorProps.x + selectorProps.width,\n          y: selectorProps.y + selectorProps.height\n        },\n        { x: selectorProps.x, y: selectorProps.y + selectorProps.height }\n      ];\n    } else {\n      poly = [\n        { x: selectorProps.x, y: selectorProps.y },\n        { x: selectorProps.x - selectorProps.width, y: selectorProps.y },\n        {\n          x: selectorProps.x - selectorProps.width,\n          y: selectorProps.y - selectorProps.height\n        },\n        { x: selectorProps.x, y: selectorProps.y - selectorProps.height }\n      ];\n    }\n\n    // 3. 射线法判断点是否在多边形的内部\n    const ids = points.map(point => {\n      if (pointInPoly(point, poly) === \"in\") {\n        return point.id;\n      }\n    });\n    setSelectedNodes(_.compact(ids));\n    setDragSelectable(false);\n  };\n\n  /** 保存 */\n  const handleSave = async () => {\n    const data = await handleSaveData();\n    if (data) {\n      message.success(\"保存成功\");\n    } else {\n      message.error(\"保存失败\");\n    }\n  };\n\n  /** 计算选中节点的位置，形成大的group */\n  const handleGroupInfo = (nodes: Node[]): Group => {\n    if (!nodes) {\n      return;\n    }\n    const minXNode = _.minBy(nodes, node => node.x);\n    const minYNode = _.minBy(nodes, node => node.y);\n\n    const maxXNode = _.maxBy(nodes, node => node.x + node.width);\n    const maxYNode = _.maxBy(nodes, node => node.y + node.height);\n\n    const x = minXNode?.x - GROUP_PADDING;\n    const y = minYNode?.y - GROUP_PADDING;\n\n    const minXId = minXNode?.id;\n    const maxYId = maxYNode?.id;\n\n    const width = maxXNode?.x + maxXNode?.width - x + GROUP_PADDING;\n    const height = maxYNode?.y + maxYNode?.height - y + GROUP_PADDING;\n\n    if (minXId && maxYId) {\n      return {\n        id: `group_${minXId}_${maxYId}`,\n        x,\n        y,\n        width,\n        height,\n        nodes: nodes.map(node => ({\n          ...node,\n          groupId: `group_${minXId}_${maxYId}`\n        })),\n        ref: React.createRef()\n      };\n    }\n  };\n\n  /** 更新组的数据 */\n  const updateGroupsInfo = (\n    currentNodes: Node[],\n    type = \"merge\" as \"merge\" | \"new\",  // 区分是合并还是新组\n    deleteGroupId?: string\n  ) => {\n    const newGroup = handleGroupInfo(currentNodes);\n    if (newGroup) {\n      // 更新节点\n      const groupId = newGroup.id;\n      const groupNodes = newGroup.nodes.map(node => ({ ...node, groupId }));\n      // 原来的groupId\n      const originGroupId = currentNodes[0].groupId;\n      // 更新节点\n      const newNodes = nodes.map(node => {\n        const groupNode = _.find(groupNodes, item => item.id === node.id);\n        if (groupNode) {\n          return groupNode;\n        } else {\n          const { groupId, ...newNode } = node;\n          return newNode;\n        }\n      });\n\n      setNodes(newNodes);\n\n      let newGroups =\n        type === \"merge\"\n          ? groups.filter(group => group.id !== originGroupId)\n          : groups;\n\n      if (type === \"merge\" && newGroups && newGroups.length > 0) {\n        newGroups = newGroups.map(group => {\n          return group.id === newGroup.id ? newGroup : group;\n        });\n      } else {\n        newGroups.push(newGroup);\n      }\n\n      // let newGroups = _.uniqBy(_.compact([...groups, newGroup]), \"id\");\n      if (deleteGroupId) {\n        newGroups = newGroups.filter(group => group.id !== deleteGroupId);\n      }\n      setGroups(newGroups);\n    } else {\n      if (deleteGroupId) {\n        const newGroups = groups.filter(group => group.id !== deleteGroupId);\n        setGroups(newGroups);\n      }\n    }\n  };\n\n  /** 成组 */\n  const handleGroup = () => {\n    const currentNodes = _.compact(\n      nodes.map(node => {\n        if (selectedNodes.includes(node.id)) {\n          return node;\n        }\n      })\n    );\n    // 更新组\n    updateGroupsInfo(currentNodes, \"new\");\n    setSelectedNodes([]);\n  };\n\n  useKeyPress(\n    \"delete\",\n    () => {\n      handleDelete();\n    },\n    {\n      events: [\"keydown\", \"keyup\"]\n    }\n  );\n\n  const isMac = navigator.platform.startsWith(\"Mac\");\n\n  useKeyPress(isMac ? [\"meta.x\"] : [\"ctrl.x\"], () => {\n    handleShear();\n  });\n\n  useKeyPress(isMac ? [\"meta.c\"] : [\"ctrl.c\"], () => {\n    handleCopy();\n  });\n\n  useKeyPress(isMac ? [\"meta.v\"] : [\"ctrl.v\"], () => {\n    handlePaste();\n  });\n\n  useEventListener(\n    \"keydown\",\n    (event: KeyboardEvent) => {\n      const SUPER_KEY_CODE = navigator.platform.startsWith(\"Mac\")\n        ? event.metaKey\n        : event.ctrlKey;\n      if (SUPER_KEY_CODE) {\n        setKeyPressing(true);\n      }\n    },\n    canvasInstance\n  );\n\n  useEventListener(\n    \"keyup\",\n    (event: KeyboardEvent) => {\n      setKeyPressing(false);\n    },\n    canvasInstance\n  );\n\n  /** 操作区 */\n  const renderOperation = (\n    <div>\n      <Toolbar\n        ref={screenRef}\n        screenScale={screenScale}\n        changeScreenScale={changeScreenScale}\n        handleResizeTo={canvasInstance && canvasInstance.handleResizeTo}\n        items={[\n          \"save\",\n          \"fullscreen\",\n          \"zoom\",\n          \"adapt\",\n          \"format\",\n          \"ratio\",\n          \"shear\",\n          \"copy\",\n          \"paste\",\n          \"delete\",\n          \"dragSelect\",\n          // \"layout\",\n          \"adapt\",\n          \"group\"\n        ]}\n        onCopy={handleCopy}\n        onPaste={handlePaste}\n        onDelete={handleDelete}\n        onShear={handleShear}\n        onDragSelect={handleDragSelect}\n        onSave={handleSave}\n        onLayout={canvasInstance && canvasInstance.layout}\n        onAdapt={canvasInstance && canvasInstance.handleShowAll}\n        onGroup={handleGroup}\n      />\n    </div>\n  );\n  /** 渲染节点选择区 */\n  const renderNodePanel = (\n    <div className=\"editor-nodePanel\">\n      <NodePanel onDrag={setDragNode} />\n    </div>\n  );\n\n  /** 渲染中间画布区 */\n  const renderCanvas = (\n    <div className=\"editor-canvas\">\n      <DragSelector\n        visible={dragSelectable}\n        getPopupContainer={() => document.querySelector(\".editor-canvas\")}\n        overlayColor={\"rgba(0,0,0,0.1)\"}\n        selectorStyle={{\n          fill: \"transparent\",\n          strokeWidth: 1,\n          stroke: \"#6ca0f5\",\n          strokeDasharray: \"5 5\"\n        }}\n        onClose={onDragSelectorClose}\n      />\n      <CanvasContent\n        dragNode={dragNode}\n        ref={canvasRef}\n        nodes={nodes}\n        links={links}\n        groups={groups}\n        setNodes={setNodes}\n        setLinks={setLinks}\n        selectedLinks={selectedLinks}\n        setSelectedLinks={setSelectedLinks}\n        selectedNodes={selectedNodes}\n        setGroups={setGroups}\n        setSelectedNodes={setSelectedNodes}\n        updateNodes={updateNodes}\n        updateLinks={updateLinks}\n        deleteNodes={handleDeleteNodes}\n        deleteLinks={handleDeleteLinks}\n        copiedNodes={copiedNodes}\n        setCopiedNodes={setCopiedNodes}\n        currTrans={currTrans}\n        setCurrTrans={setCurrTrans}\n        isKeyPressing={keyPressing}\n        updateGroups={updateGroupsInfo}\n      />\n    </div>\n  );\n\n  /** 渲染配置区 */\n  const renderProperty = <div className=\"editor-property\"></div>;\n\n  return (\n    <div className=\"editor-demo\" ref={screenRef}>\n      <div className=\"editor-operation\">{renderOperation}</div>\n      <div className=\"editor-container\">\n        {renderNodePanel}\n        {renderCanvas}\n        {renderProperty}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}