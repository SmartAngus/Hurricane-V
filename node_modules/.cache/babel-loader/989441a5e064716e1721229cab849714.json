{"ast":null,"code":"var _jsxFileName = \"/Users/majy/work/bici/code/editor-demo/src/features/editor/index.tsx\";\n\n/*\nimport React from \"react\";\nimport { ReScreen } from \"regraph-next\"\n\nfunction EditorDemo() {\n    return (\n        <div className='editor-demo'>\n            <ReScreen\n                height = {500}\n                width = \"100%\"\n                mapWidth = {200}\n                mapHeight = {200}\n                mapPosition = \"RT-IN\" >\n                <svg>\n                    <g>\n                        <circle cx={0} cy={0} r={500} fill=\"yellow\" />\n                        <circle cx={0} cy={0} r={250} fill=\"red\" />\n                    </g>\n                </svg>\n            </ReScreen>\n        </div>\n    )\n}\nexport default EditorDemo;*/\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { message } from \"antd\";\nimport { Toolbar, NodePanel, DragSelector } from \"./components\";\nimport CanvasContent from \"./common/CanvasContent\";\nimport { useEditorStore, useKeyPress, useEventListener } from \"./hooks\";\nimport { pointInPoly } from \"./utils/layout\";\nimport { GROUP_PADDING } from \"./constants/defines\";\nimport \"./index.scss\";\nconst {\n  useState,\n  useRef,\n  useEffect\n} = React;\nexport default function EditorDemo(props) {\n  const [screenScale, changeScreenScale] = useState(100);\n  const [dragSelectable, setDragSelectable] = useState(false);\n  const [keyPressing, setKeyPressing] = useState(false);\n  const {\n    nodes,\n    links,\n    setNodes,\n    setLinks,\n    selectedLinks,\n    setSelectedLinks,\n    dragNode,\n    setDragNode,\n    selectedNodes,\n    setSelectedNodes,\n    updateNodes,\n    updateLinks,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    handleSaveData,\n    groups,\n    setGroups,\n    updateGroups,\n    editorLocalData\n  } = useEditorStore(); // 画布容器\n\n  const screenRef = useRef(null); // 画布 ref\n\n  const canvasRef = useRef({\n    getWrappedInstance: () => Object\n  });\n  const canvasInstance = canvasRef.current;\n  /** 删除组件 */\n\n  const handleDeleteNodes = ids => {\n    if (!ids) {\n      return;\n    } // 删除与组件相连的连线，不论上游或下游\n\n\n    const newLinks = _.cloneDeep(links);\n\n    ids.forEach(id => {\n      // 删除与节点连接的任意边\n      _.remove(newLinks, link => link.source === id || link.target === id);\n    }); // 更新连线\n\n    setLinks(newLinks); // 剔除components\n\n    const cloneNodes = _.cloneDeep(nodes);\n\n    const newNodes = _.remove(cloneNodes, item => !ids.includes(item.id));\n\n    setNodes(newNodes); // 清空高亮状态\n\n    setSelectedLinks([]);\n    setSelectedNodes([]);\n  };\n  /** 删除连线 */\n\n\n  const handleDeleteLinks = activeLinks => {\n    if (!activeLinks) {\n      return;\n    }\n\n    const linkList = links.map(link => link.id);\n\n    const diffLinks = _.difference(linkList, activeLinks);\n\n    const newLinks = diffLinks ? diffLinks.map(link => _.find(links, item => item.id === link)) : [];\n    setLinks(newLinks);\n  };\n  /** 复制节点 */\n\n\n  const handleNodesCopy = ids => {\n    const newCopiedNodes = ids.map(id => {\n      return _.find(nodes, item => item.id === id);\n    });\n    setCopiedNodes(newCopiedNodes);\n  };\n  /** 粘贴节点 */\n\n\n  const handleNodesPaste = () => {\n    if (copiedNodes) {\n      const currentCopied = copiedNodes.map(node => {\n        return { ...node,\n          id: uuid.v4(),\n\n          /**  @todo 后续可优化布局算法 */\n          x: node.x + node.width + 20,\n          ref: React.createRef()\n        };\n      });\n      setCopiedNodes(currentCopied);\n      setNodes([...nodes, ...currentCopied]);\n    }\n  }; // 剪切\n\n\n  const handleShear = () => {\n    if (selectedNodes) {\n      handleNodesCopy(selectedNodes);\n      handleDeleteNodes(selectedNodes);\n    }\n  }; // 复制\n\n\n  const handleCopy = () => {\n    if (selectedNodes) {\n      handleNodesCopy(_.compact(selectedNodes));\n    }\n  }; // 粘贴\n\n\n  const handlePaste = () => {\n    if (copiedNodes) {\n      handleNodesPaste();\n    }\n  }; // 删除\n\n\n  const handleDelete = () => {\n    if (selectedNodes) {\n      handleDeleteNodes(selectedNodes); // 判断删除的节点是否在组内，删除组内的节点\n\n      const newGroups = groups.map(group => {\n        selectedNodes.forEach(id => {\n          var _group;\n\n          const index = _.findIndex((_group = group) === null || _group === void 0 ? void 0 : _group.nodes, node => node.id === id);\n\n          if (index > -1) {\n            group.nodes = [...group.nodes.slice(0, index), ...group.nodes.slice(index + 1)];\n            group = handleGroupInfo(group.nodes);\n          }\n        });\n        return group;\n      });\n      setGroups(_.compact(newGroups));\n    }\n\n    if (selectedLinks) {\n      handleDeleteLinks(selectedLinks);\n    }\n  }; // 圈选\n\n\n  const handleDragSelect = () => {\n    setDragSelectable(!dragSelectable);\n  };\n  /** 处理DragSelector 关闭事件 */\n\n\n  const onDragSelectorClose = selectorProps => {\n    // 计算区域内的位置有多少节点需要高亮,其实计算的是一个点是否在矩形内\n    // 1. 计算每个节点的中心\n    // 多边形的位置信息要与画布同步\n    const {\n      k,\n      x,\n      y\n    } = currTrans;\n    const points = nodes.map(node => {\n      return {\n        x: k * node.x + x + node.width / 2 * k,\n        y: k * node.y + y + node.height / 2 * k,\n        id: node.id\n      };\n    }); // 2. 多边形各个点转化为数组，暂时为矩形，后面考虑其他形状\n\n    let poly = [];\n\n    if (selectorProps.direction === \"left\") {\n      poly = [{\n        x: selectorProps.x,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x + selectorProps.width,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x + selectorProps.width,\n        y: selectorProps.y + selectorProps.height\n      }, {\n        x: selectorProps.x,\n        y: selectorProps.y + selectorProps.height\n      }];\n    } else {\n      poly = [{\n        x: selectorProps.x,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x - selectorProps.width,\n        y: selectorProps.y\n      }, {\n        x: selectorProps.x - selectorProps.width,\n        y: selectorProps.y - selectorProps.height\n      }, {\n        x: selectorProps.x,\n        y: selectorProps.y - selectorProps.height\n      }];\n    } // 3. 射线法判断点是否在多边形的内部\n\n\n    const ids = points.map(point => {\n      if (pointInPoly(point, poly) === \"in\") {\n        return point.id;\n      }\n    });\n    setSelectedNodes(_.compact(ids));\n    setDragSelectable(false);\n  };\n  /** 保存 */\n\n\n  const handleSave = async () => {\n    const data = await handleSaveData();\n    console.log(editorLocalData);\n\n    if (data) {\n      message.success(\"保存成功\");\n    } else {\n      message.error(\"保存失败\");\n    }\n  };\n  /** 计算选中节点的位置，形成大的group */\n\n\n  const handleGroupInfo = nodes => {\n    if (!nodes) {\n      return;\n    }\n\n    const minXNode = _.minBy(nodes, node => node.x);\n\n    const minYNode = _.minBy(nodes, node => node.y);\n\n    const maxXNode = _.maxBy(nodes, node => node.x + node.width);\n\n    const maxYNode = _.maxBy(nodes, node => node.y + node.height);\n\n    const x = (minXNode === null || minXNode === void 0 ? void 0 : minXNode.x) - GROUP_PADDING;\n    const y = (minYNode === null || minYNode === void 0 ? void 0 : minYNode.y) - GROUP_PADDING;\n    const minXId = minXNode === null || minXNode === void 0 ? void 0 : minXNode.id;\n    const maxYId = maxYNode === null || maxYNode === void 0 ? void 0 : maxYNode.id;\n    const width = (maxXNode === null || maxXNode === void 0 ? void 0 : maxXNode.x) + (maxXNode === null || maxXNode === void 0 ? void 0 : maxXNode.width) - x + GROUP_PADDING;\n    const height = (maxYNode === null || maxYNode === void 0 ? void 0 : maxYNode.y) + (maxYNode === null || maxYNode === void 0 ? void 0 : maxYNode.height) - y + GROUP_PADDING;\n\n    if (minXId && maxYId) {\n      return {\n        id: `group_${minXId}_${maxYId}`,\n        x,\n        y,\n        width,\n        height,\n        nodes: nodes.map(node => ({ ...node,\n          groupId: `group_${minXId}_${maxYId}`\n        })),\n        ref: React.createRef()\n      };\n    }\n  };\n  /** 更新组的数据 */\n\n\n  const updateGroupsInfo = (currentNodes, type = \"merge\", deleteGroupId) => {\n    const newGroup = handleGroupInfo(currentNodes);\n\n    if (newGroup) {\n      // 更新节点\n      const groupId = newGroup.id;\n      const groupNodes = newGroup.nodes.map(node => ({ ...node,\n        groupId\n      })); // 原来的groupId\n\n      const originGroupId = currentNodes[0].groupId; // 更新节点\n\n      const newNodes = nodes.map(node => {\n        const groupNode = _.find(groupNodes, item => item.id === node.id);\n\n        if (groupNode) {\n          return groupNode;\n        } else {\n          const {\n            groupId,\n            ...newNode\n          } = node;\n          return newNode;\n        }\n      });\n      setNodes(newNodes);\n      let newGroups = type === \"merge\" ? groups.filter(group => group.id !== originGroupId) : groups;\n\n      if (type === \"merge\" && newGroups && newGroups.length > 0) {\n        newGroups = newGroups.map(group => {\n          return group.id === newGroup.id ? newGroup : group;\n        });\n      } else {\n        newGroups.push(newGroup);\n      } // let newGroups = _.uniqBy(_.compact([...groups, newGroup]), \"id\");\n\n\n      if (deleteGroupId) {\n        newGroups = newGroups.filter(group => group.id !== deleteGroupId);\n      }\n\n      setGroups(newGroups);\n    } else {\n      if (deleteGroupId) {\n        const newGroups = groups.filter(group => group.id !== deleteGroupId);\n        setGroups(newGroups);\n      }\n    }\n  };\n  /** 成组 */\n\n\n  const handleGroup = () => {\n    const currentNodes = _.compact(nodes.map(node => {\n      if (selectedNodes.includes(node.id)) {\n        return node;\n      }\n    })); // 更新组\n\n\n    updateGroupsInfo(currentNodes, \"new\");\n    setSelectedNodes([]);\n  };\n\n  useKeyPress(\"delete\", () => {\n    handleDelete();\n  }, {\n    events: [\"keydown\", \"keyup\"]\n  });\n  const isMac = navigator.platform.startsWith(\"Mac\");\n  useKeyPress(isMac ? [\"meta.x\"] : [\"ctrl.x\"], () => {\n    handleShear();\n  });\n  useKeyPress(isMac ? [\"meta.c\"] : [\"ctrl.c\"], () => {\n    handleCopy();\n  });\n  useKeyPress(isMac ? [\"meta.v\"] : [\"ctrl.v\"], () => {\n    handlePaste();\n  });\n  useEventListener(\"keydown\", event => {\n    const SUPER_KEY_CODE = navigator.platform.startsWith(\"Mac\") ? event.metaKey : event.ctrlKey;\n\n    if (SUPER_KEY_CODE) {\n      setKeyPressing(true);\n    }\n  }, canvasInstance);\n  useEventListener(\"keyup\", event => {\n    setKeyPressing(false);\n  }, canvasInstance);\n  /** 操作区 */\n\n  const renderOperation = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    ref: screenRef,\n    screenScale: screenScale,\n    changeScreenScale: changeScreenScale,\n    handleResizeTo: canvasInstance && canvasInstance.handleResizeTo,\n    items: [\"save\", \"fullscreen\", \"zoom\", \"adapt\", \"format\", \"ratio\", \"shear\", \"copy\", \"paste\", \"delete\", \"dragSelect\", \"layout\", \"adapt\", \"group\", \"preview\"],\n    onCopy: handleCopy,\n    onPaste: handlePaste,\n    onDelete: handleDelete,\n    onShear: handleShear,\n    onDragSelect: handleDragSelect,\n    onSave: handleSave,\n    onLayout: canvasInstance && canvasInstance.layout,\n    onAdapt: canvasInstance && canvasInstance.handleShowAll,\n    onGroup: handleGroup,\n    onPreview: handleCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }\n  }));\n  /** 渲染节点选择区 */\n\n  const renderNodePanel = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-nodePanel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NodePanel, {\n    onDrag: setDragNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }\n  }));\n  /** 渲染中间画布区 */\n\n  const renderCanvas = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DragSelector, {\n    visible: dragSelectable,\n    getPopupContainer: () => document.querySelector(\".editor-canvas\"),\n    overlayColor: \"rgba(0,0,0,0.1)\",\n    selectorStyle: {\n      fill: \"transparent\",\n      strokeWidth: 1,\n      stroke: \"#6ca0f5\",\n      strokeDasharray: \"5 5\"\n    },\n    onClose: onDragSelectorClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CanvasContent, {\n    dragNode: dragNode,\n    ref: canvasRef,\n    nodes: nodes,\n    links: links,\n    groups: groups,\n    setNodes: setNodes,\n    setLinks: setLinks,\n    selectedLinks: selectedLinks,\n    setSelectedLinks: setSelectedLinks,\n    selectedNodes: selectedNodes,\n    setGroups: setGroups,\n    setSelectedNodes: setSelectedNodes,\n    updateNodes: updateNodes,\n    updateLinks: updateLinks,\n    deleteNodes: handleDeleteNodes,\n    deleteLinks: handleDeleteLinks,\n    copiedNodes: copiedNodes,\n    setCopiedNodes: setCopiedNodes,\n    currTrans: currTrans,\n    setCurrTrans: setCurrTrans,\n    isKeyPressing: keyPressing,\n    updateGroups: updateGroupsInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }\n  }));\n  /** 渲染配置区 */\n\n  const renderProperty = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-property\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 28\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-demo\",\n    ref: screenRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-operation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }\n  }, renderOperation), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 13\n    }\n  }, renderNodePanel, renderCanvas, renderProperty));\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/index.tsx"],"names":["React","_","uuid","message","Toolbar","NodePanel","DragSelector","CanvasContent","useEditorStore","useKeyPress","useEventListener","pointInPoly","GROUP_PADDING","useState","useRef","useEffect","EditorDemo","props","screenScale","changeScreenScale","dragSelectable","setDragSelectable","keyPressing","setKeyPressing","nodes","links","setNodes","setLinks","selectedLinks","setSelectedLinks","dragNode","setDragNode","selectedNodes","setSelectedNodes","updateNodes","updateLinks","copiedNodes","setCopiedNodes","currTrans","setCurrTrans","handleSaveData","groups","setGroups","updateGroups","editorLocalData","screenRef","canvasRef","getWrappedInstance","Object","canvasInstance","current","handleDeleteNodes","ids","newLinks","cloneDeep","forEach","id","remove","link","source","target","cloneNodes","newNodes","item","includes","handleDeleteLinks","activeLinks","linkList","map","diffLinks","difference","find","handleNodesCopy","newCopiedNodes","handleNodesPaste","currentCopied","node","v4","x","width","ref","createRef","handleShear","handleCopy","compact","handlePaste","handleDelete","newGroups","group","index","findIndex","slice","handleGroupInfo","handleDragSelect","onDragSelectorClose","selectorProps","k","y","points","height","poly","direction","point","handleSave","data","console","log","success","error","minXNode","minBy","minYNode","maxXNode","maxBy","maxYNode","minXId","maxYId","groupId","updateGroupsInfo","currentNodes","type","deleteGroupId","newGroup","groupNodes","originGroupId","groupNode","newNode","filter","length","push","handleGroup","events","isMac","navigator","platform","startsWith","event","SUPER_KEY_CODE","metaKey","ctrlKey","renderOperation","handleResizeTo","layout","handleShowAll","renderNodePanel","renderCanvas","document","querySelector","fill","strokeWidth","stroke","strokeDasharray","renderProperty"],"mappings":"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","sourcesContent":["/*\nimport React from \"react\";\nimport { ReScreen } from \"regraph-next\"\n\nfunction EditorDemo() {\n    return (\n        <div className='editor-demo'>\n            <ReScreen\n                height = {500}\n                width = \"100%\"\n                mapWidth = {200}\n                mapHeight = {200}\n                mapPosition = \"RT-IN\" >\n                <svg>\n                    <g>\n                        <circle cx={0} cy={0} r={500} fill=\"yellow\" />\n                        <circle cx={0} cy={0} r={250} fill=\"red\" />\n                    </g>\n                </svg>\n            </ReScreen>\n        </div>\n    )\n}\nexport default EditorDemo;*/\nimport * as React from \"react\";\nimport * as _ from \"lodash\";\nimport * as uuid from \"uuid\";\nimport { message } from \"antd\";\nimport { Toolbar, NodePanel, DragSelector } from \"./components\";\nimport CanvasContent from \"./common/CanvasContent\";\nimport { useEditorStore, useKeyPress, useEventListener } from \"./hooks\";\nimport { ShapeProps } from \"./utils/useDragSelect\";\nimport { pointInPoly } from \"./utils/layout\";\nimport { GROUP_PADDING, Node, Group } from \"./constants/defines\";\n\nimport \"./index.scss\";\n\nconst { useState, useRef, useEffect } = React;\n\nexport default function EditorDemo(props) {\n    const [screenScale, changeScreenScale] = useState(100);\n    const [dragSelectable, setDragSelectable] = useState(false);\n    const [keyPressing, setKeyPressing] = useState(false);\n    const {\n        nodes,\n        links,\n        setNodes,\n        setLinks,\n        selectedLinks,\n        setSelectedLinks,\n        dragNode,\n        setDragNode,\n        selectedNodes,\n        setSelectedNodes,\n        updateNodes,\n        updateLinks,\n        copiedNodes,\n        setCopiedNodes,\n        currTrans,\n        setCurrTrans,\n        handleSaveData,\n        groups,\n        setGroups,\n        updateGroups,\n        editorLocalData\n    } = useEditorStore();\n\n\n    // 画布容器\n    const screenRef = useRef(null);\n\n    // 画布 ref\n    const canvasRef = useRef({\n        getWrappedInstance: () => Object\n    } as any);\n\n    const canvasInstance = canvasRef.current;\n\n    /** 删除组件 */\n    const handleDeleteNodes = (ids: string[]) => {\n        if (!ids) {\n            return;\n        }\n        // 删除与组件相连的连线，不论上游或下游\n\n        const newLinks = _.cloneDeep(links);\n        ids.forEach(id => {\n            // 删除与节点连接的任意边\n            _.remove(newLinks, link => link.source === id || link.target === id);\n        });\n        // 更新连线\n        setLinks(newLinks);\n\n        // 剔除components\n        const cloneNodes = _.cloneDeep(nodes);\n        const newNodes = _.remove(cloneNodes, item => !ids.includes(item.id));\n\n        setNodes(newNodes);\n\n        // 清空高亮状态\n        setSelectedLinks([]);\n        setSelectedNodes([]);\n    };\n\n    /** 删除连线 */\n    const handleDeleteLinks = (activeLinks: string[]) => {\n        if (!activeLinks) {\n            return;\n        }\n        const linkList = links.map(link => link.id);\n        const diffLinks = _.difference(linkList, activeLinks);\n        const newLinks = diffLinks\n            ? diffLinks.map(link => _.find(links, item => item.id === link))\n            : [];\n        setLinks(newLinks);\n    };\n\n    /** 复制节点 */\n    const handleNodesCopy = (ids: string[]) => {\n        const newCopiedNodes = ids.map(id => {\n            return _.find(nodes, item => item.id === id);\n        });\n\n        setCopiedNodes(newCopiedNodes);\n    };\n\n    /** 粘贴节点 */\n    const handleNodesPaste = () => {\n        if (copiedNodes) {\n            const currentCopied = copiedNodes.map(node => {\n                return {\n                    ...node,\n                    id: uuid.v4(),\n                    /**  @todo 后续可优化布局算法 */\n                    x: node.x + node.width + 20,\n                    ref: React.createRef()\n                };\n            });\n            setCopiedNodes(currentCopied);\n            setNodes([...nodes, ...currentCopied]);\n        }\n    };\n\n    // 剪切\n    const handleShear = () => {\n        if (selectedNodes) {\n            handleNodesCopy(selectedNodes);\n            handleDeleteNodes(selectedNodes);\n        }\n    };\n\n    // 复制\n    const handleCopy = () => {\n        if (selectedNodes) {\n            handleNodesCopy(_.compact(selectedNodes));\n        }\n    };\n\n    // 粘贴\n    const handlePaste = () => {\n        if (copiedNodes) {\n            handleNodesPaste();\n        }\n    };\n\n    // 删除\n    const handleDelete = () => {\n        if (selectedNodes) {\n            handleDeleteNodes(selectedNodes);\n            // 判断删除的节点是否在组内，删除组内的节点\n            const newGroups = groups.map(group => {\n                selectedNodes.forEach(id => {\n                    const index = _.findIndex(group?.nodes, node => node.id === id);\n                    if (index > -1) {\n                        group.nodes = [\n                            ...group.nodes.slice(0, index),\n                            ...group.nodes.slice(index + 1)\n                        ];\n                        group = handleGroupInfo(group.nodes);\n                    }\n                });\n                return group;\n            });\n            setGroups(_.compact(newGroups));\n        }\n        if (selectedLinks) {\n            handleDeleteLinks(selectedLinks);\n        }\n    };\n\n    // 圈选\n    const handleDragSelect = () => {\n        setDragSelectable(!dragSelectable);\n    };\n\n    /** 处理DragSelector 关闭事件 */\n    const onDragSelectorClose = (selectorProps: ShapeProps) => {\n        // 计算区域内的位置有多少节点需要高亮,其实计算的是一个点是否在矩形内\n\n        // 1. 计算每个节点的中心\n        // 多边形的位置信息要与画布同步\n        const { k, x, y } = currTrans;\n\n        const points = nodes.map(node => {\n            return {\n                x: k * node.x + x + (node.width / 2) * k,\n                y: k * node.y + y + (node.height / 2) * k,\n                id: node.id\n            };\n        });\n\n        // 2. 多边形各个点转化为数组，暂时为矩形，后面考虑其他形状\n        let poly = [];\n        if (selectorProps.direction === \"left\") {\n            poly = [\n                { x: selectorProps.x, y: selectorProps.y },\n                { x: selectorProps.x + selectorProps.width, y: selectorProps.y },\n                {\n                    x: selectorProps.x + selectorProps.width,\n                    y: selectorProps.y + selectorProps.height\n                },\n                { x: selectorProps.x, y: selectorProps.y + selectorProps.height }\n            ];\n        } else {\n            poly = [\n                { x: selectorProps.x, y: selectorProps.y },\n                { x: selectorProps.x - selectorProps.width, y: selectorProps.y },\n                {\n                    x: selectorProps.x - selectorProps.width,\n                    y: selectorProps.y - selectorProps.height\n                },\n                { x: selectorProps.x, y: selectorProps.y - selectorProps.height }\n            ];\n        }\n\n        // 3. 射线法判断点是否在多边形的内部\n        const ids = points.map(point => {\n            if (pointInPoly(point, poly) === \"in\") {\n                return point.id;\n            }\n        });\n        setSelectedNodes(_.compact(ids));\n        setDragSelectable(false);\n    };\n\n    /** 保存 */\n    const handleSave = async () => {\n        const data = await handleSaveData();\n\n        console.log(editorLocalData);\n        if (data) {\n            message.success(\"保存成功\");\n        } else {\n            message.error(\"保存失败\");\n        }\n    };\n\n    /** 计算选中节点的位置，形成大的group */\n    const handleGroupInfo = (nodes: Node[]): Group => {\n        if (!nodes) {\n            return;\n        }\n        const minXNode = _.minBy(nodes, node => node.x);\n        const minYNode = _.minBy(nodes, node => node.y);\n\n        const maxXNode = _.maxBy(nodes, node => node.x + node.width);\n        const maxYNode = _.maxBy(nodes, node => node.y + node.height);\n\n        const x = minXNode?.x - GROUP_PADDING;\n        const y = minYNode?.y - GROUP_PADDING;\n\n        const minXId = minXNode?.id;\n        const maxYId = maxYNode?.id;\n\n        const width = maxXNode?.x + maxXNode?.width - x + GROUP_PADDING;\n        const height = maxYNode?.y + maxYNode?.height - y + GROUP_PADDING;\n\n        if (minXId && maxYId) {\n            return {\n                id: `group_${minXId}_${maxYId}`,\n                x,\n                y,\n                width,\n                height,\n                nodes: nodes.map(node => ({\n                    ...node,\n                    groupId: `group_${minXId}_${maxYId}`\n                })),\n                ref: React.createRef()\n            };\n        }\n    };\n\n    /** 更新组的数据 */\n    const updateGroupsInfo = (\n        currentNodes: Node[],\n        type = \"merge\" as \"merge\" | \"new\",  // 区分是合并还是新组\n        deleteGroupId?: string\n    ) => {\n        const newGroup = handleGroupInfo(currentNodes);\n        if (newGroup) {\n            // 更新节点\n            const groupId = newGroup.id;\n            const groupNodes = newGroup.nodes.map(node => ({ ...node, groupId }));\n            // 原来的groupId\n            const originGroupId = currentNodes[0].groupId;\n            // 更新节点\n            const newNodes = nodes.map(node => {\n                const groupNode = _.find(groupNodes, item => item.id === node.id);\n                if (groupNode) {\n                    return groupNode;\n                } else {\n                    const { groupId, ...newNode } = node;\n                    return newNode;\n                }\n            });\n\n            setNodes(newNodes);\n\n            let newGroups =\n                type === \"merge\"\n                    ? groups.filter(group => group.id !== originGroupId)\n                    : groups;\n\n            if (type === \"merge\" && newGroups && newGroups.length > 0) {\n                newGroups = newGroups.map(group => {\n                    return group.id === newGroup.id ? newGroup : group;\n                });\n            } else {\n                newGroups.push(newGroup);\n            }\n\n            // let newGroups = _.uniqBy(_.compact([...groups, newGroup]), \"id\");\n            if (deleteGroupId) {\n                newGroups = newGroups.filter(group => group.id !== deleteGroupId);\n            }\n            setGroups(newGroups);\n        } else {\n            if (deleteGroupId) {\n                const newGroups = groups.filter(group => group.id !== deleteGroupId);\n                setGroups(newGroups);\n            }\n        }\n    };\n\n    /** 成组 */\n    const handleGroup = () => {\n        const currentNodes = _.compact(\n            nodes.map(node => {\n                if (selectedNodes.includes(node.id)) {\n                    return node;\n                }\n            })\n        );\n        // 更新组\n        updateGroupsInfo(currentNodes, \"new\");\n        setSelectedNodes([]);\n    };\n\n    useKeyPress(\n        \"delete\",\n        () => {\n            handleDelete();\n        },\n        {\n            events: [\"keydown\", \"keyup\"]\n        }\n    );\n\n    const isMac = navigator.platform.startsWith(\"Mac\");\n\n    useKeyPress(isMac ? [\"meta.x\"] : [\"ctrl.x\"], () => {\n        handleShear();\n    });\n\n    useKeyPress(isMac ? [\"meta.c\"] : [\"ctrl.c\"], () => {\n        handleCopy();\n    });\n\n    useKeyPress(isMac ? [\"meta.v\"] : [\"ctrl.v\"], () => {\n        handlePaste();\n    });\n\n    useEventListener(\n        \"keydown\",\n        (event: KeyboardEvent) => {\n            const SUPER_KEY_CODE = navigator.platform.startsWith(\"Mac\")\n                ? event.metaKey\n                : event.ctrlKey;\n            if (SUPER_KEY_CODE) {\n                setKeyPressing(true);\n            }\n        },\n        canvasInstance\n    );\n\n    useEventListener(\n        \"keyup\",\n        (event: KeyboardEvent) => {\n            setKeyPressing(false);\n        },\n        canvasInstance\n    );\n\n    /** 操作区 */\n    const renderOperation = (\n        <div>\n            <Toolbar\n                ref={screenRef}\n                screenScale={screenScale}\n                changeScreenScale={changeScreenScale}\n                handleResizeTo={canvasInstance && canvasInstance.handleResizeTo}\n                items={[\n                    \"save\",\n                    \"fullscreen\",\n                    \"zoom\",\n                    \"adapt\",\n                    \"format\",\n                    \"ratio\",\n                    \"shear\",\n                    \"copy\",\n                    \"paste\",\n                    \"delete\",\n                    \"dragSelect\",\n                    \"layout\",\n                    \"adapt\",\n                    \"group\",\n                    \"preview\"\n                ]}\n                onCopy={handleCopy}\n                onPaste={handlePaste}\n                onDelete={handleDelete}\n                onShear={handleShear}\n                onDragSelect={handleDragSelect}\n                onSave={handleSave}\n                onLayout={canvasInstance && canvasInstance.layout}\n                onAdapt={canvasInstance && canvasInstance.handleShowAll}\n                onGroup={handleGroup}\n                onPreview={handleCopy}\n            />\n        </div>\n    );\n    /** 渲染节点选择区 */\n    const renderNodePanel = (\n        <div className=\"editor-nodePanel\">\n            <NodePanel onDrag={setDragNode} />\n        </div>\n    );\n\n    /** 渲染中间画布区 */\n    const renderCanvas = (\n        <div className=\"editor-canvas\">\n            <DragSelector\n                visible={dragSelectable}\n                getPopupContainer={() => document.querySelector(\".editor-canvas\")}\n                overlayColor={\"rgba(0,0,0,0.1)\"}\n                selectorStyle={{\n                    fill: \"transparent\",\n                    strokeWidth: 1,\n                    stroke: \"#6ca0f5\",\n                    strokeDasharray: \"5 5\"\n                }}\n                onClose={onDragSelectorClose}\n            />\n            <CanvasContent\n                dragNode={dragNode}\n                ref={canvasRef}\n                nodes={nodes}\n                links={links}\n                groups={groups}\n                setNodes={setNodes}\n                setLinks={setLinks}\n                selectedLinks={selectedLinks}\n                setSelectedLinks={setSelectedLinks}\n                selectedNodes={selectedNodes}\n                setGroups={setGroups}\n                setSelectedNodes={setSelectedNodes}\n                updateNodes={updateNodes}\n                updateLinks={updateLinks}\n                deleteNodes={handleDeleteNodes}\n                deleteLinks={handleDeleteLinks}\n                copiedNodes={copiedNodes}\n                setCopiedNodes={setCopiedNodes}\n                currTrans={currTrans}\n                setCurrTrans={setCurrTrans}\n                isKeyPressing={keyPressing}\n                updateGroups={updateGroupsInfo}\n            />\n        </div>\n    );\n\n    /** 渲染配置区 */\n    const renderProperty = <div className=\"editor-property\"></div>;\n\n    return (\n        <div className=\"editor-demo\" ref={screenRef}>\n            <div className=\"editor-operation\">{renderOperation}</div>\n            <div className=\"editor-container\">\n                {renderNodePanel}\n                {renderCanvas}\n                {renderProperty}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}