{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Link_1 = require(\"./Link\");\n\nvar utils_1 = require(\"../../Utils/utils\");\n\nvar utils_2 = require(\"./utils\");\n\nvar MAX_ITERATIONS = 24;\n\nvar BaseDAG = function () {\n  function BaseDAG(_a) {\n    var nodes = _a.nodes,\n        links = _a.links,\n        selfLinks = _a.selfLinks,\n        config = _a.config;\n    this.virtualId = 0;\n    this.paddingSum = [];\n    this.levelPaddings = [];\n    this.levelMap = new Map();\n    this.nodesByLevel = [];\n    this.nodesLevelMaxHeight = [];\n    this.dfsVisited = [];\n    this.nodes = nodes.slice().sort(function (nodeA, nodeB) {\n      return nodeA.id > nodeB.id ? 1 : -1;\n    });\n    this.links = links.slice().sort(function (linkA, linkB) {\n      return linkA.source.id + \"-\" + linkA.target.id > linkB.source.id + \"-\" + linkB.target.id ? 1 : -1;\n    });\n    this.selfLinks = selfLinks.slice();\n    this.config = tslib_1.__assign({}, config);\n  }\n\n  BaseDAG.prototype.destroy = function () {\n    this.nodes = null;\n    this.links = null;\n    this.selfLinks = null;\n    this.nodesByLevel = null;\n    this.nodesLevelMaxHeight = null;\n  };\n\n  BaseDAG.prototype.getOutput = function (left, top) {\n    var _this = this;\n\n    this.nodes.forEach(function (node) {\n      node.finalPos = {\n        x: node.pos + left,\n        y: _this.paddingSum[node.level] + top + _this.nodesLevelMaxHeight.reduce(function (pre, height, index) {\n          if (index < node.level) return pre + _this.nodesLevelMaxHeight[index];\n          return pre;\n        }, 0) + (_this.nodesLevelMaxHeight[node.level] - node.nodeHeight) / 2\n      };\n    });\n    this.links.forEach(function (link) {\n      if (link.linkChildren && link.linkChildren.length) {\n        link.finalPath = link.linkChildren.reduce(function (path, child, index) {\n          if (index === 0) {\n            return _this.linkInstace.getFinalPath(child, _this.levelPaddings, false, true);\n          }\n\n          return path.concat(_this.linkInstace.getFinalPath(child, _this.levelPaddings, index === link.linkChildren.length - 1, false));\n        }, []);\n      } else {\n        link.finalPath = _this.linkInstace.getFinalPath(link, _this.levelPaddings, true, true);\n      }\n    });\n    this.selfLinks.forEach(function (link) {\n      link.finalPath = _this.linkInstace.getSelfFinalPath(link);\n    });\n    this.recoverCycle();\n    return {\n      nodes: this.nodes.filter(function (node) {\n        return node.type !== 'virtual';\n      }).map(function (node) {\n        return {\n          id: node.id,\n          view: {\n            x: node.finalPos.x,\n            y: node.finalPos.y\n          },\n          nodeWidth: node.nodeWidth,\n          nodeHeight: node.nodeHeight,\n          info: node.originInfo\n        };\n      }),\n      links: tslib_1.__spread(this.links.filter(function (link) {\n        return link.source.type !== 'virtual' && link.target.type !== 'virtual';\n      }).map(function (link) {\n        return {\n          sourceId: link.source.id,\n          targetId: link.target.id,\n          path: link.finalPath,\n          info: link.originInfo\n        };\n      }), this.selfLinks.map(function (link) {\n        return {\n          sourceId: link.source.id,\n          targetId: link.target.id,\n          path: link.finalPath,\n          info: link.originInfo\n        };\n      })),\n      pos: {\n        width: this.width,\n        height: this.height\n      }\n    };\n  };\n\n  BaseDAG.prototype.run = function () {\n    this.clearCycle();\n    this.calcNodeLevels();\n    this.calcNodePos();\n    this.xcordinate();\n    this.calcLinkPos();\n    this.calcRealSize();\n    return this;\n  };\n\n  BaseDAG.prototype.getSize = function () {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  };\n\n  BaseDAG.prototype.calcLinkPos = function () {\n    var _a = this.config,\n        linkType = _a.linkType,\n        DiyLine = _a.DiyLine;\n    var LinkClass = Link_1.default(linkType, DiyLine);\n    this.linkInstace = new LinkClass(this.nodesByLevel, this.selfLinks, this.config);\n    this.levelPaddings = this.linkInstace.calcPosAndPadding();\n  };\n\n  BaseDAG.prototype.calcRealSize = function () {\n    var _this = this;\n\n    var sum = 0;\n    this.levelPaddings.forEach(function (padding, index) {\n      _this.paddingSum[index] = sum;\n      sum += padding;\n    });\n    this.height = this.paddingSum[this.paddingSum.length - 1] + utils_1.sumBy(this.nodesLevelMaxHeight, function (height) {\n      return height;\n    });\n    this.width = this.nodes.reduce(function (max, curNode) {\n      return curNode.pos + curNode.nodeWidth > max ? curNode.pos + curNode.nodeWidth : max;\n    }, 0) - this.nodes.reduce(function (min, curNode) {\n      return curNode.pos < min ? curNode.pos : min;\n    }, 0);\n  };\n\n  BaseDAG.prototype.addVirtualNode = function () {\n    var _this = this;\n\n    var virtualNodes = [];\n    var virtualLinks = [];\n    this.links.forEach(function (link) {\n      var source = link.source;\n      var target = link.target;\n      var sourceLevel = source.level;\n      var targetLevel = target.level;\n      link.linkChildren = [];\n\n      if (sourceLevel + 1 < targetLevel) {\n        for (var i = sourceLevel + 1; i < targetLevel; i++) {\n          var virtualNode = {\n            id: \"virtual\" + _this.virtualId++,\n            sourceLinks: [],\n            targetLinks: [],\n            type: 'virtual',\n            nodeWidth: _this.config.defaultVirtualNodeWidth,\n            nodeHeight: _this.nodesLevelMaxHeight[i],\n            originInfo: {},\n            level: i\n          };\n          var sourceNode = i === sourceLevel + 1 ? source : virtualNodes[virtualNodes.length - 1];\n          var virtualLink = {\n            source: sourceNode,\n            target: virtualNode,\n            originInfo: {},\n            isReverse: link.isReverse\n          };\n          link.linkChildren.push(virtualLink);\n          virtualLinks.push(virtualLink);\n          sourceNode.sourceLinks.push(virtualLink);\n          virtualNode.targetLinks.push(virtualLink);\n\n          if (i === targetLevel - 1) {\n            var virtualLink_1 = {\n              source: virtualNode,\n              target: target,\n              originInfo: {},\n              isReverse: link.isReverse\n            };\n            link.linkChildren.push(virtualLink_1);\n            virtualLinks.push(virtualLink_1);\n            virtualNode.sourceLinks.push(virtualLink_1);\n            target.targetLinks.push(virtualLink_1);\n          }\n\n          virtualNodes.push(virtualNode);\n        }\n      }\n    });\n    this.nodes = tslib_1.__spread(this.nodes, virtualNodes);\n    this.links = tslib_1.__spread(this.links, virtualLinks);\n  };\n\n  BaseDAG.prototype.dfsOrder = function (node) {\n    var _this = this;\n\n    if (this.dfsVisited.indexOf(node.id) > -1) return;\n    var pos = this.levelMap.get(node.level);\n    node.levelPos = pos;\n    node._levelPos = pos;\n    this.levelMap.set(node.level, pos + 1);\n    this.dfsVisited.push(node.id);\n    node.sourceLinks.forEach(function (link) {\n      var source = link.source,\n          target = link.target;\n\n      if (target.level - source.level === 1) {\n        _this.dfsOrder(target);\n      }\n    });\n  };\n\n  BaseDAG.prototype.initOrder = function () {\n    var _this = this;\n\n    this.nodes.forEach(function (node) {\n      var level = node.level;\n\n      if (_this.nodesByLevel[level]) {\n        _this.nodesByLevel[level].push(node);\n      } else {\n        _this.nodesByLevel[level] = [node];\n\n        _this.levelMap.set(level, 0);\n      }\n    });\n    this.dfsVisited = [];\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n        if (this.nodesByLevel[i][j].levelPos === undefined) {\n          this.dfsOrder(this.nodesByLevel[i][j]);\n        }\n      }\n    }\n  };\n\n  BaseDAG.prototype.wmedian = function (index) {\n    function medianNodeLevel(nodelevel) {\n      nodelevel.forEach(function (node) {\n        var parentNode = node.targetLinks.filter(function (link) {\n          return link.target.level - link.source.level === 1;\n        }).map(function (link) {\n          return link.source;\n        });\n        parentNode.sort(function (node1, node2) {\n          return node1.levelPos - node2.levelPos;\n        });\n        var m = Math.floor(parentNode.length / 2);\n\n        if (parentNode.length === 0) {\n          node._median = -1;\n        } else if (parentNode.length % 2 === 1) {\n          node._median = parentNode[m].levelPos;\n        } else if (parentNode.length === 2) {\n          node._median = (parentNode[0].levelPos + parentNode[1].levelPos) / 2;\n        } else {\n          var left = parentNode[m - 1].levelPos - parentNode[0].levelPos;\n          var right = parentNode[parentNode.length - 1].levelPos - parentNode[m].levelPos;\n          node._median = (parentNode[m - 1].levelPos * right + parentNode[m].levelPos * left) / (left + right);\n        }\n      });\n    }\n\n    if (index % 2 === 0) {\n      for (var i = 0; i < this.nodesByLevel.length; i++) {\n        var nodelevel = this.nodesByLevel[i];\n        medianNodeLevel(nodelevel);\n        this.nodesByLevel[i] = utils_2.sortNodelevel(nodelevel);\n      }\n\n      return;\n    } else {\n      for (var i = this.nodesByLevel.length - 1; i >= 0; i--) {\n        var nodelevel = this.nodesByLevel[i];\n        medianNodeLevel(nodelevel);\n        this.nodesByLevel[i] = utils_2.sortNodelevel(nodelevel);\n      }\n    }\n  };\n\n  BaseDAG.prototype.crossing = function () {\n    var count = 0;\n\n    for (var i = 1; i < this.nodesByLevel.length; i++) {\n      count += utils_2.crossing(this.nodesByLevel[i - 1], this.nodesByLevel[i]);\n    }\n\n    return count;\n  };\n\n  BaseDAG.prototype.transpose = function () {\n    var bestCount = this.crossing();\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      if (this.nodesByLevel.length === 1) continue;\n\n      for (var j = 1; j < this.nodesByLevel[i].length; j++) {\n        this.nodesByLevel[i][j]._levelPos = j - 1;\n        this.nodesByLevel[i][j - 1]._levelPos = j;\n        var currentCount = this.crossing();\n\n        if (currentCount < bestCount) {\n          var tmpNode = this.nodesByLevel[i][j];\n          this.nodesByLevel[i][j] = this.nodesByLevel[i][j - 1];\n          this.nodesByLevel[i][j - 1] = tmpNode;\n          bestCount = currentCount;\n        } else {\n          this.nodesByLevel[i][j]._levelPos = j;\n          this.nodesByLevel[i][j - 1]._levelPos = j - 1;\n        }\n      }\n    }\n\n    return bestCount;\n  };\n\n  BaseDAG.prototype.ordering = function () {\n    this.initOrder();\n    var bestCount = this.crossing();\n\n    if (bestCount !== 0) {\n      for (var i = 0; i <= MAX_ITERATIONS; i++) {\n        this.wmedian(i);\n        var currentCount = this.transpose();\n\n        if (bestCount > currentCount) {\n          bestCount = currentCount;\n          this.nodesByLevel.forEach(function (nodelevel, i) {\n            nodelevel.forEach(function (node) {\n              return node.levelPos = node._levelPos;\n            });\n            nodelevel.sort(function (node1, node2) {\n              return node1.levelPos - node2.levelPos;\n            });\n          });\n        }\n      }\n    }\n\n    this.nodesByLevel.forEach(function (nodelevel, i) {\n      nodelevel.sort(function (node1, node2) {\n        return node1.levelPos - node2.levelPos;\n      });\n    });\n  };\n\n  BaseDAG.prototype.findTypeConflicts = function () {\n    var conflicts = [];\n\n    var _loop_1 = function (i) {\n      var k0 = 0;\n      var scanPos = 0;\n      var prevLayerLength = this_1.nodesByLevel[i - 1].length;\n\n      var _loop_2 = function (j) {\n        var node = this_1.nodesByLevel[i][j];\n        var upVirtualLink = node.type === 'virtual' && node.targetLinks.filter(function (link) {\n          return link.target.level - link.source.level === 1 && link.source.type === 'virtual';\n        });\n        var upVirtualNode = upVirtualLink && upVirtualLink.length ? upVirtualLink[0].source : undefined;\n        var k1 = upVirtualNode ? upVirtualNode.levelPos : prevLayerLength;\n\n        if (upVirtualNode || j === this_1.nodesByLevel[i].length - 1) {\n          this_1.nodesByLevel[i].slice(scanPos, j + 1).forEach(function (curNode) {\n            var upCurNodes = curNode.targetLinks.filter(function (node) {\n              return node.target.level - node.source.level === 1;\n            }).map(function (link) {\n              return link.source;\n            });\n            upCurNodes.forEach(function (upCurNode) {\n              var pos = upCurNode.levelPos;\n\n              if ((pos < k0 || k1 < pos) && !(upCurNode.type === 'virtual' && curNode.type === 'virtual')) {\n                conflicts.push(utils_1.find(curNode.targetLinks, function (link) {\n                  return link.source.id === upCurNode.id && link.target.id === curNode.id;\n                }));\n              }\n            });\n          });\n          scanPos = j + 1;\n          k0 = k1;\n        }\n      };\n\n      for (var j = 0; j < this_1.nodesByLevel[i].length; j++) {\n        _loop_2(j);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 1; i < this.nodesByLevel.length; i++) {\n      _loop_1(i);\n    }\n\n    return conflicts;\n  };\n\n  BaseDAG.prototype.verticalAlignment = function (vert, typeConflicts) {\n    var root = {};\n    var align = {};\n\n    function hasConflict(node1, node2) {\n      for (var i = 0; i < typeConflicts.length; i++) {\n        var link = typeConflicts[i];\n\n        if (link.source.id === node1.id && link.target.id === node2.id || link.source.id === node2.id && link.target.id === node1.id) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n        var id = this.nodesByLevel[i][j].id;\n        root[id] = id;\n        align[id] = id;\n      }\n    }\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      var r = -1;\n\n      for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n        var nodeV = this.nodesByLevel[i][j];\n        var neighbors = vert === 'u' ? nodeV.targetLinks.filter(function (link) {\n          return Math.abs(link.target.level - link.source.level) === 1;\n        }).map(function (link) {\n          return link.source;\n        }) : nodeV.sourceLinks.filter(function (link) {\n          return Math.abs(link.target.level - link.source.level) === 1;\n        }).map(function (link) {\n          return link.target;\n        });\n\n        if (neighbors && neighbors.length) {\n          neighbors.sort(function (node1, node2) {\n            return node1.levelPos - node2.levelPos;\n          });\n          var mid = (neighbors.length - 1) / 2;\n\n          for (var z = Math.floor(mid); z <= Math.ceil(mid); z++) {\n            var nodeW = neighbors[z];\n\n            if (align[nodeV.id] === nodeV.id && r < nodeW.levelPos && !hasConflict(nodeV, nodeW)) {\n              align[nodeW.id] = nodeV.id;\n              align[nodeV.id] = root[nodeV.id] = root[nodeW.id];\n              r = nodeW.levelPos;\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      root: root,\n      align: align\n    };\n  };\n\n  BaseDAG.prototype.horizontalCompaction = function (root, align, horiz) {\n    var _this = this;\n\n    var sink = {};\n    var shift = {};\n    var x = {};\n    var blockSpaceMap = new Map();\n    this.nodesByLevel.forEach(function (nodeLevel, i) {\n      var uNode;\n      nodeLevel.forEach(function (vnode) {\n        var vRootNodeId = root[vnode.id];\n\n        if (uNode) {\n          var uRootNodeId = root[uNode.id];\n          var blockSpace = blockSpaceMap.has(vRootNodeId + \"-\" + uRootNodeId) || blockSpaceMap.has(uRootNodeId + \"-\" + vRootNodeId) ? blockSpaceMap.get(vRootNodeId + \"-\" + uRootNodeId) || blockSpaceMap.get(uRootNodeId + \"-\" + vRootNodeId) : 0;\n          var curSpace = vnode.nodeWidth / 2 + _this.config.nodeAndNodeSpace + uNode.nodeWidth / 2;\n          blockSpaceMap.set(vRootNodeId + \"-\" + uRootNodeId, Math.max(blockSpace, curSpace));\n          blockSpaceMap.set(uRootNodeId + \"-\" + vRootNodeId, Math.max(blockSpace, curSpace));\n        }\n\n        uNode = vnode;\n      });\n    });\n\n    var placeBlock = function (node) {\n      if (x[node.id] === undefined) {\n        x[node.id] = 0;\n        var w_1 = node.id;\n\n        var _loop_3 = function () {\n          var curNode = utils_1.find(_this.nodes, function (node) {\n            return node.id === w_1;\n          });\n\n          if (curNode.levelPos > 0) {\n            var preNode = _this.nodesByLevel[curNode.level][curNode.levelPos - 1];\n            var rootId_1 = root[preNode.id];\n            placeBlock(utils_1.find(_this.nodes, function (node) {\n              return node.id === rootId_1;\n            }));\n\n            if (sink[node.id] === node.id) {\n              sink[node.id] = sink[rootId_1];\n            }\n\n            if (!blockSpaceMap.has(rootId_1 + \"-\" + root[node.id]) && !blockSpaceMap.has(root[node.id] + \"-\" + rootId_1)) {\n              throw new Error(rootId_1 + \", \" + root[node.id] + \"\\u65E0\\u6CD5\\u83B7\\u53D6\");\n            }\n\n            if (sink[node.id] !== sink[rootId_1]) {\n              shift[sink[rootId_1]] = Math.min(shift[sink[rootId_1]], x[node.id] - x[rootId_1] - (blockSpaceMap.get(rootId_1 + \"-\" + root[node.id]) || blockSpaceMap.get(root[node.id] + \"-\" + rootId_1)));\n            } else {\n              x[node.id] = Math.max(x[node.id], x[rootId_1] + (blockSpaceMap.get(rootId_1 + \"-\" + root[node.id]) || blockSpaceMap.get(root[node.id] + \"-\" + rootId_1)));\n            }\n          }\n\n          w_1 = align[w_1];\n        };\n\n        do {\n          _loop_3();\n        } while (w_1 !== node.id);\n      }\n    };\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n        var id = this.nodesByLevel[i][j].id;\n        sink[id] = id;\n        shift[id] = Number.MAX_SAFE_INTEGER;\n        x[id] = undefined;\n      }\n    }\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n        var id = this.nodesByLevel[i][j].id;\n\n        if (root[id] === id) {\n          placeBlock(this.nodesByLevel[i][j]);\n        }\n      }\n    }\n\n    for (var i = 0; i < this.nodesByLevel.length; i++) {\n      for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n        var id = this.nodesByLevel[i][j].id;\n        x[id] = x[root[id]];\n\n        if (shift[sink[root[id]]] < Number.MAX_SAFE_INTEGER) {\n          x[id] = x[id] + shift[sink[root[id]]];\n        }\n      }\n    }\n\n    return x;\n  };\n\n  BaseDAG.prototype.getDirectNodesByLevel = function (vert, horiz) {\n    if (vert === 'u' && horiz === 'l') {\n      return;\n    }\n\n    if (vert === 'u' && horiz === 'r' || vert === 'd' && horiz === 'r') {\n      this.nodesByLevel = this.nodesByLevel.map(function (nodeLevel, i) {\n        return utils_1.reverseArray(nodeLevel, function (node, levelPos) {\n          node.levelPos = levelPos;\n          return node;\n        });\n      });\n    }\n\n    if (vert === 'd' && horiz === 'l') {\n      this.nodesByLevel = utils_1.reverseArray(this.nodesByLevel, function (nodeLevel, level) {\n        return utils_1.reverseArray(nodeLevel, function (node, levelPos) {\n          node.level = level;\n          node.levelPos = levelPos;\n          return node;\n        });\n      });\n    }\n  };\n\n  BaseDAG.prototype.resetLevel = function () {\n    this.nodesByLevel = utils_1.reverseArray(this.nodesByLevel, function (nodeLevel, level) {\n      return utils_1.reverseArray(nodeLevel, function (node, levelPos) {\n        node.level = level;\n        node.levelPos = levelPos;\n        return node;\n      });\n    });\n  };\n\n  BaseDAG.prototype.xcordinate = function () {\n    var _this = this;\n\n    var typeConflicts = this.findTypeConflicts();\n    var xSet = {};\n    ['u', 'd'].forEach(function (vert) {\n      ['l', 'r'].forEach(function (horiz) {\n        _this.getDirectNodesByLevel(vert, horiz);\n\n        var _a = _this.verticalAlignment(vert, typeConflicts),\n            root = _a.root,\n            align = _a.align;\n\n        var x = _this.horizontalCompaction(root, align, horiz);\n\n        if (horiz === 'r') {\n          for (var key in x) {\n            x[key] = -x[key];\n          }\n        }\n\n        xSet[vert + horiz] = x;\n      });\n    });\n    this.resetLevel();\n\n    var _a = this.findSmallestWidthAlignment(xSet),\n        smallestWidth = _a.minSet,\n        minDirect = _a.minDirect;\n\n    this.alignCoordinates(xSet, smallestWidth, minDirect);\n    var finalPosSet = this.balance(xSet);\n    var minPos = Infinity;\n    this.nodes.forEach(function (node) {\n      node.pos = finalPosSet[node.id] - node.nodeWidth / 2;\n\n      if (minPos > node.pos) {\n        minPos = node.pos;\n      }\n    });\n    this.nodes.forEach(function (node) {\n      node.pos = node.pos - minPos;\n    });\n  };\n\n  BaseDAG.prototype.findSmallestWidthAlignment = function (xSet) {\n    var minSet;\n    var minDirect;\n    var minSetValue = Number.MAX_SAFE_INTEGER;\n\n    for (var direction in xSet) {\n      var xs = xSet[direction];\n      var minValue = Number.MAX_SAFE_INTEGER;\n      var maxValue = Number.MIN_SAFE_INTEGER;\n\n      var _loop_4 = function (key) {\n        var value = xs[key];\n        var node = utils_1.find(this_2.nodes, function (node) {\n          return String(node.id) === String(key);\n        });\n        if (value + node.nodeWidth / 2 > maxValue) maxValue = value + node.nodeWidth / 2;\n        if (value - node.nodeWidth / 2 < minValue) minValue = value - node.nodeWidth / 2;\n      };\n\n      var this_2 = this;\n\n      for (var key in xs) {\n        _loop_4(key);\n      }\n\n      if (maxValue - minValue < minSetValue) {\n        minSetValue = maxValue - minValue;\n        minSet = xs;\n        minDirect = direction;\n      }\n    }\n\n    return {\n      minSet: minSet,\n      minDirect: minDirect\n    };\n  };\n\n  BaseDAG.prototype.alignCoordinates = function (xSet, smallestWidth, direct) {\n    var _a = utils_1.getObjectMaxMin(smallestWidth),\n        maxAlign = _a.maxValue,\n        minAlign = _a.minValue;\n\n    ['u', 'd'].forEach(function (vert) {\n      ['l', 'r'].forEach(function (horiz) {\n        var alignment = vert + horiz;\n\n        if (alignment !== direct) {\n          var xs = xSet[alignment];\n\n          var _a = utils_1.getObjectMaxMin(xs),\n              maxXs = _a.maxValue,\n              minXs = _a.minValue;\n\n          var delta = horiz === 'l' ? minAlign - minXs : maxAlign - maxXs;\n\n          if (delta) {\n            for (var key in xs) {\n              xs[key] = xs[key] + delta;\n            }\n          }\n        }\n      });\n    });\n  };\n\n  BaseDAG.prototype.balance = function (xSet) {\n    var posListSet = {};\n\n    for (var direction in xSet) {\n      for (var key in xSet[direction]) {\n        if (posListSet[key] && posListSet[key].length) {\n          posListSet[key].push(xSet[direction][key]);\n        } else {\n          posListSet[key] = [xSet[direction][key]];\n        }\n      }\n    }\n\n    var finalPosSet = {};\n\n    for (var key in posListSet) {\n      posListSet[key].sort(function (a, b) {\n        return a - b;\n      });\n      finalPosSet[key] = (posListSet[key][1] + posListSet[key][2]) / 2;\n    }\n\n    return finalPosSet;\n  };\n\n  BaseDAG.prototype.calcNodePos = function () {\n    this.addVirtualNode();\n    this.ordering();\n  };\n\n  BaseDAG.prototype.recoverCycle = function () {\n    var _this = this;\n\n    this.links.forEach(function (link) {\n      if (link.isReverse) {\n        _this.exchangeLink(link);\n\n        if (link.linkChildren && link.linkChildren.length) {\n          link.linkChildren.forEach(function (link) {\n            if (link.isReverse) {\n              _this.exchangeLink(link);\n            }\n          });\n        }\n      }\n    });\n  };\n\n  BaseDAG.prototype.clearCycleDfs = function (node, stack, isFirst) {\n    var lastNodeId = stack[stack.length - 1];\n\n    if (lastNodeId) {\n      if (this.dfsVisited.indexOf(lastNodeId + \"_\" + node.id) > -1) {\n        return;\n      }\n\n      this.dfsVisited.push(lastNodeId + \"_\" + node.id);\n    }\n\n    if (stack.indexOf(node.id) > -1) {\n      console.warn('当前图中存在环，已被逆转处理');\n      var link = utils_1.find(this.links, function (link) {\n        return link.source.id === lastNodeId && link.target.id === node.id;\n      });\n      link.isReverse = true;\n    }\n\n    var LinkList = isFirst ? node.sourceLinks.filter(function (link) {\n      return !link.isCycleRelation;\n    }) : node.sourceLinks;\n\n    for (var i = 0; i < LinkList.length; i++) {\n      this.clearCycleDfs(LinkList[i].target, tslib_1.__spread(stack, [node.id]), false);\n    }\n\n    return;\n  };\n\n  BaseDAG.prototype.exchangeLink = function (link) {\n    var source = link.source;\n    var target = link.target;\n    source.sourceLinks = source.sourceLinks.filter(function (link) {\n      return link.source.id !== source.id || link.target.id !== target.id || !link.isReverse;\n    });\n    source.targetLinks.push(link);\n    target.targetLinks = target.targetLinks.filter(function (link) {\n      return link.source.id !== source.id || link.target.id !== target.id || !link.isReverse;\n    });\n    target.sourceLinks.push(link);\n    link.source = target;\n    link.target = source;\n  };\n\n  BaseDAG.prototype.clearCycle = function () {\n    var _this = this;\n\n    this.dfsVisited = [];\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      this.clearCycleDfs(this.nodes[i], [], true);\n    }\n\n    this.links.forEach(function (link) {\n      if (link.isReverse) {\n        _this.exchangeLink(link);\n      }\n    });\n  };\n\n  BaseDAG.prototype.calcNodeLevels = function () {\n    var _this = this;\n\n    this.nodes.forEach(function (node) {\n      node.linkNumber = node.targetLinks.length + node.sourceLinks.length;\n      node.levelSetted = false;\n    });\n    var shrink = true;\n    var boneNodes = this.nodes;\n\n    while (shrink) {\n      shrink = false;\n      boneNodes.forEach(function (node) {\n        if (node.linkNumber === 1) {\n          shrink = true;\n          node.linkNumber = 0;\n          node.sourceLinks.forEach(function (link) {\n            link.target.linkNumber--;\n          });\n          node.targetLinks.forEach(function (link) {\n            link.source.linkNumber--;\n          });\n        }\n      });\n      boneNodes = boneNodes.filter(function (node) {\n        return node.linkNumber > 0;\n      });\n    }\n\n    boneNodes.forEach(function (node) {\n      node.isBone = true;\n    });\n    var level = 0;\n    var confirmNodeLevelList = boneNodes;\n\n    if (boneNodes.length > 0) {\n      var _loop_5 = function () {\n        var nextNodes = [];\n        confirmNodeLevelList.forEach(function (node) {\n          node.level = level;\n          node.sourceLinks.forEach(function (link) {\n            if (!utils_1.find(nextNodes, function (node) {\n              return node.id === link.target.id;\n            })) {\n              nextNodes.push(link.target);\n            }\n          });\n        });\n        confirmNodeLevelList = nextNodes;\n        level++;\n      };\n\n      while (confirmNodeLevelList.length) {\n        _loop_5();\n      }\n\n      boneNodes.forEach(function (node) {\n        var parentBoneNode = [];\n        var childrenBoneNode = [];\n        node.targetLinks.forEach(function (link) {\n          if (link.source.isBone) {\n            parentBoneNode.push(link.source);\n          }\n        });\n        node.sourceLinks.forEach(function (link) {\n          if (link.target.isBone) {\n            childrenBoneNode.push(link.target);\n          }\n        });\n        node.parentBoneNode = parentBoneNode;\n        node.childrenBoneNode = childrenBoneNode;\n        var minChildLevel = (utils_1.minBy(node.childrenBoneNode, function (boneNode) {\n          return boneNode.level;\n        }) || {}).level;\n\n        if (node.parentBoneNode.length === 0) {\n          node.level = minChildLevel - 1;\n        }\n\n        if (minChildLevel && minChildLevel - node.level > 1) {\n          if (node.childrenBoneNode.length < node.parentBoneNode.length) {\n            node.level = minChildLevel - 1;\n          }\n        }\n      });\n    } else {\n      this.nodes[0].level = 0;\n      boneNodes.push(this.nodes[0]);\n    }\n\n    boneNodes.forEach(function (node) {\n      node.levelSetted = true;\n    });\n    var waitSetLevelNodes = boneNodes;\n\n    var _loop_6 = function () {\n      var tmpNodeList = [];\n      waitSetLevelNodes.forEach(function (node) {\n        node.sourceLinks.forEach(function (link) {\n          var targetNode = link.target;\n\n          if (!targetNode.levelSetted) {\n            targetNode.level = node.level + 1;\n            node.levelSetted = true;\n            tmpNodeList.push(targetNode);\n          }\n        });\n        node.targetLinks.forEach(function (link) {\n          var sourceNode = link.source;\n\n          if (!sourceNode.levelSetted) {\n            sourceNode.level = node.level - 1;\n            node.levelSetted = true;\n            tmpNodeList.push(sourceNode);\n          }\n        });\n      });\n      waitSetLevelNodes = tmpNodeList;\n    };\n\n    while (waitSetLevelNodes.length) {\n      _loop_6();\n    }\n\n    var minLevel = utils_1.minBy(this.nodes, function (node) {\n      return node.level;\n    }).level;\n    this.nodes.forEach(function (node) {\n      node.level -= minLevel;\n    });\n    var maxLevel = utils_1.maxBy(this.nodes, function (node) {\n      return node.level;\n    }).level;\n    this.nodesLevelMaxHeight = Array(maxLevel + 1).fill(-Infinity);\n    this.nodes.forEach(function (node) {\n      if (_this.nodesLevelMaxHeight[node.level] < node.nodeHeight) {\n        _this.nodesLevelMaxHeight[node.level] = node.nodeHeight;\n      }\n    });\n  };\n\n  return BaseDAG;\n}();\n\nexports.default = BaseDAG;","map":{"version":3,"sources":["../../../src/BaseLayout/DAG/BaseDAG.ts"],"names":[],"mappings":";;;;;;;;AAcA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAQA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAM,cAAc,GAAG,EAAvB;;AAEA,IAAA,OAAA,GAAA,YAAA;AAkCE,WAAA,OAAA,CAAY,EAAZ,EAUC;QATC,KAAA,GAAA,EAAA,CAAA,K;QACA,KAAA,GAAA,EAAA,CAAA,K;QACA,SAAA,GAAA,EAAA,CAAA,S;QACA,MAAA,GAAA,EAAA,CAAA,M;AA3BM,SAAA,SAAA,GAAoB,CAApB;AASA,SAAA,UAAA,GAAuB,EAAvB;AACA,SAAA,aAAA,GAA0B,EAA1B;AAGA,SAAA,QAAA,GAAW,IAAI,GAAJ,EAAX;AAEA,SAAA,YAAA,GAAwD,EAAxD;AAEA,SAAA,mBAAA,GAAgC,EAAhC;AAEA,SAAA,UAAA,GAAuB,EAAvB;AAeN,SAAK,KAAL,GAAa,KAAK,CAAC,KAAN,GAAc,IAAd,CAAmB,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC3C,aAAO,KAAK,CAAC,EAAN,GAAW,KAAK,CAAC,EAAjB,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACD,KAFY,CAAb;AAGA,SAAK,KAAL,GAAa,KAAK,CAAC,KAAN,GAAc,IAAd,CAAmB,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC3C,aAAU,KAAK,CAAC,MAAN,CAAa,EAAb,GAAe,GAAf,GAAmB,KAAK,CAAC,MAAN,CAAa,EAAhC,GACL,KAAK,CAAC,MAAN,CAAa,EAAb,GAAe,GAAf,GAAmB,KAAK,CAAC,MAAN,CAAa,EAD3B,GAEN,CAFM,GAGN,CAAC,CAHL;AAID,KALY,CAAb;AAMA,SAAK,SAAL,GAAiB,SAAS,CAAC,KAAV,EAAjB;AACA,SAAK,MAAL,GAAW,OAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,MAAR,CAAX;AACD;;AAED,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,YAAL,GAAoB,IAApB;AACA,SAAK,mBAAL,GAA2B,IAA3B;AACD,GAND;;AAQA,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,GAAxB,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;;AAEE,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,MAAA,IAAI,CAAC,QAAL,GAAgB;AACd,QAAA,CAAC,EAAE,IAAI,CAAC,GAAL,GAAW,IADA;AAId,QAAA,CAAC,EACC,KAAI,CAAC,UAAL,CAAgB,IAAI,CAAC,KAArB,IACA,GADA,GAEA,KAAI,CAAC,mBAAL,CAAyB,MAAzB,CAAgC,UAAC,GAAD,EAAM,MAAN,EAAc,KAAd,EAAmB;AACjD,cAAI,KAAK,GAAG,IAAI,CAAC,KAAjB,EACE,OAAO,GAAG,GAAG,KAAI,CAAC,mBAAL,CAAyB,KAAzB,CAAb;AACF,iBAAO,GAAP;AACD,SAJD,EAIG,CAJH,CAFA,GAOA,CAAC,KAAI,CAAC,mBAAL,CAAyB,IAAI,CAAC,KAA9B,IAAuC,IAAI,CAAC,UAA7C,IAA2D;AAZ/C,OAAhB;AAcD,KAfD;AAiBA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,UAAI,IAAI,CAAC,YAAL,IAAqB,IAAI,CAAC,YAAL,CAAkB,MAA3C,EAAmD;AACjD,QAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,YAAL,CAAkB,MAAlB,CAAyB,UAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAmB;AAC3D,cAAI,KAAK,KAAK,CAAd,EAAiB;AACf,mBAAO,KAAI,CAAC,WAAL,CAAiB,YAAjB,CAA8B,KAA9B,EAAqC,KAAI,CAAC,aAA1C,EAAyD,KAAzD,EAAgE,IAAhE,CAAP;AACD;;AACD,iBAAO,IAAI,CAAC,MAAL,CAAY,KAAI,CAAC,WAAL,CAAiB,YAAjB,CAA8B,KAA9B,EAAqC,KAAI,CAAC,aAA1C,EAAyD,KAAK,KAAK,IAAI,CAAC,YAAL,CAAkB,MAAlB,GAA2B,CAA9F,EAAiG,KAAjG,CAAZ,CAAP;AACD,SALgB,EAKd,EALc,CAAjB;AAMD,OAPD,MAOO;AACL,QAAA,IAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,EAAoC,KAAI,CAAC,aAAzC,EAAwD,IAAxD,EAA8D,IAA9D,CAAjB;AACD;AACF,KAXD;AAaA,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,IAAA,EAAI;AACzB,MAAA,IAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,WAAL,CAAiB,gBAAjB,CAAkC,IAAlC,CAAjB;AACD,KAFD;AAKA,SAAK,YAAL;AAEA,WAAO;AACL,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAA,IAAA,EAAI;AAAI,eAAA,IAAI,CAAC,IAAL,KAAA,SAAA;AAAuB,OAAjD,EAAmD,GAAnD,CAAuD,UAAA,IAAA,EAAI;AAEhE,eAAO;AACL,UAAA,EAAE,EAAE,IAAI,CAAC,EADJ;AAEL,UAAA,IAAI,EAAE;AACJ,YAAA,CAAC,EAAE,IAAI,CAAC,QAAL,CAAc,CADb;AAEJ,YAAA,CAAC,EAAE,IAAI,CAAC,QAAL,CAAc;AAFb,WAFD;AAML,UAAA,SAAS,EAAE,IAAI,CAAC,SANX;AAOL,UAAA,UAAU,EAAE,IAAI,CAAC,UAPZ;AAQL,UAAA,IAAI,EAAE,IAAI,CAAC;AARN,SAAP;AAUD,OAZM,CADF;AAcL,MAAA,KAAK,EAAA,OAAA,CAAA,QAAA,CACA,KAAK,KAAL,CACA,MADA,CAEC,UAAA,IAAA,EAAI;AACF,eAAA,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,SAArB,IAAkC,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,SAAvD;AAAgE,OAHnE,EAKA,GALA,CAKI,UAAA,IAAA,EAAI;AACP,eAAO;AACL,UAAA,QAAQ,EAAE,IAAI,CAAC,MAAL,CAAY,EADjB;AAEL,UAAA,QAAQ,EAAE,IAAI,CAAC,MAAL,CAAY,EAFjB;AAGL,UAAA,IAAI,EAAE,IAAI,CAAC,SAHN;AAIL,UAAA,IAAI,EAAE,IAAI,CAAC;AAJN,SAAP;AAMD,OAZA,CADA,EAcA,KAAK,SAAL,CAAe,GAAf,CAAmB,UAAA,IAAA,EAAI;AACxB,eAAO;AACL,UAAA,QAAQ,EAAE,IAAI,CAAC,MAAL,CAAY,EADjB;AAEL,UAAA,QAAQ,EAAE,IAAI,CAAC,MAAL,CAAY,EAFjB;AAGL,UAAA,IAAI,EAAE,IAAI,CAAC,SAHN;AAIL,UAAA,IAAI,EAAE,IAAI,CAAC;AAJN,SAAP;AAMD,OAPE,CAdA,CAdA;AAqCL,MAAA,GAAG,EAAE;AACH,QAAA,KAAK,EAAE,KAAK,KADT;AAEH,QAAA,MAAM,EAAE,KAAK;AAFV;AArCA,KAAP;AA0CD,GAjFD;;AAmFA,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,GAAA,YAAA;AAEE,SAAK,UAAL;AAEA,SAAK,cAAL;AAEA,SAAK,WAAL;AAEA,SAAK,UAAL;AAEA,SAAK,WAAL;AAEA,SAAK,YAAL;AAEA,WAAO,IAAP;AACD,GAfD;;AAiBA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,KAAK,EAAE,KAAK,KADP;AAEL,MAAA,MAAM,EAAE,KAAK;AAFR,KAAP;AAID,GALD;;AAOA,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACQ,QAAA,EAAA,GAAA,KAAA,MAAA;AAAA,QAAE,QAAA,GAAA,EAAA,CAAA,QAAF;AAAA,QAAY,OAAA,GAAA,EAAA,CAAA,OAAZ;AACN,QAAM,SAAS,GAAG,MAAA,CAAA,OAAA,CAAc,QAAd,EAAwB,OAAxB,CAAlB;AACA,SAAK,WAAL,GAAmB,IAAI,SAAJ,CAAc,KAAK,YAAnB,EAAiC,KAAK,SAAtC,EAAiD,KAAK,MAAtD,CAAnB;AACA,SAAK,aAAL,GAAqB,KAAK,WAAL,CAAiB,iBAAjB,EAArB;AACD,GALD;;AAOA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,GAAG,GAAG,CAAV;AAEA,SAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAC,OAAD,EAAU,KAAV,EAAe;AACxC,MAAA,KAAI,CAAC,UAAL,CAAgB,KAAhB,IAAyB,GAAzB;AACA,MAAA,GAAG,IAAI,OAAP;AACD,KAHD;AAMA,SAAK,MAAL,GACE,KAAK,UAAL,CAAgB,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAzC,IACA,OAAA,CAAA,KAAA,CAAM,KAAK,mBAAX,EAAgC,UAAA,MAAA,EAAM;AAAI,aAAA,MAAA;AAAM,KAAhD,CAFF;AAGA,SAAK,KAAL,GACE,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAC,GAAD,EAAM,OAAN,EAAa;AAC7B,aAAO,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,SAAtB,GAAkC,GAAlC,GACH,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,SADnB,GAEH,GAFJ;AAGD,KAJD,EAIG,CAJH,IAKA,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAC,GAAD,EAAM,OAAN,EAAa;AAC7B,aAAO,OAAO,CAAC,GAAR,GAAc,GAAd,GAAoB,OAAO,CAAC,GAA5B,GAAkC,GAAzC;AACD,KAFD,EAEG,CAFH,CANF;AASD,GArBD;;AAuBA,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,YAAY,GAA0C,EAA5D;AACA,QAAM,YAAY,GAA0C,EAA5D;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,UAAM,MAAM,GAAG,IAAI,CAAC,MAApB;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,MAApB;AAEA,UAAM,WAAW,GAAG,MAAM,CAAC,KAA3B;AACA,UAAM,WAAW,GAAG,MAAM,CAAC,KAA3B;AAEA,MAAA,IAAI,CAAC,YAAL,GAAoB,EAApB;;AAEA,UAAI,WAAW,GAAG,CAAd,GAAkB,WAAtB,EAAmC;AACjC,aAAK,IAAI,CAAC,GAAG,WAAW,GAAG,CAA3B,EAA8B,CAAC,GAAG,WAAlC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,cAAM,WAAW,GAAwC;AACvD,YAAA,EAAE,EAAE,YAAU,KAAI,CAAC,SAAL,EADyC;AAEvD,YAAA,WAAW,EAAE,EAF0C;AAGvD,YAAA,WAAW,EAAE,EAH0C;AAIvD,YAAA,IAAI,EAAE,SAJiD;AAKvD,YAAA,SAAS,EAAE,KAAI,CAAC,MAAL,CAAY,uBALgC;AAMvD,YAAA,UAAU,EAAE,KAAI,CAAC,mBAAL,CAAyB,CAAzB,CAN2C;AAOvD,YAAA,UAAU,EAAE,EAP2C;AAQvD,YAAA,KAAK,EAAE;AARgD,WAAzD;AAUA,cAAM,UAAU,GACd,CAAC,KAAK,WAAW,GAAG,CAApB,GACI,MADJ,GAEI,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAHlB;AAIA,cAAM,WAAW,GAAwC;AACvD,YAAA,MAAM,EAAE,UAD+C;AAEvD,YAAA,MAAM,EAAE,WAF+C;AAGvD,YAAA,UAAU,EAAE,EAH2C;AAIvD,YAAA,SAAS,EAAE,IAAI,CAAC;AAJuC,WAAzD;AAMA,UAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,WAAvB;AACA,UAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;AACA,UAAA,UAAU,CAAC,WAAX,CAAuB,IAAvB,CAA4B,WAA5B;AACA,UAAA,WAAW,CAAC,WAAZ,CAAwB,IAAxB,CAA6B,WAA7B;;AACA,cAAI,CAAC,KAAK,WAAW,GAAG,CAAxB,EAA2B;AACzB,gBAAM,aAAW,GAAwC;AACvD,cAAA,MAAM,EAAE,WAD+C;AAEvD,cAAA,MAAM,EAAA,MAFiD;AAGvD,cAAA,UAAU,EAAE,EAH2C;AAIvD,cAAA,SAAS,EAAE,IAAI,CAAC;AAJuC,aAAzD;AAMA,YAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,aAAvB;AACA,YAAA,YAAY,CAAC,IAAb,CAAkB,aAAlB;AACA,YAAA,WAAW,CAAC,WAAZ,CAAwB,IAAxB,CAA6B,aAA7B;AACA,YAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,aAAxB;AACD;;AACD,UAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;AACD;AACF;AACF,KAlDD;AAoDA,SAAK,KAAL,GAAU,OAAA,CAAA,QAAA,CAAO,KAAK,KAAZ,EAAsB,YAAtB,CAAV;AACA,SAAK,KAAL,GAAU,OAAA,CAAA,QAAA,CAAO,KAAK,KAAZ,EAAsB,YAAtB,CAAV;AACD,GAzDD;;AA2DA,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAkD;AAAlD,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,UAAL,CAAgB,OAAhB,CAAwB,IAAI,CAAC,EAA7B,IAAmC,CAAC,CAAxC,EAA2C;AAE3C,QAAM,GAAG,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,CAAC,KAAvB,CAAZ;AACA,IAAA,IAAI,CAAC,QAAL,GAAgB,GAAhB;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,GAAjB;AACA,SAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,CAAC,KAAvB,EAA8B,GAAG,GAAG,CAApC;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,CAAC,EAA1B;AAEA,IAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AACnB,UAAA,MAAA,GAAA,IAAA,CAAA,MAAA;AAAA,UAAQ,MAAA,GAAA,IAAA,CAAA,MAAR;;AAGR,UAAI,MAAM,CAAC,KAAP,GAAe,MAAM,CAAC,KAAtB,KAAgC,CAApC,EAAuC;AACrC,QAAA,KAAI,CAAC,QAAL,CAAc,MAAd;AACD;AACF,KAPD;AAQD,GAjBD;;AAmBA,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAEE,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,UAAM,KAAK,GAAG,IAAI,CAAC,KAAnB;;AACA,UAAI,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B,QAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,EAAyB,IAAzB,CAA8B,IAA9B;AACD,OAFD,MAEO;AACL,QAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,IAA2B,CAAC,IAAD,CAA3B;;AACA,QAAA,KAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,KAAlB,EAAyB,CAAzB;AACD;AACF,KARD;AAWA,SAAK,UAAL,GAAkB,EAAlB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AACpD,YAAI,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,QAAxB,KAAqC,SAAzC,EAAoD;AAClD,eAAK,QAAL,CAAc,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AACD;AACF;AACF;AACF,GArBD;;AAuBA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,KAAR,EAAqB;AAKnB,aAAS,eAAT,CAAyB,SAAzB,EAAyE;AACvE,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,IAAA,EAAI;AAEpB,YAAM,UAAU,GAAG,IAAI,CAAC,WAAL,CAChB,MADgB,CACT,UAAA,IAAA,EAAI;AACV,iBAAO,IAAI,CAAC,MAAL,CAAY,KAAZ,GAAoB,IAAI,CAAC,MAAL,CAAY,KAAhC,KAA0C,CAAjD;AACD,SAHgB,EAIhB,GAJgB,CAIZ,UAAA,IAAA,EAAI;AAAI,iBAAA,IAAI,CAAJ,MAAA;AAAW,SAJP,CAAnB;AAKA,QAAA,UAAU,CAAC,IAAX,CAAgB,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC3B,iBAAO,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAA9B;AACD,SAFD;AAIA,YAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,UAAU,CAAC,MAAX,GAAoB,CAA/B,CAAV;;AACA,YAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,UAAA,IAAI,CAAC,OAAL,GAAe,CAAC,CAAhB;AACD,SAFD,MAEO,IAAI,UAAU,CAAC,MAAX,GAAoB,CAApB,KAA0B,CAA9B,EAAiC;AACtC,UAAA,IAAI,CAAC,OAAL,GAAe,UAAU,CAAC,CAAD,CAAV,CAAc,QAA7B;AACD,SAFM,MAEA,IAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAClC,UAAA,IAAI,CAAC,OAAL,GAAe,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,QAAd,GAAyB,UAAU,CAAC,CAAD,CAAV,CAAc,QAAxC,IAAoD,CAAnE;AACD,SAFM,MAEA;AACL,cAAM,IAAI,GAAG,UAAU,CAAC,CAAC,GAAG,CAAL,CAAV,CAAkB,QAAlB,GAA6B,UAAU,CAAC,CAAD,CAAV,CAAc,QAAxD;AACA,cAAM,KAAK,GAAG,UAAU,CAAC,UAAU,CAAC,MAAX,GAAoB,CAArB,CAAV,CAAkC,QAAlC,GAA6C,UAAU,CAAC,CAAD,CAAV,CAAc,QAAzE;AACA,UAAA,IAAI,CAAC,OAAL,GAAe,CAAC,UAAU,CAAC,CAAC,GAAG,CAAL,CAAV,CAAkB,QAAlB,GAA6B,KAA7B,GAAqC,UAAU,CAAC,CAAD,CAAV,CAAc,QAAd,GAAyB,IAA/D,KAAwE,IAAI,GAAG,KAA/E,CAAf;AACD;AACF,OAvBD;AAwBD;;AAGD,QAAI,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AACnB,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,YAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,CAAlB,CAAlB;AACA,QAAA,eAAe,CAAC,SAAD,CAAf;AAEA,aAAK,YAAL,CAAkB,CAAlB,IAAuB,OAAA,CAAA,aAAA,CAAc,SAAd,CAAvB;AACD;;AACD;AACD,KARD,MAQO;AACL,WAAK,IAAI,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAlB,GAA2B,CAAxC,EAA2C,CAAC,IAAI,CAAhD,EAAmD,CAAC,EAApD,EAAwD;AACtD,YAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,CAAlB,CAAlB;AACA,QAAA,eAAe,CAAC,SAAD,CAAf;AACA,aAAK,YAAL,CAAkB,CAAlB,IAAuB,OAAA,CAAA,aAAA,CAAc,SAAd,CAAvB;AACD;AACF;AACF,GAhDD;;AAmDA,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAI,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,MAAA,KAAK,IAAI,OAAA,CAAA,QAAA,CACP,KAAK,YAAL,CAAkB,CAAC,GAAG,CAAtB,CADO,EAEP,KAAK,YAAL,CAAkB,CAAlB,CAFO,CAAT;AAID;;AACD,WAAO,KAAP;AACD,GATD;;AAYA,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,QAAI,SAAS,GAAG,KAAK,QAAL,EAAhB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,UAAI,KAAK,YAAL,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;;AACpC,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAEpD,aAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,SAAxB,GAAoC,CAAC,GAAG,CAAxC;AACA,aAAK,YAAL,CAAkB,CAAlB,EAAqB,CAAC,GAAG,CAAzB,EAA4B,SAA5B,GAAwC,CAAxC;AACA,YAAI,YAAY,GAAG,KAAK,QAAL,EAAnB;;AACA,YAAI,YAAY,GAAG,SAAnB,EAA8B;AAE5B,cAAM,OAAO,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAAhB;AACA,eAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,IAA0B,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAAC,GAAG,CAAzB,CAA1B;AACA,eAAK,YAAL,CAAkB,CAAlB,EAAqB,CAAC,GAAG,CAAzB,IAA8B,OAA9B;AACA,UAAA,SAAS,GAAG,YAAZ;AACD,SAND,MAMO;AAEL,eAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,SAAxB,GAAoC,CAApC;AACA,eAAK,YAAL,CAAkB,CAAlB,EAAqB,CAAC,GAAG,CAAzB,EAA4B,SAA5B,GAAwC,CAAC,GAAG,CAA5C;AACD;AACF;AACF;;AACD,WAAO,SAAP;AACD,GAxBD;;AAiCA,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AAEE,SAAK,SAAL;AACA,QAAI,SAAS,GAAG,KAAK,QAAL,EAAhB;;AACA,QAAI,SAAS,KAAK,CAAlB,EAAqB;AACnB,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,cAArB,EAAqC,CAAC,EAAtC,EAA0C;AACxC,aAAK,OAAL,CAAa,CAAb;AACA,YAAM,YAAY,GAAG,KAAK,SAAL,EAArB;;AACA,YAAI,SAAS,GAAG,YAAhB,EAA8B;AAC5B,UAAA,SAAS,GAAG,YAAZ;AAEA,eAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAC,SAAD,EAAY,CAAZ,EAAa;AACrC,YAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,IAAA,EAAI;AAAI,qBAAC,IAAI,CAAC,QAAL,GAAgB,IAAI,CAArB,SAAA;AAAgC,aAA1D;AACA,YAAA,SAAS,CAAC,IAAV,CAAe,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC1B,qBAAO,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAA9B;AACD,aAFD;AAGD,WALD;AAMD;AACF;AACF;;AAED,SAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAC,SAAD,EAAY,CAAZ,EAAa;AACrC,MAAA,SAAS,CAAC,IAAV,CAAe,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC1B,eAAO,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAA9B;AACD,OAFD;AAGD,KAJD;AAKD,GA1BD;;AA4BA,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,QAAM,SAAS,GAA0C,EAAzD;;4BAGS,C,EAAC;AACR,UAAI,EAAE,GAAG,CAAT;AACA,UAAI,OAAO,GAAG,CAAd;AACA,UAAI,eAAe,GAAG,MAAA,CAAK,YAAL,CAAkB,CAAC,GAAG,CAAtB,EAAyB,MAA/C;;8BAGS,C,EAAC;AACR,YAAI,IAAI,GAAG,MAAA,CAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAAX;AAEA,YAAM,aAAa,GACjB,IAAI,CAAC,IAAL,KAAc,SAAd,IACA,IAAI,CAAC,WAAL,CAAiB,MAAjB,CAAwB,UAAA,IAAA,EAAI;AAC1B,iBACE,IAAI,CAAC,MAAL,CAAY,KAAZ,GAAoB,IAAI,CAAC,MAAL,CAAY,KAAhC,KAA0C,CAA1C,IACA,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,SAFvB;AAID,SALD,CAFF;AAQA,YAAM,aAAa,GACjB,aAAa,IAAI,aAAa,CAAC,MAA/B,GACI,aAAa,CAAC,CAAD,CAAb,CAAiB,MADrB,GAEI,SAHN;AAIA,YAAI,EAAE,GAAG,aAAa,GAAG,aAAa,CAAC,QAAjB,GAA4B,eAAlD;;AAKA,YAAI,aAAa,IAAI,CAAC,KAAK,MAAA,CAAK,YAAL,CAAkB,CAAlB,EAAqB,MAArB,GAA8B,CAAzD,EAA4D;AAC1D,UAAA,MAAA,CAAK,YAAL,CAAkB,CAAlB,EAAqB,KAArB,CAA2B,OAA3B,EAAoC,CAAC,GAAG,CAAxC,EAA2C,OAA3C,CAAmD,UAAA,OAAA,EAAO;AAExD,gBAAM,UAAU,GAAG,OAAO,CAAC,WAAR,CAChB,MADgB,CACT,UAAA,IAAA,EAAI;AAAI,qBAAA,IAAI,CAAC,MAAL,CAAY,KAAZ,GAAoB,IAAI,CAAC,MAAL,CAAY,KAAhC,KAAA,CAAA;AAA2C,aAD1C,EAEhB,GAFgB,CAEZ,UAAA,IAAA,EAAI;AAAI,qBAAA,IAAI,CAAJ,MAAA;AAAW,aAFP,CAAnB;AAGA,YAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,SAAA,EAAS;AAC1B,kBAAM,GAAG,GAAG,SAAS,CAAC,QAAtB;;AACA,kBACE,CAAC,GAAG,GAAG,EAAN,IAAY,EAAE,GAAG,GAAlB,KACA,EAAE,SAAS,CAAC,IAAV,KAAmB,SAAnB,IAAgC,OAAO,CAAC,IAAR,KAAiB,SAAnD,CAFF,EAGE;AACA,gBAAA,SAAS,CAAC,IAAV,CACE,OAAA,CAAA,IAAA,CACE,OAAO,CAAC,WADV,EAEE,UAAA,IAAA,EAAI;AACF,yBAAA,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,SAAS,CAAC,EAA7B,IACA,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,OAAO,CAAC,EAD3B;AAC6B,iBAJjC,CADF;AAQD;AACF,aAfD;AAgBD,WArBD;AAsBA,UAAA,OAAO,GAAG,CAAC,GAAG,CAAd;AACA,UAAA,EAAE,GAAG,EAAL;AACD;;;AA7CH,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAA,CAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAoD;gBAA3C,C;AA8CR;;;;;AApDH,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAiD;cAAxC,C;AAqDR;;AAED,WAAO,SAAP;AACD,GA5DD;;AA8DA,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,IADF,EAEE,aAFF,EAEsD;AAEpD,QAAM,IAAI,GAAG,EAAb;AACA,QAAM,KAAK,GAAG,EAAd;;AAEA,aAAS,WAAT,CACE,KADF,EAEE,KAFF,EAE4C;AAE1C,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC7C,YAAM,IAAI,GAAG,aAAa,CAAC,CAAD,CAA1B;;AACA,YACG,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,KAAK,CAAC,EAAzB,IAA+B,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,KAAK,CAAC,EAAzD,IACC,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,KAAK,CAAC,EAAzB,IAA+B,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,KAAK,CAAC,EAF3D,EAGE;AACA,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;;AAGD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAC5C,YAAA,EAAA,GAAA,KAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACR,QAAA,IAAI,CAAC,EAAD,CAAJ,GAAW,EAAX;AACA,QAAA,KAAK,CAAC,EAAD,CAAL,GAAY,EAAZ;AACD;AACF;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AAEjD,UAAI,CAAC,GAAG,CAAC,CAAT;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AACpD,YAAM,KAAK,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AAEA,YAAI,SAAS,GACX,IAAI,KAAK,GAAT,GACI,KAAK,CAAC,WAAN,CACG,MADH,CACU,UAAA,IAAA,EAAI;AACV,iBAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,MAAL,CAAY,KAAZ,GAAoB,IAAI,CAAC,MAAL,CAAY,KAAzC,MAAoD,CAA3D;AACD,SAHH,EAIG,GAJH,CAIO,UAAA,IAAA,EAAI;AAAI,iBAAA,IAAI,CAAJ,MAAA;AAAW,SAJ1B,CADJ,GAMI,KAAK,CAAC,WAAN,CACG,MADH,CACU,UAAA,IAAA,EAAI;AACV,iBAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,MAAL,CAAY,KAAZ,GAAoB,IAAI,CAAC,MAAL,CAAY,KAAzC,MAAoD,CAA3D;AACD,SAHH,EAIG,GAJH,CAIO,UAAA,IAAA,EAAI;AAAI,iBAAA,IAAI,CAAJ,MAAA;AAAW,SAJ1B,CAPN;;AAaA,YAAI,SAAS,IAAI,SAAS,CAAC,MAA3B,EAAmC;AACjC,UAAA,SAAS,CAAC,IAAV,CAAe,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC1B,mBAAO,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAA9B;AACD,WAFD;AAIA,cAAM,GAAG,GAAG,CAAC,SAAS,CAAC,MAAV,GAAmB,CAApB,IAAyB,CAArC;;AACA,eAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAb,EAA8B,CAAC,IAAI,IAAI,CAAC,IAAL,CAAU,GAAV,CAAnC,EAAmD,CAAC,EAApD,EAAwD;AACtD,gBAAM,KAAK,GAAG,SAAS,CAAC,CAAD,CAAvB;;AACA,gBACE,KAAK,CAAC,KAAK,CAAC,EAAP,CAAL,KAAoB,KAAK,CAAC,EAA1B,IACA,CAAC,GAAG,KAAK,CAAC,QADV,IAEA,CAAC,WAAW,CAAC,KAAD,EAAQ,KAAR,CAHd,EAIE;AACA,cAAA,KAAK,CAAC,KAAK,CAAC,EAAP,CAAL,GAAkB,KAAK,CAAC,EAAxB;AACA,cAAA,KAAK,CAAC,KAAK,CAAC,EAAP,CAAL,GAAkB,IAAI,CAAC,KAAK,CAAC,EAAP,CAAJ,GAAiB,IAAI,CAAC,KAAK,CAAC,EAAP,CAAvC;AACA,cAAA,CAAC,GAAG,KAAK,CAAC,QAAV;AACD;AACF;AACF;AACF;AACF;;AAED,WAAO;AACL,MAAA,IAAI,EAAA,IADC;AAEL,MAAA,KAAK,EAAA;AAFA,KAAP;AAID,GA7ED;;AA+EA,EAAA,OAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,IAArB,EAAgC,KAAhC,EAA4C,KAA5C,EAA4D;AAA5D,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,IAAI,GAAG,EAAb;AACA,QAAM,KAAK,GAAG,EAAd;AACA,QAAM,CAAC,GAAG,EAAV;AAGA,QAAM,aAAa,GAAwB,IAAI,GAAJ,EAA3C;AACA,SAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAC,SAAD,EAAY,CAAZ,EAAa;AACrC,UAAI,KAAJ;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,KAAD,EAAM;AACtB,YAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,EAAP,CAAxB;;AACA,YAAI,KAAJ,EAAW;AACT,cAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,EAAP,CAAxB;AACA,cAAM,UAAU,GAAG,aAAa,CAAC,GAAd,CAAqB,WAAW,GAAA,GAAX,GAAe,WAApC,KAAsD,aAAa,CAAC,GAAd,CAAqB,WAAW,GAAA,GAAX,GAAe,WAApC,CAAtD,GACjB,aAAa,CAAC,GAAd,CAAqB,WAAW,GAAA,GAAX,GAAe,WAApC,KAAsD,aAAa,CAAC,GAAd,CAAqB,WAAW,GAAA,GAAX,GAAe,WAApC,CADrC,GAC0F,CAD7G;AAEA,cAAM,QAAQ,GAAG,KAAK,CAAC,SAAN,GAAkB,CAAlB,GAAsB,KAAI,CAAC,MAAL,CAAY,gBAAlC,GAAqD,KAAK,CAAC,SAAN,GAAkB,CAAxF;AACA,UAAA,aAAa,CAAC,GAAd,CAAqB,WAAW,GAAA,GAAX,GAAe,WAApC,EAAmD,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,QAArB,CAAnD;AACA,UAAA,aAAa,CAAC,GAAd,CAAqB,WAAW,GAAA,GAAX,GAAe,WAApC,EAAmD,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,QAArB,CAAnD;AACD;;AACD,QAAA,KAAK,GAAG,KAAR;AACD,OAXD;AAYD,KAdD;;AAgBA,QAAM,UAAU,GAAG,UAAC,IAAD,EAA0C;AAC3D,UAAI,CAAC,CAAC,IAAI,CAAC,EAAN,CAAD,KAAe,SAAnB,EAA8B;AAC5B,QAAA,CAAC,CAAC,IAAI,CAAC,EAAN,CAAD,GAAa,CAAb;AACA,YAAI,GAAC,GAAG,IAAI,CAAC,EAAb;;;AAGE,cAAM,OAAO,GAAG,OAAA,CAAA,IAAA,CAAK,KAAI,CAAC,KAAV,EAAiB,UAAA,IAAA,EAAI;AAAI,mBAAA,IAAI,CAAC,EAAL,KAAA,GAAA;AAAa,WAAtC,CAAhB;;AACA,cAAI,OAAO,CAAC,QAAR,GAAmB,CAAvB,EAA0B;AAExB,gBAAM,OAAO,GAAG,KAAI,CAAC,YAAL,CAAkB,OAAO,CAAC,KAA1B,EACd,OAAO,CAAC,QAAR,GAAmB,CADL,CAAhB;AAIA,gBAAM,QAAM,GAAG,IAAI,CAAC,OAAO,CAAC,EAAT,CAAnB;AACA,YAAA,UAAU,CAAC,OAAA,CAAA,IAAA,CAAK,KAAI,CAAC,KAAV,EAAiB,UAAA,IAAA,EAAI;AAAI,qBAAA,IAAI,CAAC,EAAL,KAAA,QAAA;AAAkB,aAA3C,CAAD,CAAV;;AACA,gBAAI,IAAI,CAAC,IAAI,CAAC,EAAN,CAAJ,KAAkB,IAAI,CAAC,EAA3B,EAA+B;AAC7B,cAAA,IAAI,CAAC,IAAI,CAAC,EAAN,CAAJ,GAAgB,IAAI,CAAC,QAAD,CAApB;AACD;;AACD,gBAAI,CAAC,aAAa,CAAC,GAAd,CAAqB,QAAM,GAAA,GAAN,GAAU,IAAI,CAAC,IAAI,CAAC,EAAN,CAAnC,CAAD,IAAoD,CAAC,aAAa,CAAC,GAAd,CAAqB,IAAI,CAAC,IAAI,CAAC,EAAN,CAAJ,GAAa,GAAb,GAAiB,QAAtC,CAAzD,EAA0G;AACxG,oBAAM,IAAI,KAAJ,CAAa,QAAM,GAAA,IAAN,GAAW,IAAI,CAAC,IAAI,CAAC,EAAN,CAAf,GAAwB,0BAArC,CAAN;AACD;;AACD,gBAAI,IAAI,CAAC,IAAI,CAAC,EAAN,CAAJ,KAAkB,IAAI,CAAC,QAAD,CAA1B,EAAoC;AAClC,cAAA,KAAK,CAAC,IAAI,CAAC,QAAD,CAAL,CAAL,GAAsB,IAAI,CAAC,GAAL,CACpB,KAAK,CAAC,IAAI,CAAC,QAAD,CAAL,CADe,EAEpB,CAAC,CAAC,IAAI,CAAC,EAAN,CAAD,GAAa,CAAC,CAAC,QAAD,CAAd,IAA0B,aAAa,CAAC,GAAd,CAAqB,QAAM,GAAA,GAAN,GAAU,IAAI,CAAC,IAAI,CAAC,EAAN,CAAnC,KAAmD,aAAa,CAAC,GAAd,CAAqB,IAAI,CAAC,IAAI,CAAC,EAAN,CAAJ,GAAa,GAAb,GAAiB,QAAtC,CAA7E,CAFoB,CAAtB;AAID,aALD,MAKO;AACL,cAAA,CAAC,CAAC,IAAI,CAAC,EAAN,CAAD,GAAa,IAAI,CAAC,GAAL,CACX,CAAC,CAAC,IAAI,CAAC,EAAN,CADU,EAEX,CAAC,CAAC,QAAD,CAAD,IAAa,aAAa,CAAC,GAAd,CAAqB,QAAM,GAAA,GAAN,GAAU,IAAI,CAAC,IAAI,CAAC,EAAN,CAAnC,KAAmD,aAAa,CAAC,GAAd,CAAqB,IAAI,CAAC,IAAI,CAAC,EAAN,CAAJ,GAAa,GAAb,GAAiB,QAAtC,CAAhE,CAFW,CAAb;AAID;AACF;;AACD,UAAA,GAAC,GAAG,KAAK,CAAC,GAAD,CAAT;;;AA7BF,WAAA;;SAAA,QA+BS,GAAC,KAAK,IAAI,CAAC,EA/BpB;AAgCD;AACF,KArCD;;AAwCA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAC5C,YAAA,EAAA,GAAA,KAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACR,QAAA,IAAI,CAAC,EAAD,CAAJ,GAAW,EAAX;AACA,QAAA,KAAK,CAAC,EAAD,CAAL,GAAY,MAAM,CAAC,gBAAnB;AACA,QAAA,CAAC,CAAC,EAAD,CAAD,GAAQ,SAAR;AACD;AACF;;AAGD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAC5C,YAAA,EAAA,GAAA,KAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;;AACR,YAAI,IAAI,CAAC,EAAD,CAAJ,KAAa,EAAjB,EAAqB;AACnB,UAAA,UAAU,CAAC,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CAAD,CAAV;AACD;AACF;AACF;;AAGD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,YAAL,CAAkB,CAAlB,EAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAC5C,YAAA,EAAA,GAAA,KAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACR,QAAA,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAC,CAAC,IAAI,CAAC,EAAD,CAAL,CAAT;;AACA,YAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAD,CAAL,CAAL,CAAL,GAAwB,MAAM,CAAC,gBAAnC,EAAqD;AACnD,UAAA,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAC,CAAC,EAAD,CAAD,GAAQ,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAD,CAAL,CAAL,CAArB;AACD;AACF;AACF;;AAED,WAAO,CAAP;AACD,GA9FD;;AAgGA,EAAA,OAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,IAAtB,EAAuC,KAAvC,EAAuD;AACrD,QAAI,IAAI,KAAK,GAAT,IAAgB,KAAK,KAAK,GAA9B,EAAmC;AACjC;AACD;;AACD,QAAK,IAAI,KAAK,GAAT,IAAgB,KAAK,KAAK,GAA3B,IAAoC,IAAI,KAAK,GAAT,IAAgB,KAAK,KAAK,GAAlE,EAAwE;AACtE,WAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,GAAlB,CAAsB,UAAC,SAAD,EAAY,CAAZ,EAAa;AACrD,eAAO,OAAA,CAAA,YAAA,CAAa,SAAb,EAAwB,UAAC,IAAD,EAAO,QAAP,EAAe;AAC5C,UAAA,IAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,iBAAO,IAAP;AACD,SAHM,CAAP;AAID,OALmB,CAApB;AAMD;;AACD,QAAI,IAAI,KAAK,GAAT,IAAgB,KAAK,KAAK,GAA9B,EAAmC;AACjC,WAAK,YAAL,GAAoB,OAAA,CAAA,YAAA,CAClB,KAAK,YADa,EAElB,UAAC,SAAD,EAAY,KAAZ,EAAiB;AACf,eAAO,OAAA,CAAA,YAAA,CAAa,SAAb,EAAwB,UAAC,IAAD,EAAO,QAAP,EAAe;AAC5C,UAAA,IAAI,CAAC,KAAL,GAAa,KAAb;AACA,UAAA,IAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,iBAAO,IAAP;AACD,SAJM,CAAP;AAKD,OARiB,CAApB;AAUD;AACF,GAxBD;;AA0BA,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,SAAK,YAAL,GAAoB,OAAA,CAAA,YAAA,CAAa,KAAK,YAAlB,EAAgC,UAAC,SAAD,EAAY,KAAZ,EAAiB;AACnE,aAAO,OAAA,CAAA,YAAA,CAAa,SAAb,EAAwB,UAAC,IAAD,EAAO,QAAP,EAAe;AAC5C,QAAA,IAAI,CAAC,KAAL,GAAa,KAAb;AACA,QAAA,IAAI,CAAC,QAAL,GAAgB,QAAhB;AACA,eAAO,IAAP;AACD,OAJM,CAAP;AAKD,KANmB,CAApB;AAOD,GARD;;AAeA,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAEE,QAAM,aAAa,GAAG,KAAK,iBAAL,EAAtB;AAGA,QAAM,IAAI,GAAG,EAAb;AACA,KAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAmB,UAAC,IAAD,EAAgB;AACjC,OAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAmB,UAAC,KAAD,EAAiB;AAElC,QAAA,KAAI,CAAC,qBAAL,CAA2B,IAA3B,EAAiC,KAAjC;;AAGM,YAAA,EAAA,GAAA,KAAA,CAAA,iBAAA,CAAA,IAAA,EAAA,aAAA,CAAA;AAAA,YAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,YAAQ,KAAA,GAAA,EAAA,CAAA,KAAR;;AACN,YAAM,CAAC,GAAG,KAAI,CAAC,oBAAL,CAA0B,IAA1B,EAAgC,KAAhC,EAAuC,KAAvC,CAAV;;AAGA,YAAI,KAAK,KAAK,GAAd,EAAmB;AACjB,eAAK,IAAI,GAAT,IAAgB,CAAhB,EAAmB;AACjB,YAAA,CAAC,CAAC,GAAD,CAAD,GAAS,CAAC,CAAC,CAAC,GAAD,CAAX;AACD;AACF;;AAED,QAAA,IAAI,CAAC,IAAI,GAAG,KAAR,CAAJ,GAAqB,CAArB;AACD,OAhBD;AAiBD,KAlBD;AAoBA,SAAK,UAAL;;AAEM,QAAA,EAAA,GAAA,KAAA,0BAAA,CAAA,IAAA,CAAA;AAAA,QACJ,aAAA,GAAA,EAAA,CAAA,MADI;AAAA,QAEJ,SAAA,GAAA,EAAA,CAAA,SAFI;;AAIN,SAAK,gBAAL,CAAsB,IAAtB,EAA4B,aAA5B,EAA2C,SAA3C;AACA,QAAM,WAAW,GAAG,KAAK,OAAL,CAAa,IAAb,CAApB;AAEA,QAAI,MAAM,GAAG,QAAb;AAEA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,MAAA,IAAI,CAAC,GAAL,GAAW,WAAW,CAAC,IAAI,CAAC,EAAN,CAAX,GAAuB,IAAI,CAAC,SAAL,GAAiB,CAAnD;;AACA,UAAI,MAAM,GAAG,IAAI,CAAC,GAAlB,EAAuB;AACrB,QAAA,MAAM,GAAG,IAAI,CAAC,GAAd;AACD;AACF,KALD;AAMA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,MAAA,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,GAAL,GAAW,MAAtB;AACD,KAFD;AAGD,GA9CD;;AAiDA,EAAA,OAAA,CAAA,SAAA,CAAA,0BAAA,GAAA,UAA2B,IAA3B,EAAoC;AAClC,QAAI,MAAJ;AACA,QAAI,SAAJ;AACA,QAAI,WAAW,GAAG,MAAM,CAAC,gBAAzB;;AACA,SAAK,IAAI,SAAT,IAAsB,IAAtB,EAA4B;AAC1B,UAAM,EAAE,GAAG,IAAI,CAAC,SAAD,CAAf;AACA,UAAI,QAAQ,GAAG,MAAM,CAAC,gBAAtB;AACA,UAAI,QAAQ,GAAG,MAAM,CAAC,gBAAtB;;8BACS,G,EAAG;AACV,YAAM,KAAK,GAAG,EAAE,CAAC,GAAD,CAAhB;AACA,YAAM,IAAI,GAAG,OAAA,CAAA,IAAA,CAAK,MAAA,CAAK,KAAV,EAAiB,UAAC,IAAD,EAAK;AAEjC,iBAAO,MAAM,CAAC,IAAI,CAAC,EAAN,CAAN,KAAoB,MAAM,CAAC,GAAD,CAAjC;AACD,SAHY,CAAb;AAIA,YAAI,KAAK,GAAI,IAAI,CAAC,SAAL,GAAiB,CAA1B,GAA+B,QAAnC,EAA6C,QAAQ,GAAG,KAAK,GAAI,IAAI,CAAC,SAAL,GAAiB,CAArC;AAC7C,YAAI,KAAK,GAAI,IAAI,CAAC,SAAL,GAAiB,CAA1B,GAA+B,QAAnC,EAA6C,QAAQ,GAAG,KAAK,GAAI,IAAI,CAAC,SAAL,GAAiB,CAArC;;;;;AAP/C,WAAK,IAAI,GAAT,IAAgB,EAAhB,EAAkB;gBAAT,G;AAQR;;AACD,UAAI,QAAQ,GAAG,QAAX,GAAsB,WAA1B,EAAuC;AACrC,QAAA,WAAW,GAAG,QAAQ,GAAG,QAAzB;AACA,QAAA,MAAM,GAAG,EAAT;AACA,QAAA,SAAS,GAAG,SAAZ;AACD;AACF;;AACD,WAAO;AACL,MAAA,MAAM,EAAA,MADD;AAEL,MAAA,SAAS,EAAA;AAFJ,KAAP;AAID,GA3BD;;AA6BA,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA4B,aAA5B,EAAgD,MAAhD,EAA8D;AACxD,QAAA,EAAA,GAAA,OAAA,CAAA,eAAA,CAAA,aAAA,CAAA;AAAA,QAAE,QAAA,GAAA,EAAA,CAAA,QAAF;AAAA,QAAsB,QAAA,GAAA,EAAA,CAAA,QAAtB;;AAIJ,KAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAmB,UAAC,IAAD,EAAgB;AACjC,OAAC,GAAD,EAAM,GAAN,EAAW,OAAX,CAAmB,UAAC,KAAD,EAAiB;AAClC,YAAI,SAAS,GAAG,IAAI,GAAG,KAAvB;;AACA,YAAI,SAAS,KAAK,MAAlB,EAA0B;AACxB,cAAM,EAAE,GAAG,IAAI,CAAC,SAAD,CAAf;;AACM,cAAA,EAAA,GAAA,OAAA,CAAA,eAAA,CAAA,EAAA,CAAA;AAAA,cAAE,KAAA,GAAA,EAAA,CAAA,QAAF;AAAA,cAAmB,KAAA,GAAA,EAAA,CAAA,QAAnB;;AACN,cAAI,KAAK,GAAG,KAAK,KAAK,GAAV,GAAgB,QAAQ,GAAG,KAA3B,GAAmC,QAAQ,GAAG,KAA1D;;AAEA,cAAI,KAAJ,EAAW;AACT,iBAAK,IAAI,GAAT,IAAgB,EAAhB,EAAoB;AAClB,cAAA,EAAE,CAAC,GAAD,CAAF,GAAU,EAAE,CAAC,GAAD,CAAF,GAAU,KAApB;AACD;AACF;AACF;AACF,OAbD;AAcD,KAfD;AAgBD,GArBD;;AAuBA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAiB;AACf,QAAM,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAI,SAAT,IAAsB,IAAtB,EAA4B;AAC1B,WAAK,IAAI,GAAT,IAAgB,IAAI,CAAC,SAAD,CAApB,EAAiC;AAC/B,YAAI,UAAU,CAAC,GAAD,CAAV,IAAmB,UAAU,CAAC,GAAD,CAAV,CAAgB,MAAvC,EAA+C;AAC7C,UAAA,UAAU,CAAC,GAAD,CAAV,CAAgB,IAAhB,CAAqB,IAAI,CAAC,SAAD,CAAJ,CAAgB,GAAhB,CAArB;AACD,SAFD,MAEO;AACL,UAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,CAAC,IAAI,CAAC,SAAD,CAAJ,CAAgB,GAAhB,CAAD,CAAlB;AACD;AACF;AACF;;AAED,QAAM,WAAW,GAAG,EAApB;;AACA,SAAK,IAAI,GAAT,IAAgB,UAAhB,EAA4B;AAC1B,MAAA,UAAU,CAAC,GAAD,CAAV,CAAgB,IAAhB,CAAqB,UAAC,CAAD,EAAS,CAAT,EAAe;AAAK,eAAA,CAAC,GAAD,CAAA;AAAK,OAA9C;AACA,MAAA,WAAW,CAAC,GAAD,CAAX,GAAmB,CAAC,UAAU,CAAC,GAAD,CAAV,CAAgB,CAAhB,IAAqB,UAAU,CAAC,GAAD,CAAV,CAAgB,CAAhB,CAAtB,IAA4C,CAA/D;AACD;;AAED,WAAO,WAAP;AACD,GAnBD;;AAqBA,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AAEE,SAAK,cAAL;AAEA,SAAK,QAAL;AACD,GALD;;AAOA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAK;AACtB,UAAI,IAAI,CAAC,SAAT,EAAoB;AAClB,QAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB;;AACA,YAAI,IAAI,CAAC,YAAL,IAAqB,IAAI,CAAC,YAAL,CAAkB,MAA3C,EAAmD;AACjD,UAAA,IAAI,CAAC,YAAL,CAAkB,OAAlB,CAA0B,UAAC,IAAD,EAAK;AAC7B,gBAAI,IAAI,CAAC,SAAT,EAAoB;AAClB,cAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB;AACD;AACF,WAJD;AAKD;AACF;AACF,KAXD;AAYD,GAbD;;AAeA,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAAyD,KAAzD,EAAqF,OAArF,EAAqG;AACnG,QAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAxB;;AAEA,QAAI,UAAJ,EAAgB;AACd,UAAI,KAAK,UAAL,CAAgB,OAAhB,CAA2B,UAAU,GAAA,GAAV,GAAc,IAAI,CAAC,EAA9C,IAAsD,CAAC,CAA3D,EAA8D;AAC5D;AACD;;AACD,WAAK,UAAL,CAAgB,IAAhB,CAAwB,UAAU,GAAA,GAAV,GAAc,IAAI,CAAC,EAA3C;AACD;;AAGD,QAAI,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,EAAnB,IAAyB,CAAC,CAA9B,EAAiC;AAC/B,MAAA,OAAO,CAAC,IAAR,CAAa,gBAAb;AACA,UAAM,IAAI,GAAG,OAAA,CAAA,IAAA,CAAK,KAAK,KAAV,EAAiB,UAAC,IAAD,EAAK;AACjC,eAAO,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,UAAnB,IAAiC,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,IAAI,CAAC,EAAhE;AACD,OAFY,CAAb;AAGA,MAAA,IAAI,CAAC,SAAL,GAAiB,IAAjB;AACD;;AAGD,QAAM,QAAQ,GAAG,OAAO,GAAG,IAAI,CAAC,WAAL,CAAiB,MAAjB,CAAwB,UAAA,IAAA,EAAI;AAAI,aAAA,CAAC,IAAI,CAAL,eAAA;AAAqB,KAArD,CAAH,GAA4D,IAAI,CAAC,WAAzF;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,WAAK,aAAL,CAAmB,QAAQ,CAAC,CAAD,CAAR,CAAY,MAA/B,EAAqC,OAAA,CAAA,QAAA,CAAM,KAAN,EAAW,CAAE,IAAI,CAAC,EAAP,CAAX,CAArC,EAA4D,KAA5D;AACD;;AACD;AACD,GAzBD;;AA2BA,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAAsD;AACpD,QAAM,MAAM,GAAG,IAAI,CAAC,MAApB;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,MAApB;AAGA,IAAA,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC,WAAP,CAAmB,MAAnB,CAA0B,UAAA,IAAA,EAAI;AACjD,aAAO,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,MAAM,CAAC,EAA1B,IAAgC,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,MAAM,CAAC,EAA1D,IAAgE,CAAC,IAAI,CAAC,SAA7E;AACD,KAFoB,CAArB;AAIA,IAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,IAAxB;AAGA,IAAA,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC,WAAP,CAAmB,MAAnB,CAA0B,UAAA,IAAA,EAAI;AACjD,aAAO,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,MAAM,CAAC,EAA1B,IAAgC,IAAI,CAAC,MAAL,CAAY,EAAZ,KAAmB,MAAM,CAAC,EAA1D,IAAgE,CAAC,IAAI,CAAC,SAA7E;AACD,KAFoB,CAArB;AAGA,IAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,IAAxB;AAEA,IAAA,IAAI,CAAC,MAAL,GAAc,MAAd;AACA,IAAA,IAAI,CAAC,MAAL,GAAc,MAAd;AACD,GAnBD;;AAsBA,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,UAAL,GAAkB,EAAlB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,KAAL,CAAW,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,WAAK,aAAL,CAAmB,KAAK,KAAL,CAAW,CAAX,CAAnB,EAAkC,EAAlC,EAAsC,IAAtC;AACD;;AACD,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAK;AACtB,UAAI,IAAI,CAAC,SAAT,EAAoB;AAClB,QAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB;AACD;AACF,KAJD;AAKD,GAVD;;AAiBA,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,MAAA,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,WAAL,CAAiB,MAAjB,GAA0B,IAAI,CAAC,WAAL,CAAiB,MAA7D;AACA,MAAA,IAAI,CAAC,WAAL,GAAmB,KAAnB;AACD,KAHD;AAKA,QAAI,MAAM,GAAG,IAAb;AACA,QAAI,SAAS,GAAG,KAAK,KAArB;;AAEA,WAAO,MAAP,EAAe;AACb,MAAA,MAAM,GAAG,KAAT;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,IAAA,EAAI;AACpB,YAAI,IAAI,CAAC,UAAL,KAAoB,CAAxB,EAA2B;AACzB,UAAA,MAAM,GAAG,IAAT;AACA,UAAA,IAAI,CAAC,UAAL,GAAkB,CAAlB;AACA,UAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAC3B,YAAA,IAAI,CAAC,MAAL,CAAY,UAAZ;AACD,WAFD;AAGA,UAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAC3B,YAAA,IAAI,CAAC,MAAL,CAAY,UAAZ;AACD,WAFD;AAGD;AACF,OAXD;AAYA,MAAA,SAAS,GAAG,SAAS,CAAC,MAAV,CAAiB,UAAA,IAAA,EAAI;AAC/B,eAAO,IAAI,CAAC,UAAL,GAAkB,CAAzB;AACD,OAFW,CAAZ;AAGD;;AAED,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,IAAA,EAAI;AACpB,MAAA,IAAI,CAAC,MAAL,GAAc,IAAd;AACD,KAFD;AAIA,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,oBAAoB,GAAG,SAA3B;;AAGA,QAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;;AAEtB,YAAM,SAAS,GAA0C,EAAzD;AACA,QAAA,oBAAoB,CAAC,OAArB,CAA6B,UAAA,IAAA,EAAI;AAC/B,UAAA,IAAI,CAAC,KAAL,GAAa,KAAb;AACA,UAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAE3B,gBAAI,CAAC,OAAA,CAAA,IAAA,CAAK,SAAL,EAAgB,UAAC,IAAD,EAAK;AACxB,qBAAO,IAAI,CAAC,EAAL,KAAY,IAAI,CAAC,MAAL,CAAY,EAA/B;AACD,aAFI,CAAL,EAEI;AACF,cAAA,SAAS,CAAC,IAAV,CAAe,IAAI,CAAC,MAApB;AACD;AACF,WAPD;AAQD,SAVD;AAWA,QAAA,oBAAoB,GAAG,SAAvB;AACA,QAAA,KAAK;;;AAdP,aAAO,oBAAoB,CAAC,MAA5B,EAAkC;;AAejC;;AAED,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,IAAA,EAAI;AACpB,YAAM,cAAc,GAA0C,EAA9D;AACA,YAAM,gBAAgB,GAA0C,EAAhE;AACA,QAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAC3B,cAAI,IAAI,CAAC,MAAL,CAAY,MAAhB,EAAwB;AACtB,YAAA,cAAc,CAAC,IAAf,CAAoB,IAAI,CAAC,MAAzB;AACD;AACF,SAJD;AAKA,QAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAC3B,cAAI,IAAI,CAAC,MAAL,CAAY,MAAhB,EAAwB;AACtB,YAAA,gBAAgB,CAAC,IAAjB,CAAsB,IAAI,CAAC,MAA3B;AACD;AACF,SAJD;AAKA,QAAA,IAAI,CAAC,cAAL,GAAsB,cAAtB;AACA,QAAA,IAAI,CAAC,gBAAL,GAAwB,gBAAxB;AAEA,YAAM,aAAa,GAAW,CAC5B,OAAA,CAAA,KAAA,CAAM,IAAI,CAAC,gBAAX,EAA6B,UAAA,QAAA,EAAQ;AAAI,iBAAA,QAAQ,CAAR,KAAA;AAAc,SAAvD,KACC,EAF2B,EAG5B,KAHF;;AAKA,YAAI,IAAI,CAAC,cAAL,CAAoB,MAApB,KAA+B,CAAnC,EAAsC;AACpC,UAAA,IAAI,CAAC,KAAL,GAAa,aAAa,GAAG,CAA7B;AACD;;AACD,YAAI,aAAa,IAAI,aAAa,GAAG,IAAI,CAAC,KAArB,GAA6B,CAAlD,EAAqD;AAEnD,cAAI,IAAI,CAAC,gBAAL,CAAsB,MAAtB,GAA+B,IAAI,CAAC,cAAL,CAAoB,MAAvD,EAA+D;AAC7D,YAAA,IAAI,CAAC,KAAL,GAAa,aAAa,GAAG,CAA7B;AACD;AAEF;AACF,OA/BD;AAgCD,KAlDD,MAkDO;AAEL,WAAK,KAAL,CAAW,CAAX,EAAc,KAAd,GAAsB,CAAtB;AACA,MAAA,SAAS,CAAC,IAAV,CAAe,KAAK,KAAL,CAAW,CAAX,CAAf;AACD;;AAED,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,IAAA,EAAI;AACpB,MAAA,IAAI,CAAC,WAAL,GAAmB,IAAnB;AACD,KAFD;AAIA,QAAI,iBAAiB,GAAG,SAAxB;;;AAEE,UAAM,WAAW,GAA0C,EAA3D;AACA,MAAA,iBAAiB,CAAC,OAAlB,CAA0B,UAAA,IAAA,EAAI;AAC5B,QAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAC3B,cAAM,UAAU,GAAG,IAAI,CAAC,MAAxB;;AACA,cAAI,CAAC,UAAU,CAAC,WAAhB,EAA6B;AAC3B,YAAA,UAAU,CAAC,KAAX,GAAmB,IAAI,CAAC,KAAL,GAAa,CAAhC;AACA,YAAA,IAAI,CAAC,WAAL,GAAmB,IAAnB;AACA,YAAA,WAAW,CAAC,IAAZ,CAAiB,UAAjB;AACD;AACF,SAPD;AAQA,QAAA,IAAI,CAAC,WAAL,CAAiB,OAAjB,CAAyB,UAAA,IAAA,EAAI;AAC3B,cAAM,UAAU,GAAG,IAAI,CAAC,MAAxB;;AACA,cAAI,CAAC,UAAU,CAAC,WAAhB,EAA6B;AAC3B,YAAA,UAAU,CAAC,KAAX,GAAmB,IAAI,CAAC,KAAL,GAAa,CAAhC;AACA,YAAA,IAAI,CAAC,WAAL,GAAmB,IAAnB;AACA,YAAA,WAAW,CAAC,IAAZ,CAAiB,UAAjB;AACD;AACF,SAPD;AAQD,OAjBD;AAkBA,MAAA,iBAAiB,GAAG,WAApB;;;AApBF,WAAO,iBAAiB,CAAC,MAAzB,EAA+B;;AAqB9B;;AAGD,QAAM,QAAQ,GAAW,OAAA,CAAA,KAAA,CAAM,KAAK,KAAX,EAAkB,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,CAAJ,KAAA;AAAU,KAApC,EAAsC,KAA/D;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,MAAA,IAAI,CAAC,KAAL,IAAc,QAAd;AACD,KAFD;AAKA,QAAM,QAAQ,GAAW,OAAA,CAAA,KAAA,CAAM,KAAK,KAAX,EAAkB,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,CAAJ,KAAA;AAAU,KAApC,EAAsC,KAA/D;AACA,SAAK,mBAAL,GAA2B,KAAK,CAAC,QAAQ,GAAG,CAAZ,CAAL,CAAoB,IAApB,CAAyB,CAAC,QAA1B,CAA3B;AACA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAA,EAAI;AACrB,UAAI,KAAI,CAAC,mBAAL,CAAyB,IAAI,CAAC,KAA9B,IAAuC,IAAI,CAAC,UAAhD,EAA4D;AAC1D,QAAA,KAAI,CAAC,mBAAL,CAAyB,IAAI,CAAC,KAA9B,IAAuC,IAAI,CAAC,UAA5C;AACD;AACF,KAJD;AAKD,GAtID;;AAuIF,SAAA,OAAA;AAAC,CA3hCD,EAAA;;AA6hCA,OAAA,CAAA,OAAA,GAAe,OAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Link_1 = require(\"./Link\");\nvar utils_1 = require(\"../../Utils/utils\");\nvar utils_2 = require(\"./utils\");\nvar MAX_ITERATIONS = 24;\nvar BaseDAG = (function () {\n    function BaseDAG(_a) {\n        var nodes = _a.nodes, links = _a.links, selfLinks = _a.selfLinks, config = _a.config;\n        this.virtualId = 0;\n        this.paddingSum = [];\n        this.levelPaddings = [];\n        this.levelMap = new Map();\n        this.nodesByLevel = [];\n        this.nodesLevelMaxHeight = [];\n        this.dfsVisited = [];\n        this.nodes = nodes.slice().sort(function (nodeA, nodeB) {\n            return nodeA.id > nodeB.id ? 1 : -1;\n        });\n        this.links = links.slice().sort(function (linkA, linkB) {\n            return linkA.source.id + \"-\" + linkA.target.id >\n                linkB.source.id + \"-\" + linkB.target.id\n                ? 1\n                : -1;\n        });\n        this.selfLinks = selfLinks.slice();\n        this.config = tslib_1.__assign({}, config);\n    }\n    BaseDAG.prototype.destroy = function () {\n        this.nodes = null;\n        this.links = null;\n        this.selfLinks = null;\n        this.nodesByLevel = null;\n        this.nodesLevelMaxHeight = null;\n    };\n    BaseDAG.prototype.getOutput = function (left, top) {\n        var _this = this;\n        this.nodes.forEach(function (node) {\n            node.finalPos = {\n                x: node.pos + left,\n                y: _this.paddingSum[node.level] +\n                    top +\n                    _this.nodesLevelMaxHeight.reduce(function (pre, height, index) {\n                        if (index < node.level)\n                            return pre + _this.nodesLevelMaxHeight[index];\n                        return pre;\n                    }, 0) +\n                    (_this.nodesLevelMaxHeight[node.level] - node.nodeHeight) / 2\n            };\n        });\n        this.links.forEach(function (link) {\n            if (link.linkChildren && link.linkChildren.length) {\n                link.finalPath = link.linkChildren.reduce(function (path, child, index) {\n                    if (index === 0) {\n                        return _this.linkInstace.getFinalPath(child, _this.levelPaddings, false, true);\n                    }\n                    return path.concat(_this.linkInstace.getFinalPath(child, _this.levelPaddings, index === link.linkChildren.length - 1, false));\n                }, []);\n            }\n            else {\n                link.finalPath = _this.linkInstace.getFinalPath(link, _this.levelPaddings, true, true);\n            }\n        });\n        this.selfLinks.forEach(function (link) {\n            link.finalPath = _this.linkInstace.getSelfFinalPath(link);\n        });\n        this.recoverCycle();\n        return {\n            nodes: this.nodes.filter(function (node) { return node.type !== 'virtual'; }).map(function (node) {\n                return {\n                    id: node.id,\n                    view: {\n                        x: node.finalPos.x,\n                        y: node.finalPos.y\n                    },\n                    nodeWidth: node.nodeWidth,\n                    nodeHeight: node.nodeHeight,\n                    info: node.originInfo\n                };\n            }),\n            links: tslib_1.__spread(this.links\n                .filter(function (link) {\n                return link.source.type !== 'virtual' && link.target.type !== 'virtual';\n            })\n                .map(function (link) {\n                return {\n                    sourceId: link.source.id,\n                    targetId: link.target.id,\n                    path: link.finalPath,\n                    info: link.originInfo\n                };\n            }), this.selfLinks.map(function (link) {\n                return {\n                    sourceId: link.source.id,\n                    targetId: link.target.id,\n                    path: link.finalPath,\n                    info: link.originInfo\n                };\n            })),\n            pos: {\n                width: this.width,\n                height: this.height\n            }\n        };\n    };\n    BaseDAG.prototype.run = function () {\n        this.clearCycle();\n        this.calcNodeLevels();\n        this.calcNodePos();\n        this.xcordinate();\n        this.calcLinkPos();\n        this.calcRealSize();\n        return this;\n    };\n    BaseDAG.prototype.getSize = function () {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    };\n    BaseDAG.prototype.calcLinkPos = function () {\n        var _a = this.config, linkType = _a.linkType, DiyLine = _a.DiyLine;\n        var LinkClass = Link_1.default(linkType, DiyLine);\n        this.linkInstace = new LinkClass(this.nodesByLevel, this.selfLinks, this.config);\n        this.levelPaddings = this.linkInstace.calcPosAndPadding();\n    };\n    BaseDAG.prototype.calcRealSize = function () {\n        var _this = this;\n        var sum = 0;\n        this.levelPaddings.forEach(function (padding, index) {\n            _this.paddingSum[index] = sum;\n            sum += padding;\n        });\n        this.height =\n            this.paddingSum[this.paddingSum.length - 1] +\n                utils_1.sumBy(this.nodesLevelMaxHeight, function (height) { return height; });\n        this.width =\n            this.nodes.reduce(function (max, curNode) {\n                return curNode.pos + curNode.nodeWidth > max\n                    ? curNode.pos + curNode.nodeWidth\n                    : max;\n            }, 0) -\n                this.nodes.reduce(function (min, curNode) {\n                    return curNode.pos < min ? curNode.pos : min;\n                }, 0);\n    };\n    BaseDAG.prototype.addVirtualNode = function () {\n        var _this = this;\n        var virtualNodes = [];\n        var virtualLinks = [];\n        this.links.forEach(function (link) {\n            var source = link.source;\n            var target = link.target;\n            var sourceLevel = source.level;\n            var targetLevel = target.level;\n            link.linkChildren = [];\n            if (sourceLevel + 1 < targetLevel) {\n                for (var i = sourceLevel + 1; i < targetLevel; i++) {\n                    var virtualNode = {\n                        id: \"virtual\" + _this.virtualId++,\n                        sourceLinks: [],\n                        targetLinks: [],\n                        type: 'virtual',\n                        nodeWidth: _this.config.defaultVirtualNodeWidth,\n                        nodeHeight: _this.nodesLevelMaxHeight[i],\n                        originInfo: {},\n                        level: i\n                    };\n                    var sourceNode = i === sourceLevel + 1\n                        ? source\n                        : virtualNodes[virtualNodes.length - 1];\n                    var virtualLink = {\n                        source: sourceNode,\n                        target: virtualNode,\n                        originInfo: {},\n                        isReverse: link.isReverse,\n                    };\n                    link.linkChildren.push(virtualLink);\n                    virtualLinks.push(virtualLink);\n                    sourceNode.sourceLinks.push(virtualLink);\n                    virtualNode.targetLinks.push(virtualLink);\n                    if (i === targetLevel - 1) {\n                        var virtualLink_1 = {\n                            source: virtualNode,\n                            target: target,\n                            originInfo: {},\n                            isReverse: link.isReverse,\n                        };\n                        link.linkChildren.push(virtualLink_1);\n                        virtualLinks.push(virtualLink_1);\n                        virtualNode.sourceLinks.push(virtualLink_1);\n                        target.targetLinks.push(virtualLink_1);\n                    }\n                    virtualNodes.push(virtualNode);\n                }\n            }\n        });\n        this.nodes = tslib_1.__spread(this.nodes, virtualNodes);\n        this.links = tslib_1.__spread(this.links, virtualLinks);\n    };\n    BaseDAG.prototype.dfsOrder = function (node) {\n        var _this = this;\n        if (this.dfsVisited.indexOf(node.id) > -1)\n            return;\n        var pos = this.levelMap.get(node.level);\n        node.levelPos = pos;\n        node._levelPos = pos;\n        this.levelMap.set(node.level, pos + 1);\n        this.dfsVisited.push(node.id);\n        node.sourceLinks.forEach(function (link) {\n            var source = link.source, target = link.target;\n            if (target.level - source.level === 1) {\n                _this.dfsOrder(target);\n            }\n        });\n    };\n    BaseDAG.prototype.initOrder = function () {\n        var _this = this;\n        this.nodes.forEach(function (node) {\n            var level = node.level;\n            if (_this.nodesByLevel[level]) {\n                _this.nodesByLevel[level].push(node);\n            }\n            else {\n                _this.nodesByLevel[level] = [node];\n                _this.levelMap.set(level, 0);\n            }\n        });\n        this.dfsVisited = [];\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n                if (this.nodesByLevel[i][j].levelPos === undefined) {\n                    this.dfsOrder(this.nodesByLevel[i][j]);\n                }\n            }\n        }\n    };\n    BaseDAG.prototype.wmedian = function (index) {\n        function medianNodeLevel(nodelevel) {\n            nodelevel.forEach(function (node) {\n                var parentNode = node.targetLinks\n                    .filter(function (link) {\n                    return link.target.level - link.source.level === 1;\n                })\n                    .map(function (link) { return link.source; });\n                parentNode.sort(function (node1, node2) {\n                    return node1.levelPos - node2.levelPos;\n                });\n                var m = Math.floor(parentNode.length / 2);\n                if (parentNode.length === 0) {\n                    node._median = -1;\n                }\n                else if (parentNode.length % 2 === 1) {\n                    node._median = parentNode[m].levelPos;\n                }\n                else if (parentNode.length === 2) {\n                    node._median = (parentNode[0].levelPos + parentNode[1].levelPos) / 2;\n                }\n                else {\n                    var left = parentNode[m - 1].levelPos - parentNode[0].levelPos;\n                    var right = parentNode[parentNode.length - 1].levelPos - parentNode[m].levelPos;\n                    node._median = (parentNode[m - 1].levelPos * right + parentNode[m].levelPos * left) / (left + right);\n                }\n            });\n        }\n        if (index % 2 === 0) {\n            for (var i = 0; i < this.nodesByLevel.length; i++) {\n                var nodelevel = this.nodesByLevel[i];\n                medianNodeLevel(nodelevel);\n                this.nodesByLevel[i] = utils_2.sortNodelevel(nodelevel);\n            }\n            return;\n        }\n        else {\n            for (var i = this.nodesByLevel.length - 1; i >= 0; i--) {\n                var nodelevel = this.nodesByLevel[i];\n                medianNodeLevel(nodelevel);\n                this.nodesByLevel[i] = utils_2.sortNodelevel(nodelevel);\n            }\n        }\n    };\n    BaseDAG.prototype.crossing = function () {\n        var count = 0;\n        for (var i = 1; i < this.nodesByLevel.length; i++) {\n            count += utils_2.crossing(this.nodesByLevel[i - 1], this.nodesByLevel[i]);\n        }\n        return count;\n    };\n    BaseDAG.prototype.transpose = function () {\n        var bestCount = this.crossing();\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            if (this.nodesByLevel.length === 1)\n                continue;\n            for (var j = 1; j < this.nodesByLevel[i].length; j++) {\n                this.nodesByLevel[i][j]._levelPos = j - 1;\n                this.nodesByLevel[i][j - 1]._levelPos = j;\n                var currentCount = this.crossing();\n                if (currentCount < bestCount) {\n                    var tmpNode = this.nodesByLevel[i][j];\n                    this.nodesByLevel[i][j] = this.nodesByLevel[i][j - 1];\n                    this.nodesByLevel[i][j - 1] = tmpNode;\n                    bestCount = currentCount;\n                }\n                else {\n                    this.nodesByLevel[i][j]._levelPos = j;\n                    this.nodesByLevel[i][j - 1]._levelPos = j - 1;\n                }\n            }\n        }\n        return bestCount;\n    };\n    BaseDAG.prototype.ordering = function () {\n        this.initOrder();\n        var bestCount = this.crossing();\n        if (bestCount !== 0) {\n            for (var i = 0; i <= MAX_ITERATIONS; i++) {\n                this.wmedian(i);\n                var currentCount = this.transpose();\n                if (bestCount > currentCount) {\n                    bestCount = currentCount;\n                    this.nodesByLevel.forEach(function (nodelevel, i) {\n                        nodelevel.forEach(function (node) { return (node.levelPos = node._levelPos); });\n                        nodelevel.sort(function (node1, node2) {\n                            return node1.levelPos - node2.levelPos;\n                        });\n                    });\n                }\n            }\n        }\n        this.nodesByLevel.forEach(function (nodelevel, i) {\n            nodelevel.sort(function (node1, node2) {\n                return node1.levelPos - node2.levelPos;\n            });\n        });\n    };\n    BaseDAG.prototype.findTypeConflicts = function () {\n        var conflicts = [];\n        var _loop_1 = function (i) {\n            var k0 = 0;\n            var scanPos = 0;\n            var prevLayerLength = this_1.nodesByLevel[i - 1].length;\n            var _loop_2 = function (j) {\n                var node = this_1.nodesByLevel[i][j];\n                var upVirtualLink = node.type === 'virtual' &&\n                    node.targetLinks.filter(function (link) {\n                        return (link.target.level - link.source.level === 1 &&\n                            link.source.type === 'virtual');\n                    });\n                var upVirtualNode = upVirtualLink && upVirtualLink.length\n                    ? upVirtualLink[0].source\n                    : undefined;\n                var k1 = upVirtualNode ? upVirtualNode.levelPos : prevLayerLength;\n                if (upVirtualNode || j === this_1.nodesByLevel[i].length - 1) {\n                    this_1.nodesByLevel[i].slice(scanPos, j + 1).forEach(function (curNode) {\n                        var upCurNodes = curNode.targetLinks\n                            .filter(function (node) { return node.target.level - node.source.level === 1; })\n                            .map(function (link) { return link.source; });\n                        upCurNodes.forEach(function (upCurNode) {\n                            var pos = upCurNode.levelPos;\n                            if ((pos < k0 || k1 < pos) &&\n                                !(upCurNode.type === 'virtual' && curNode.type === 'virtual')) {\n                                conflicts.push(utils_1.find(curNode.targetLinks, function (link) {\n                                    return link.source.id === upCurNode.id &&\n                                        link.target.id === curNode.id;\n                                }));\n                            }\n                        });\n                    });\n                    scanPos = j + 1;\n                    k0 = k1;\n                }\n            };\n            for (var j = 0; j < this_1.nodesByLevel[i].length; j++) {\n                _loop_2(j);\n            }\n        };\n        var this_1 = this;\n        for (var i = 1; i < this.nodesByLevel.length; i++) {\n            _loop_1(i);\n        }\n        return conflicts;\n    };\n    BaseDAG.prototype.verticalAlignment = function (vert, typeConflicts) {\n        var root = {};\n        var align = {};\n        function hasConflict(node1, node2) {\n            for (var i = 0; i < typeConflicts.length; i++) {\n                var link = typeConflicts[i];\n                if ((link.source.id === node1.id && link.target.id === node2.id) ||\n                    (link.source.id === node2.id && link.target.id === node1.id)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n                var id = this.nodesByLevel[i][j].id;\n                root[id] = id;\n                align[id] = id;\n            }\n        }\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            var r = -1;\n            for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n                var nodeV = this.nodesByLevel[i][j];\n                var neighbors = vert === 'u'\n                    ? nodeV.targetLinks\n                        .filter(function (link) {\n                        return Math.abs(link.target.level - link.source.level) === 1;\n                    })\n                        .map(function (link) { return link.source; })\n                    : nodeV.sourceLinks\n                        .filter(function (link) {\n                        return Math.abs(link.target.level - link.source.level) === 1;\n                    })\n                        .map(function (link) { return link.target; });\n                if (neighbors && neighbors.length) {\n                    neighbors.sort(function (node1, node2) {\n                        return node1.levelPos - node2.levelPos;\n                    });\n                    var mid = (neighbors.length - 1) / 2;\n                    for (var z = Math.floor(mid); z <= Math.ceil(mid); z++) {\n                        var nodeW = neighbors[z];\n                        if (align[nodeV.id] === nodeV.id &&\n                            r < nodeW.levelPos &&\n                            !hasConflict(nodeV, nodeW)) {\n                            align[nodeW.id] = nodeV.id;\n                            align[nodeV.id] = root[nodeV.id] = root[nodeW.id];\n                            r = nodeW.levelPos;\n                        }\n                    }\n                }\n            }\n        }\n        return {\n            root: root,\n            align: align\n        };\n    };\n    BaseDAG.prototype.horizontalCompaction = function (root, align, horiz) {\n        var _this = this;\n        var sink = {};\n        var shift = {};\n        var x = {};\n        var blockSpaceMap = new Map();\n        this.nodesByLevel.forEach(function (nodeLevel, i) {\n            var uNode;\n            nodeLevel.forEach(function (vnode) {\n                var vRootNodeId = root[vnode.id];\n                if (uNode) {\n                    var uRootNodeId = root[uNode.id];\n                    var blockSpace = blockSpaceMap.has(vRootNodeId + \"-\" + uRootNodeId) || blockSpaceMap.has(uRootNodeId + \"-\" + vRootNodeId) ?\n                        blockSpaceMap.get(vRootNodeId + \"-\" + uRootNodeId) || blockSpaceMap.get(uRootNodeId + \"-\" + vRootNodeId) : 0;\n                    var curSpace = vnode.nodeWidth / 2 + _this.config.nodeAndNodeSpace + uNode.nodeWidth / 2;\n                    blockSpaceMap.set(vRootNodeId + \"-\" + uRootNodeId, Math.max(blockSpace, curSpace));\n                    blockSpaceMap.set(uRootNodeId + \"-\" + vRootNodeId, Math.max(blockSpace, curSpace));\n                }\n                uNode = vnode;\n            });\n        });\n        var placeBlock = function (node) {\n            if (x[node.id] === undefined) {\n                x[node.id] = 0;\n                var w_1 = node.id;\n                var _loop_3 = function () {\n                    var curNode = utils_1.find(_this.nodes, function (node) { return node.id === w_1; });\n                    if (curNode.levelPos > 0) {\n                        var preNode = _this.nodesByLevel[curNode.level][curNode.levelPos - 1];\n                        var rootId_1 = root[preNode.id];\n                        placeBlock(utils_1.find(_this.nodes, function (node) { return node.id === rootId_1; }));\n                        if (sink[node.id] === node.id) {\n                            sink[node.id] = sink[rootId_1];\n                        }\n                        if (!blockSpaceMap.has(rootId_1 + \"-\" + root[node.id]) && !blockSpaceMap.has(root[node.id] + \"-\" + rootId_1)) {\n                            throw new Error(rootId_1 + \", \" + root[node.id] + \"\\u65E0\\u6CD5\\u83B7\\u53D6\");\n                        }\n                        if (sink[node.id] !== sink[rootId_1]) {\n                            shift[sink[rootId_1]] = Math.min(shift[sink[rootId_1]], x[node.id] - x[rootId_1] - (blockSpaceMap.get(rootId_1 + \"-\" + root[node.id]) || blockSpaceMap.get(root[node.id] + \"-\" + rootId_1)));\n                        }\n                        else {\n                            x[node.id] = Math.max(x[node.id], x[rootId_1] + (blockSpaceMap.get(rootId_1 + \"-\" + root[node.id]) || blockSpaceMap.get(root[node.id] + \"-\" + rootId_1)));\n                        }\n                    }\n                    w_1 = align[w_1];\n                };\n                do {\n                    _loop_3();\n                } while (w_1 !== node.id);\n            }\n        };\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n                var id = this.nodesByLevel[i][j].id;\n                sink[id] = id;\n                shift[id] = Number.MAX_SAFE_INTEGER;\n                x[id] = undefined;\n            }\n        }\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n                var id = this.nodesByLevel[i][j].id;\n                if (root[id] === id) {\n                    placeBlock(this.nodesByLevel[i][j]);\n                }\n            }\n        }\n        for (var i = 0; i < this.nodesByLevel.length; i++) {\n            for (var j = 0; j < this.nodesByLevel[i].length; j++) {\n                var id = this.nodesByLevel[i][j].id;\n                x[id] = x[root[id]];\n                if (shift[sink[root[id]]] < Number.MAX_SAFE_INTEGER) {\n                    x[id] = x[id] + shift[sink[root[id]]];\n                }\n            }\n        }\n        return x;\n    };\n    BaseDAG.prototype.getDirectNodesByLevel = function (vert, horiz) {\n        if (vert === 'u' && horiz === 'l') {\n            return;\n        }\n        if ((vert === 'u' && horiz === 'r') || (vert === 'd' && horiz === 'r')) {\n            this.nodesByLevel = this.nodesByLevel.map(function (nodeLevel, i) {\n                return utils_1.reverseArray(nodeLevel, function (node, levelPos) {\n                    node.levelPos = levelPos;\n                    return node;\n                });\n            });\n        }\n        if (vert === 'd' && horiz === 'l') {\n            this.nodesByLevel = utils_1.reverseArray(this.nodesByLevel, function (nodeLevel, level) {\n                return utils_1.reverseArray(nodeLevel, function (node, levelPos) {\n                    node.level = level;\n                    node.levelPos = levelPos;\n                    return node;\n                });\n            });\n        }\n    };\n    BaseDAG.prototype.resetLevel = function () {\n        this.nodesByLevel = utils_1.reverseArray(this.nodesByLevel, function (nodeLevel, level) {\n            return utils_1.reverseArray(nodeLevel, function (node, levelPos) {\n                node.level = level;\n                node.levelPos = levelPos;\n                return node;\n            });\n        });\n    };\n    BaseDAG.prototype.xcordinate = function () {\n        var _this = this;\n        var typeConflicts = this.findTypeConflicts();\n        var xSet = {};\n        ['u', 'd'].forEach(function (vert) {\n            ['l', 'r'].forEach(function (horiz) {\n                _this.getDirectNodesByLevel(vert, horiz);\n                var _a = _this.verticalAlignment(vert, typeConflicts), root = _a.root, align = _a.align;\n                var x = _this.horizontalCompaction(root, align, horiz);\n                if (horiz === 'r') {\n                    for (var key in x) {\n                        x[key] = -x[key];\n                    }\n                }\n                xSet[vert + horiz] = x;\n            });\n        });\n        this.resetLevel();\n        var _a = this.findSmallestWidthAlignment(xSet), smallestWidth = _a.minSet, minDirect = _a.minDirect;\n        this.alignCoordinates(xSet, smallestWidth, minDirect);\n        var finalPosSet = this.balance(xSet);\n        var minPos = Infinity;\n        this.nodes.forEach(function (node) {\n            node.pos = finalPosSet[node.id] - node.nodeWidth / 2;\n            if (minPos > node.pos) {\n                minPos = node.pos;\n            }\n        });\n        this.nodes.forEach(function (node) {\n            node.pos = node.pos - minPos;\n        });\n    };\n    BaseDAG.prototype.findSmallestWidthAlignment = function (xSet) {\n        var minSet;\n        var minDirect;\n        var minSetValue = Number.MAX_SAFE_INTEGER;\n        for (var direction in xSet) {\n            var xs = xSet[direction];\n            var minValue = Number.MAX_SAFE_INTEGER;\n            var maxValue = Number.MIN_SAFE_INTEGER;\n            var _loop_4 = function (key) {\n                var value = xs[key];\n                var node = utils_1.find(this_2.nodes, function (node) {\n                    return String(node.id) === String(key);\n                });\n                if (value + (node.nodeWidth / 2) > maxValue)\n                    maxValue = value + (node.nodeWidth / 2);\n                if (value - (node.nodeWidth / 2) < minValue)\n                    minValue = value - (node.nodeWidth / 2);\n            };\n            var this_2 = this;\n            for (var key in xs) {\n                _loop_4(key);\n            }\n            if (maxValue - minValue < minSetValue) {\n                minSetValue = maxValue - minValue;\n                minSet = xs;\n                minDirect = direction;\n            }\n        }\n        return {\n            minSet: minSet,\n            minDirect: minDirect\n        };\n    };\n    BaseDAG.prototype.alignCoordinates = function (xSet, smallestWidth, direct) {\n        var _a = utils_1.getObjectMaxMin(smallestWidth), maxAlign = _a.maxValue, minAlign = _a.minValue;\n        ['u', 'd'].forEach(function (vert) {\n            ['l', 'r'].forEach(function (horiz) {\n                var alignment = vert + horiz;\n                if (alignment !== direct) {\n                    var xs = xSet[alignment];\n                    var _a = utils_1.getObjectMaxMin(xs), maxXs = _a.maxValue, minXs = _a.minValue;\n                    var delta = horiz === 'l' ? minAlign - minXs : maxAlign - maxXs;\n                    if (delta) {\n                        for (var key in xs) {\n                            xs[key] = xs[key] + delta;\n                        }\n                    }\n                }\n            });\n        });\n    };\n    BaseDAG.prototype.balance = function (xSet) {\n        var posListSet = {};\n        for (var direction in xSet) {\n            for (var key in xSet[direction]) {\n                if (posListSet[key] && posListSet[key].length) {\n                    posListSet[key].push(xSet[direction][key]);\n                }\n                else {\n                    posListSet[key] = [xSet[direction][key]];\n                }\n            }\n        }\n        var finalPosSet = {};\n        for (var key in posListSet) {\n            posListSet[key].sort(function (a, b) { return a - b; });\n            finalPosSet[key] = (posListSet[key][1] + posListSet[key][2]) / 2;\n        }\n        return finalPosSet;\n    };\n    BaseDAG.prototype.calcNodePos = function () {\n        this.addVirtualNode();\n        this.ordering();\n    };\n    BaseDAG.prototype.recoverCycle = function () {\n        var _this = this;\n        this.links.forEach(function (link) {\n            if (link.isReverse) {\n                _this.exchangeLink(link);\n                if (link.linkChildren && link.linkChildren.length) {\n                    link.linkChildren.forEach(function (link) {\n                        if (link.isReverse) {\n                            _this.exchangeLink(link);\n                        }\n                    });\n                }\n            }\n        });\n    };\n    BaseDAG.prototype.clearCycleDfs = function (node, stack, isFirst) {\n        var lastNodeId = stack[stack.length - 1];\n        if (lastNodeId) {\n            if (this.dfsVisited.indexOf(lastNodeId + \"_\" + node.id) > -1) {\n                return;\n            }\n            this.dfsVisited.push(lastNodeId + \"_\" + node.id);\n        }\n        if (stack.indexOf(node.id) > -1) {\n            console.warn('当前图中存在环，已被逆转处理');\n            var link = utils_1.find(this.links, function (link) {\n                return link.source.id === lastNodeId && link.target.id === node.id;\n            });\n            link.isReverse = true;\n        }\n        var LinkList = isFirst ? node.sourceLinks.filter(function (link) { return !link.isCycleRelation; }) : node.sourceLinks;\n        for (var i = 0; i < LinkList.length; i++) {\n            this.clearCycleDfs(LinkList[i].target, tslib_1.__spread(stack, [node.id]), false);\n        }\n        return;\n    };\n    BaseDAG.prototype.exchangeLink = function (link) {\n        var source = link.source;\n        var target = link.target;\n        source.sourceLinks = source.sourceLinks.filter(function (link) {\n            return link.source.id !== source.id || link.target.id !== target.id || !link.isReverse;\n        });\n        source.targetLinks.push(link);\n        target.targetLinks = target.targetLinks.filter(function (link) {\n            return link.source.id !== source.id || link.target.id !== target.id || !link.isReverse;\n        });\n        target.sourceLinks.push(link);\n        link.source = target;\n        link.target = source;\n    };\n    BaseDAG.prototype.clearCycle = function () {\n        var _this = this;\n        this.dfsVisited = [];\n        for (var i = 0; i < this.nodes.length; i++) {\n            this.clearCycleDfs(this.nodes[i], [], true);\n        }\n        this.links.forEach(function (link) {\n            if (link.isReverse) {\n                _this.exchangeLink(link);\n            }\n        });\n    };\n    BaseDAG.prototype.calcNodeLevels = function () {\n        var _this = this;\n        this.nodes.forEach(function (node) {\n            node.linkNumber = node.targetLinks.length + node.sourceLinks.length;\n            node.levelSetted = false;\n        });\n        var shrink = true;\n        var boneNodes = this.nodes;\n        while (shrink) {\n            shrink = false;\n            boneNodes.forEach(function (node) {\n                if (node.linkNumber === 1) {\n                    shrink = true;\n                    node.linkNumber = 0;\n                    node.sourceLinks.forEach(function (link) {\n                        link.target.linkNumber--;\n                    });\n                    node.targetLinks.forEach(function (link) {\n                        link.source.linkNumber--;\n                    });\n                }\n            });\n            boneNodes = boneNodes.filter(function (node) {\n                return node.linkNumber > 0;\n            });\n        }\n        boneNodes.forEach(function (node) {\n            node.isBone = true;\n        });\n        var level = 0;\n        var confirmNodeLevelList = boneNodes;\n        if (boneNodes.length > 0) {\n            var _loop_5 = function () {\n                var nextNodes = [];\n                confirmNodeLevelList.forEach(function (node) {\n                    node.level = level;\n                    node.sourceLinks.forEach(function (link) {\n                        if (!utils_1.find(nextNodes, function (node) {\n                            return node.id === link.target.id;\n                        })) {\n                            nextNodes.push(link.target);\n                        }\n                    });\n                });\n                confirmNodeLevelList = nextNodes;\n                level++;\n            };\n            while (confirmNodeLevelList.length) {\n                _loop_5();\n            }\n            boneNodes.forEach(function (node) {\n                var parentBoneNode = [];\n                var childrenBoneNode = [];\n                node.targetLinks.forEach(function (link) {\n                    if (link.source.isBone) {\n                        parentBoneNode.push(link.source);\n                    }\n                });\n                node.sourceLinks.forEach(function (link) {\n                    if (link.target.isBone) {\n                        childrenBoneNode.push(link.target);\n                    }\n                });\n                node.parentBoneNode = parentBoneNode;\n                node.childrenBoneNode = childrenBoneNode;\n                var minChildLevel = (utils_1.minBy(node.childrenBoneNode, function (boneNode) { return boneNode.level; }) ||\n                    {}).level;\n                if (node.parentBoneNode.length === 0) {\n                    node.level = minChildLevel - 1;\n                }\n                if (minChildLevel && minChildLevel - node.level > 1) {\n                    if (node.childrenBoneNode.length < node.parentBoneNode.length) {\n                        node.level = minChildLevel - 1;\n                    }\n                }\n            });\n        }\n        else {\n            this.nodes[0].level = 0;\n            boneNodes.push(this.nodes[0]);\n        }\n        boneNodes.forEach(function (node) {\n            node.levelSetted = true;\n        });\n        var waitSetLevelNodes = boneNodes;\n        var _loop_6 = function () {\n            var tmpNodeList = [];\n            waitSetLevelNodes.forEach(function (node) {\n                node.sourceLinks.forEach(function (link) {\n                    var targetNode = link.target;\n                    if (!targetNode.levelSetted) {\n                        targetNode.level = node.level + 1;\n                        node.levelSetted = true;\n                        tmpNodeList.push(targetNode);\n                    }\n                });\n                node.targetLinks.forEach(function (link) {\n                    var sourceNode = link.source;\n                    if (!sourceNode.levelSetted) {\n                        sourceNode.level = node.level - 1;\n                        node.levelSetted = true;\n                        tmpNodeList.push(sourceNode);\n                    }\n                });\n            });\n            waitSetLevelNodes = tmpNodeList;\n        };\n        while (waitSetLevelNodes.length) {\n            _loop_6();\n        }\n        var minLevel = utils_1.minBy(this.nodes, function (node) { return node.level; }).level;\n        this.nodes.forEach(function (node) {\n            node.level -= minLevel;\n        });\n        var maxLevel = utils_1.maxBy(this.nodes, function (node) { return node.level; }).level;\n        this.nodesLevelMaxHeight = Array(maxLevel + 1).fill(-Infinity);\n        this.nodes.forEach(function (node) {\n            if (_this.nodesLevelMaxHeight[node.level] < node.nodeHeight) {\n                _this.nodesLevelMaxHeight[node.level] = node.nodeHeight;\n            }\n        });\n    };\n    return BaseDAG;\n}());\nexports.default = BaseDAG;\n//# sourceMappingURL=BaseDAG.js.map"]},"metadata":{},"sourceType":"script"}