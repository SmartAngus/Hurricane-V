{"ast":null,"code":"import * as React from \"react\";\nimport { zoomIdentity } from \"d3-zoom\";\nimport { useLocalStorage } from \"./useLocalStorage\";\nconst {\n  useState,\n  useEffect\n} = React;\nexport function useEditorStore() {\n  const [editorData, setEditorData] = useState();\n  const [nodes, setNodes] = useState([]);\n  const [links, setLinks] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [selectedLinks, setSelectedLinks] = useState([]);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const [editorLocalData, setEditorLocalData] = useLocalStorage(\"editorData\", {\n    id: \"editorData-test\"\n  });\n  const [dragNode, setDragNode] = useState(null);\n  const [currTrans, setCurrTrans] = useState(zoomIdentity);\n  const [copiedNodes, setCopiedNodes] = useState([]);\n  useEffect(() => {\n    var _editorLocalData$node, _editorLocalData$grou, _editorLocalData$link;\n\n    setEditorData(editorLocalData);\n    const newNodes = ((_editorLocalData$node = editorLocalData === null || editorLocalData === void 0 ? void 0 : editorLocalData.nodes) !== null && _editorLocalData$node !== void 0 ? _editorLocalData$node : []).map(item => {\n      return { ...item,\n        ref: React.createRef()\n      };\n    });\n    setNodes(newNodes);\n    const newGroups = ((_editorLocalData$grou = editorLocalData === null || editorLocalData === void 0 ? void 0 : editorLocalData.groups) !== null && _editorLocalData$grou !== void 0 ? _editorLocalData$grou : []).map(item => {\n      return { ...item,\n        ref: React.createRef()\n      };\n    });\n    setGroups(newGroups);\n    setLinks((_editorLocalData$link = editorLocalData === null || editorLocalData === void 0 ? void 0 : editorLocalData.links) !== null && _editorLocalData$link !== void 0 ? _editorLocalData$link : []);\n  }, [editorLocalData]);\n\n  const updateNodes = node => {\n    const index = nodes.findIndex(item => item.id === node.id);\n    const newNodes = [...nodes.slice(0, index), node, ...nodes.slice(index + 1)];\n    setNodes(newNodes);\n  };\n\n  const updateLinks = link => {\n    const index = links.findIndex(item => item.id === link.id);\n    const newLinks = [...links.slice(0, index), link, ...links.slice(index + 1)];\n    setLinks(newLinks);\n  };\n\n  const updateGroups = group => {\n    const index = groups.findIndex(item => item.id === group.id);\n    const newGroups = [...groups.slice(0, index), group, ...groups.slice(index + 1)];\n    setGroups(newGroups);\n  };\n\n  const handleSaveData = async () => {\n    const newNodes = nodes !== null && nodes !== void 0 ? nodes : [];\n    const newGroups = groups !== null && groups !== void 0 ? groups : []; // 保存数据时，需要去掉ref\n\n    newNodes.forEach(node => delete node.ref);\n    newGroups.forEach(group => {\n      delete group.ref;\n      group.nodes.forEach(node => {\n        delete node.ref;\n      });\n    });\n    const result = await setEditorLocalData({ ...editorData,\n      nodes: newNodes,\n      groups: newGroups,\n      links\n    });\n    return result;\n  };\n\n  return {\n    editorData,\n    setEditorData,\n    nodes,\n    setNodes,\n    links,\n    setLinks,\n    updateNodes,\n    updateLinks,\n    selectedLinks,\n    setSelectedLinks,\n    selectedNodes,\n    setSelectedNodes,\n    dragNode,\n    setDragNode,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    editorLocalData,\n    setEditorLocalData,\n    handleSaveData,\n    groups,\n    setGroups,\n    updateGroups\n  };\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/features/editor/hooks/useEditorStore.tsx"],"names":["React","zoomIdentity","useLocalStorage","useState","useEffect","useEditorStore","editorData","setEditorData","nodes","setNodes","links","setLinks","groups","setGroups","selectedLinks","setSelectedLinks","selectedNodes","setSelectedNodes","editorLocalData","setEditorLocalData","id","dragNode","setDragNode","currTrans","setCurrTrans","copiedNodes","setCopiedNodes","newNodes","map","item","ref","createRef","newGroups","updateNodes","node","index","findIndex","slice","updateLinks","link","newLinks","updateGroups","group","handleSaveData","forEach","result"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { Node, Link, Group } from \"../defines\";\nimport { ZoomTransform, zoomIdentity } from \"d3-zoom\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\nconst { useState, useEffect } = React;\n\nexport function useEditorStore() {\n  const [editorData, setEditorData] = useState();\n  const [nodes, setNodes] = useState<Node[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [selectedLinks, setSelectedLinks] = useState<string[]>([]);\n  const [selectedNodes, setSelectedNodes] = useState<string[]>([]);\n  const [editorLocalData, setEditorLocalData] = useLocalStorage(\"editorData\", {\n    id: \"editorData-test\"\n  });\n  const [dragNode, setDragNode] = useState(null);\n\n  const [currTrans, setCurrTrans] = useState<ZoomTransform>(zoomIdentity);\n\n  const [copiedNodes, setCopiedNodes] = useState<Node[]>([]);\n\n  useEffect(() => {\n    setEditorData(editorLocalData);\n\n    const newNodes = (editorLocalData?.nodes ?? []).map(item => {\n      return {\n        ...item,\n        ref: React.createRef()\n      };\n    });\n    setNodes(newNodes);\n\n    const newGroups = (editorLocalData?.groups ?? []).map(item => {\n      return {\n        ...item,\n        ref: React.createRef()\n      };\n    });\n    setGroups(newGroups);\n    setLinks(editorLocalData?.links ?? []);\n  }, [editorLocalData]);\n\n  const updateNodes = (node: Node) => {\n    const index = nodes.findIndex(item => item.id === node.id);\n\n    const newNodes = [\n      ...nodes.slice(0, index),\n      node,\n      ...nodes.slice(index + 1)\n    ];\n\n    setNodes(newNodes);\n  };\n\n  const updateLinks = (link: Link) => {\n    const index = links.findIndex(item => item.id === link.id);\n    const newLinks = [\n      ...links.slice(0, index),\n      link,\n      ...links.slice(index + 1)\n    ];\n\n    setLinks(newLinks);\n  };\n\n  const updateGroups = (group: Group) => {\n    const index = groups.findIndex(item => item.id === group.id);\n\n    const newGroups = [\n      ...groups.slice(0, index),\n      group,\n      ...groups.slice(index + 1)\n    ];\n\n    setGroups(newGroups);\n  };\n\n  const handleSaveData = async () => {\n    const newNodes = nodes ?? [];\n    const newGroups = groups ?? [];\n\n    // 保存数据时，需要去掉ref\n    newNodes.forEach(node => delete node.ref);\n    newGroups.forEach(group => {\n      delete group.ref;\n      group.nodes.forEach(node => {\n        delete node.ref;\n      });\n    });\n\n    const result = await setEditorLocalData({\n      ...(editorData as any),\n      nodes: newNodes,\n      groups: newGroups,\n      links\n    });\n    return result;\n  };\n\n  return {\n    editorData,\n    setEditorData,\n    nodes,\n    setNodes,\n    links,\n    setLinks,\n    updateNodes,\n    updateLinks,\n    selectedLinks,\n    setSelectedLinks,\n    selectedNodes,\n    setSelectedNodes,\n    dragNode,\n    setDragNode,\n    copiedNodes,\n    setCopiedNodes,\n    currTrans,\n    setCurrTrans,\n    editorLocalData,\n    setEditorLocalData,\n    handleSaveData,\n    groups,\n    setGroups,\n    updateGroups\n  };\n}\n"]},"metadata":{},"sourceType":"module"}