{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar dagre = require(\"dagre\");\n\nvar utils_1 = require(\"../Utils/utils\");\n\nvar base_1 = require(\"./base\");\n\nvar GraphLayout = function (_super) {\n  tslib_1.__extends(GraphLayout, _super);\n\n  function GraphLayout(nodes, links, config) {\n    var _this = _super.call(this) || this;\n\n    _this.nodes = _this.getNodes(nodes);\n    _this.links = links;\n    _this.config = config;\n\n    _this.init();\n\n    return _this;\n  }\n\n  GraphLayout.prototype.init = function () {\n    this.g = new dagre.graphlib.Graph();\n    this.g.setGraph(this.config);\n    this.g.setDefaultEdgeLabel(function () {\n      return {};\n    });\n  };\n\n  GraphLayout.prototype.layout = function () {\n    var _this = this;\n\n    this.nodes.forEach(function (node) {\n      var id = node.id,\n          width = node.width,\n          height = node.height;\n\n      _this.g.setNode(id, {\n        id: id,\n        width: width,\n        height: height\n      });\n    });\n    this.links.forEach(function (link) {\n      var u = link.u,\n          v = link.v;\n\n      _this.g.setEdge(u, v);\n    });\n    dagre.layout(this.g);\n    return {\n      nodes: this.nodes.map(function (node) {\n        var _a = _this.g.node(node.id),\n            x = _a.x,\n            y = _a.y;\n\n        return tslib_1.__assign(tslib_1.__assign({}, node), {\n          x: x,\n          y: y\n        });\n      }),\n      links: this.links.map(function (link) {\n        var points = _this.g.edge({\n          v: link.u,\n          w: link.v\n        }).points;\n\n        return tslib_1.__assign(tslib_1.__assign({}, link), {\n          u: link.u,\n          v: link.v,\n          points: points\n        });\n      })\n    };\n  };\n\n  return GraphLayout;\n}(base_1.BaseGroupLayout);\n\nexports.GraphLayout = GraphLayout;\n\nvar GroupGraphLayout = function (_super) {\n  tslib_1.__extends(GroupGraphLayout, _super);\n\n  function GroupGraphLayout(nodes, links, groups, groupLinks, config) {\n    var _this = _super.call(this) || this;\n\n    _this.renderGroups = [];\n    _this.renderNodes = [];\n    _this.renderNodeLinks = [];\n    _this.renderGroupLinks = [];\n    _this.preRenderGroups = [];\n    _this.preRenderNodes = [];\n    _this.preRenderNodeLinks = [];\n    _this.preRenderGroupLinks = [];\n\n    _this.init(nodes, links, groups, groupLinks, config);\n\n    return _this;\n  }\n\n  GroupGraphLayout.prototype.init = function (nodes, links, groups, groupLinks, config) {\n    this.nodes = this.getNodes(nodes);\n    this.links = links;\n    this.groups = this.getGroups(groups);\n    this.groupLinks = groupLinks;\n    this.config = config;\n    this.groupNodeMap = new Map();\n    this.groupLinkMap = new Map();\n    this.getGroupNodeMap();\n  };\n\n  GroupGraphLayout.prototype.getGroupNodeMap = function () {\n    var _this = this;\n\n    this.groups.forEach(function (group) {\n      group.vertexes.forEach(function (vertex) {\n        _this.groupNodeMap.set(vertex.id, group);\n      });\n    });\n  };\n\n  GroupGraphLayout.prototype.getDownGroup = function (groupId) {\n    var _this = this;\n\n    return this.groupLinks.filter(function (link) {\n      return link.u === groupId;\n    }).map(function (link) {\n      var v = link.v;\n      return utils_1.find(_this.groups, function (group) {\n        return group.id === v;\n      });\n    });\n  };\n\n  GroupGraphLayout.prototype.processGroupConnect = function (g, groupId, nodeId, forceNoExpand) {\n    var _this = this;\n\n    if (nodeId === void 0) {\n      nodeId = '';\n    }\n\n    if (forceNoExpand === void 0) {\n      forceNoExpand = false;\n    }\n\n    var downGroups = this.getDownGroup(groupId);\n    var connectId = nodeId || groupId;\n    downGroups.forEach(function (downGroup) {\n      if (downGroup.vertexes.length === 1) {\n        g.setEdge(connectId, downGroup.vertexes[0].id);\n      } else if (downGroup.expand && !forceNoExpand) {\n        var downGroupNodeIds_1 = downGroup.vertexes.map(function (vertex) {\n          return vertex.id;\n        });\n\n        _this.links.filter(function (link) {\n          return link.u === connectId && downGroupNodeIds_1.includes(link.v);\n        }).forEach(function (link) {\n          g.setEdge(link.u, link.v);\n        });\n      } else {\n        g.setEdge(connectId, downGroup.id);\n      }\n    });\n  };\n\n  GroupGraphLayout.prototype.getLayoutInGroup = function (group) {\n    var _this = this;\n\n    var g = new dagre.graphlib.Graph();\n    g.setGraph(this.config.dagreConfig);\n    g.setDefaultEdgeLabel(function () {\n      return {};\n    });\n    var groupNodeIds = group.vertexes.map(function (vertex) {\n      return vertex.id;\n    });\n    var links = [];\n    groupNodeIds.forEach(function (nodeId) {\n      var node = utils_1.find(_this.nodes, function (n) {\n        return n.id === nodeId;\n      });\n      g.setNode(nodeId, {\n        id: nodeId,\n        width: node.width,\n        height: node.height\n      });\n\n      _this.links.filter(function (link) {\n        if (link.u === nodeId && _this.groupNodeMap.has(link.v)) {\n          var nodeGroup = _this.groupNodeMap.get(link.v);\n\n          return nodeGroup.id === group.id;\n        }\n\n        return false;\n      }).forEach(function (link) {\n        links.push(link);\n        g.setEdge(nodeId, link.v);\n      });\n    });\n    dagre.layout(g);\n    return {\n      vertexes: group.vertexes.map(function (vertex) {\n        if (g.hasNode(vertex.id)) {\n          var _a = g.node(vertex.id),\n              x = _a.x,\n              y = _a.y,\n              width = _a.width,\n              height = _a.height;\n\n          return tslib_1.__assign(tslib_1.__assign({}, vertex), {\n            x: x,\n            y: y,\n            width: width,\n            height: height\n          });\n        }\n\n        return vertex;\n      }),\n      edges: links.map(function (link) {\n        var points = g.edge({\n          v: link.u,\n          w: link.v\n        }).points;\n        return tslib_1.__assign(tslib_1.__assign({}, link), {\n          u: link.u,\n          v: link.v,\n          points: points\n        });\n      })\n    };\n  };\n\n  GroupGraphLayout.prototype.getGroupSize = function () {\n    var _this = this;\n\n    var groupPadding = this.config.groupPadding;\n    this.groups = this.groups.map(function (group) {\n      if (group.vertexes.length !== 1 && group.expand) {\n        var maxChildX_1 = -Infinity;\n        var maxChildY_1 = -Infinity;\n        var minChildX_1 = Infinity;\n        var minChildY_1 = Infinity;\n\n        var _a = _this.getLayoutInGroup(group),\n            vertexes = _a.vertexes,\n            edges = _a.edges;\n\n        vertexes.forEach(function (vertex) {\n          var x = vertex.x,\n              y = vertex.y,\n              width = vertex.width,\n              height = vertex.height;\n\n          if (maxChildX_1 < x + width / 2 + groupPadding[1]) {\n            maxChildX_1 = x + width / 2 + groupPadding[1];\n          }\n\n          if (maxChildY_1 < y + height / 2 + groupPadding[2]) {\n            maxChildY_1 = y + height / 2 + groupPadding[2];\n          }\n\n          if (minChildX_1 > x - width / 2 - groupPadding[3]) {\n            minChildX_1 = x - width / 2 - groupPadding[3];\n          }\n\n          if (minChildY_1 > y - height / 2 - groupPadding[0]) {\n            minChildY_1 = y - height / 2 - groupPadding[0];\n          }\n        });\n        var links = edges.map(function (edge) {\n          var points = edge.points.map(function (point) {\n            return {\n              x: point.x - minChildX_1,\n              y: point.y - minChildY_1\n            };\n          });\n          return tslib_1.__assign(tslib_1.__assign({}, edge), {\n            points: points\n          });\n        });\n\n        _this.groupLinkMap.set(group.id, links);\n\n        var groupWidth = maxChildX_1 - minChildX_1;\n        var groupHeight = maxChildY_1 - minChildY_1;\n        return tslib_1.__assign(tslib_1.__assign({}, group), {\n          width: groupWidth,\n          height: groupHeight,\n          vertexes: vertexes.map(function (vertex) {\n            var x = vertex.x,\n                y = vertex.y,\n                width = vertex.width,\n                height = vertex.height;\n            return tslib_1.__assign(tslib_1.__assign({}, vertex), {\n              x: x - width / 2 - minChildX_1,\n              y: y - height / 2 - minChildY_1\n            });\n          })\n        });\n      }\n\n      return group;\n    });\n  };\n\n  GroupGraphLayout.prototype.groupLayout = function () {\n    var _this = this;\n\n    var nodeLinks = [];\n    var g = new dagre.graphlib.Graph({});\n    g.setGraph(this.config.dagreConfig);\n    g.setDefaultEdgeLabel(function () {\n      return {};\n    });\n    this.groups.forEach(function (group) {\n      var groupId = group.id;\n\n      if (group.vertexes.length === 1) {\n        var _a = group.vertexes[0],\n            id = _a.id,\n            width = _a.width,\n            height = _a.height;\n        g.setNode(String(id), {\n          id: id,\n          width: width,\n          height: height\n        });\n\n        _this.processGroupConnect(g, groupId, String(id), true);\n      } else if (!group.expand) {\n        g.setNode(groupId, {\n          id: groupId,\n          width: _this.config.defaultGroupWidth,\n          height: _this.config.defaultGroupHeight\n        });\n\n        _this.processGroupConnect(g, groupId, '', true);\n      } else {\n        g.setNode(groupId, {\n          id: groupId,\n          width: group.width,\n          height: group.height\n        });\n\n        _this.processGroupConnect(g, groupId, '', true);\n      }\n    });\n    dagre.layout(g);\n    this.groups = this.groups.map(function (group) {\n      var groupId = group.id;\n\n      if (g.hasNode(group.id)) {\n        var _a = g.node(groupId),\n            x_1 = _a.x,\n            y_1 = _a.y,\n            width_1 = _a.width,\n            height_1 = _a.height;\n\n        var vertexes = group.vertexes.map(function (vertex) {\n          return tslib_1.__assign(tslib_1.__assign({}, vertex), {\n            x: x_1 - width_1 / 2 + vertex.x + vertex.width / 2,\n            y: y_1 - height_1 / 2 + vertex.y + vertex.height / 2\n          });\n        });\n        var edges = _this.groupLinkMap.get(groupId) || [];\n        edges.forEach(function (edge) {\n          var points = edge.points.map(function (point) {\n            return {\n              x: point.x + (x_1 - width_1 / 2),\n              y: point.y + (y_1 - height_1 / 2)\n            };\n          });\n          nodeLinks.push(tslib_1.__assign(tslib_1.__assign({}, edge), {\n            points: points\n          }));\n        });\n        return tslib_1.__assign(tslib_1.__assign({}, group), {\n          x: x_1,\n          y: y_1,\n          vertexes: vertexes\n        });\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, group), {\n        vertexes: group.vertexes.map(function (vertex) {\n          if (g.hasNode(vertex.id)) {\n            var _a = g.node(vertex.id),\n                x = _a.x,\n                y = _a.y;\n\n            return tslib_1.__assign(tslib_1.__assign({}, vertex), {\n              x: x,\n              y: y\n            });\n          }\n\n          return vertex;\n        })\n      });\n    });\n    var nodes = this.groups.reduce(function (pre, cur) {\n      if (cur.expand || cur.vertexes.length === 1) {\n        return tslib_1.__spread(pre, cur.vertexes);\n      }\n\n      return pre;\n    }, []);\n    this.getGroupNodeMap();\n    this.groupLinks = this.groupLinks.map(function (groupLink) {\n      var u = groupLink.u,\n          v = groupLink.v;\n      var startPoint;\n      var endPoint;\n      var uGroup = utils_1.find(_this.groups, function (group) {\n        return group.id === u;\n      });\n      var vGroup = utils_1.find(_this.groups, function (group) {\n        return group.id === v;\n      });\n\n      var uGroupLink = _this.groupLinks.filter(function (gl) {\n        return gl.u === u;\n      }).sort(function (glA, glB) {\n        var glAGroup = utils_1.find(_this.groups, function (group) {\n          return group.id === glA.v;\n        });\n        var glBGroup = utils_1.find(_this.groups, function (group) {\n          return group.id === glB.v;\n        });\n        var glAGroupPoint = g.edge({\n          v: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n          w: glAGroup.vertexes.length === 1 ? glAGroup.vertexes[0].id : glAGroup.id\n        }).points;\n        var glBGroupPoint = g.edge({\n          v: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n          w: glBGroup.vertexes.length === 1 ? glBGroup.vertexes[0].id : glBGroup.id\n        }).points;\n\n        if (glAGroupPoint[0].y < glBGroupPoint[0].y) {\n          return -1;\n        }\n\n        return 1;\n      });\n\n      var uIndex = utils_1.findIndex(uGroupLink, function (link) {\n        return link.v === v;\n      });\n\n      if (uGroup.vertexes.length === 1) {\n        var vertex = uGroup.vertexes[0];\n        startPoint = {\n          x: vertex.x + vertex.width / 2,\n          y: vertex.y - vertex.height / 2 + (uIndex + 1) / (uGroupLink.length + 1) * vertex.height\n        };\n      } else {\n        startPoint = {\n          x: uGroup.x + uGroup.width / 2,\n          y: uGroup.y - uGroup.height / 2 + (uIndex + 1) / (uGroupLink.length + 1) * uGroup.height\n        };\n      }\n\n      var vGroupLink = _this.groupLinks.filter(function (gl) {\n        return gl.v === v;\n      }).sort(function (glA, glB) {\n        var glAGroup = utils_1.find(_this.groups, function (group) {\n          return group.id === glA.u;\n        });\n        var glBGroup = utils_1.find(_this.groups, function (group) {\n          return group.id === glB.u;\n        });\n        var glAGroupPoint = g.edge({\n          v: glAGroup.vertexes.length === 1 ? glAGroup.vertexes[0].id : glAGroup.id,\n          w: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id\n        }).points;\n        var glBGroupPoint = g.edge({\n          v: glBGroup.vertexes.length === 1 ? glBGroup.vertexes[0].id : glBGroup.id,\n          w: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id\n        }).points;\n\n        if (glAGroupPoint[0].y < glBGroupPoint[0].y) {\n          return -1;\n        }\n\n        return 1;\n      });\n\n      var vIndex = utils_1.findIndex(vGroupLink, function (link) {\n        return link.u === u;\n      });\n\n      if (vGroup.vertexes.length === 1) {\n        var vertex = vGroup.vertexes[0];\n        endPoint = {\n          x: vertex.x - vertex.width / 2,\n          y: vertex.y - vertex.height / 2 + (vIndex + 1) / (vGroupLink.length + 1) * vertex.height\n        };\n      } else {\n        endPoint = {\n          x: vGroup.x - vGroup.width / 2,\n          y: vGroup.y - vGroup.height / 2 + (vIndex + 1) / (vGroupLink.length + 1) * vGroup.height\n        };\n      }\n\n      var points = g.edge({\n        v: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n        w: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id\n      }).points;\n      var middlePoints = points.slice(1, points.length - 1);\n\n      if (middlePoints.length === 1) {\n        middlePoints = [{\n          x: middlePoints[0].x,\n          y: endPoint.y\n        }];\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, groupLink), {\n        points: tslib_1.__spread([startPoint, {\n          x: startPoint.x + 10,\n          y: startPoint.y\n        }], middlePoints, [{\n          x: endPoint.x - 20,\n          y: endPoint.y\n        }, endPoint])\n      });\n    });\n    var groupLinks = [];\n    this.links.filter(function (link) {\n      var uGroup = _this.groupNodeMap.get(link.u);\n\n      var vGroup = _this.groupNodeMap.get(link.v);\n\n      return uGroup.id !== vGroup.id;\n    }).forEach(function (link) {\n      var u = link.u,\n          v = link.v;\n\n      var uGroup = _this.groupNodeMap.get(u);\n\n      var vGroup = _this.groupNodeMap.get(v);\n\n      var uNode = utils_1.find(nodes, function (node) {\n        return node.id === u;\n      });\n      var vNode = utils_1.find(nodes, function (node) {\n        return node.id === v;\n      });\n      var groupLink = utils_1.find(_this.groupLinks, function (link) {\n        return link.u === uGroup.id && link.v === vGroup.id;\n      });\n      var startPoint = groupLink.points[0];\n      var endPoint = groupLink.points[groupLink.points.length - 1];\n      var point_1 = [];\n\n      if (uGroup.expand) {\n        point_1 = [{\n          x: uNode.x + uNode.width / 2,\n          y: uNode.y\n        }, {\n          x: uNode.x + uNode.width / 2 + 10,\n          y: uNode.y\n        }, {\n          x: startPoint.x - 20,\n          y: startPoint.y\n        }, startPoint];\n      }\n\n      var point_3 = [];\n\n      if (vGroup.expand) {\n        point_3 = [endPoint, {\n          x: endPoint.x + 10,\n          y: endPoint.y\n        }, {\n          x: vNode.x - vNode.width / 2 - 20,\n          y: vNode.y\n        }, {\n          x: vNode.x - vNode.width / 2,\n          y: vNode.y\n        }];\n      }\n\n      groupLinks.push(tslib_1.__assign(tslib_1.__assign({}, link), {\n        uGroupId: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n        vGroupId: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id,\n        groupPoints: [point_1, groupLink.points, point_3]\n      }));\n    });\n    return {\n      nodes: nodes,\n      nodeLinks: nodeLinks,\n      groupLinks: groupLinks\n    };\n  };\n\n  GroupGraphLayout.prototype.getTween = function (start, end) {\n    var duration = 100;\n    var times = Math.floor(duration / 16);\n    var paths = [];\n    var interval = (end - start) / times;\n\n    for (var i = 0; i <= times; i++) {\n      paths.push(start + interval * i);\n    }\n\n    return paths;\n  };\n\n  GroupGraphLayout.prototype.getAnimationPath = function (pre, current) {\n    var preWidth = pre.width;\n    var preHeight = pre.height;\n    var preX = pre.x;\n    var preY = pre.y;\n    var currentWidth = current.width;\n    var currentHeight = current.height;\n    var currentX = current.x;\n    var currentY = current.y;\n    return {\n      widthPath: this.getTween(preWidth, currentWidth),\n      heightPath: this.getTween(preHeight, currentHeight),\n      xPath: this.getTween(preX, currentX),\n      yPath: this.getTween(preY, currentY)\n    };\n  };\n\n  GroupGraphLayout.prototype.animation = function () {\n    var _this = this;\n\n    this.renderNodes = this.renderNodes.map(function (renderNode) {\n      var preRenderNode = utils_1.find(_this.preRenderNodes, function (node) {\n        return node.id === renderNode.id;\n      });\n\n      if (preRenderNode) {\n        var _a = _this.getAnimationPath(preRenderNode, renderNode),\n            widthPath = _a.widthPath,\n            heightPath = _a.heightPath,\n            xPath = _a.xPath,\n            yPath = _a.yPath;\n\n        return tslib_1.__assign(tslib_1.__assign({}, renderNode), {\n          widthPath: widthPath,\n          heightPath: heightPath,\n          xPath: xPath,\n          yPath: yPath,\n          isMount: false,\n          width: preRenderNode.width,\n          height: preRenderNode.height,\n          x: preRenderNode.x,\n          y: preRenderNode.y,\n          opacity: 1\n        });\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, renderNode), {\n        isMount: true,\n        opacity: 0,\n        opacityPath: _this.getTween(0, 1)\n      });\n    });\n    this.renderGroups = this.renderGroups.map(function (renderGroup) {\n      var preRenderGroup = utils_1.find(_this.preRenderGroups, function (group) {\n        return group.id === renderGroup.id;\n      });\n\n      if (preRenderGroup) {\n        var _a = _this.getAnimationPath(preRenderGroup, renderGroup),\n            widthPath = _a.widthPath,\n            heightPath = _a.heightPath,\n            xPath = _a.xPath,\n            yPath = _a.yPath;\n\n        return tslib_1.__assign(tslib_1.__assign({}, renderGroup), {\n          widthPath: widthPath,\n          heightPath: heightPath,\n          xPath: xPath,\n          yPath: yPath,\n          isMount: false,\n          width: preRenderGroup.width,\n          height: preRenderGroup.height,\n          x: preRenderGroup.x,\n          y: preRenderGroup.y,\n          opacity: 1\n        });\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, renderGroup), {\n        isMount: true,\n        opacity: 0,\n        opacityPath: _this.getTween(0, 1)\n      });\n    });\n    this.renderNodeLinks = this.renderNodeLinks.map(function (renderNodeLink) {\n      var preNodeRenderLink = utils_1.find(_this.renderNodeLinks, function (link) {\n        return link.u === renderNodeLink.u && link.v === renderNodeLink.v;\n      });\n\n      if (preNodeRenderLink) {\n        return tslib_1.__assign(tslib_1.__assign({}, renderNodeLink), {\n          isMount: false,\n          opacity: 1\n        });\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, renderNodeLink), {\n        isMount: true,\n        opacity: 0,\n        opacityPath: _this.getTween(0, 1)\n      });\n    });\n    this.renderGroupLinks = this.renderGroupLinks.map(function (renderGroupLink) {\n      var preGroupRenderLink = utils_1.find(_this.renderGroupLinks, function (link) {\n        return link.u === renderGroupLink.u && link.v === renderGroupLink.v;\n      });\n\n      if (preGroupRenderLink) {\n        return tslib_1.__assign(tslib_1.__assign({}, renderGroupLink), {\n          isMount: false,\n          opacity: 1\n        });\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, renderGroupLink), {\n        isMount: true,\n        opacity: 0,\n        opacityPath: _this.getTween(0, 1)\n      });\n    });\n  };\n\n  GroupGraphLayout.prototype.update = function (nodes, links, groups, groupLinks, config) {\n    this.init(nodes, links, groups, groupLinks, config);\n  };\n\n  GroupGraphLayout.prototype.layout = function () {\n    this.preRenderNodes = this.renderNodes.map(function (node) {\n      var isMount = node.isMount,\n          widthPath = node.widthPath,\n          heightPath = node.heightPath,\n          xPath = node.xPath,\n          yPath = node.yPath;\n\n      if (isMount) {\n        return node;\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, node), {\n        width: widthPath[widthPath.length - 1],\n        height: heightPath[heightPath.length - 1],\n        x: xPath[xPath.length - 1],\n        y: yPath[yPath.length - 1]\n      });\n    });\n    this.preRenderGroups = this.renderGroups.map(function (group) {\n      var isMount = group.isMount,\n          widthPath = group.widthPath,\n          heightPath = group.heightPath,\n          xPath = group.xPath,\n          yPath = group.yPath;\n\n      if (isMount) {\n        return group;\n      }\n\n      return tslib_1.__assign(tslib_1.__assign({}, group), {\n        width: widthPath[widthPath.length - 1],\n        height: heightPath[heightPath.length - 1],\n        x: xPath[xPath.length - 1],\n        y: yPath[yPath.length - 1]\n      });\n    });\n    this.preRenderNodeLinks = this.renderNodeLinks;\n    this.preRenderGroupLinks = this.renderGroupLinks;\n    this.getGroupSize();\n\n    var _a = this.groupLayout(),\n        nodeLinks = _a.nodeLinks,\n        nodes = _a.nodes,\n        groupLinks = _a.groupLinks;\n\n    this.renderGroups = this.groups.filter(function (group) {\n      return group.vertexes.length !== 1;\n    });\n    this.renderNodes = this.groups.reduce(function (pre, cur) {\n      if (cur.expand || cur.vertexes.length === 1) {\n        return tslib_1.__spread(pre, cur.vertexes);\n      }\n\n      return pre;\n    }, []);\n    this.renderNodeLinks = nodeLinks.map(function (link) {\n      var u = link.u,\n          v = link.v;\n      var uNode = utils_1.find(nodes, function (node) {\n        return node.id === u;\n      });\n      var vNode = utils_1.find(nodes, function (node) {\n        return node.id === v;\n      });\n      var uLinks = nodeLinks.filter(function (link) {\n        return link.u === u;\n      }).sort(function (linkA, linkB) {\n        var linkAStartPointY = linkA.points[0].y;\n        var linkBStartPointY = linkB.points[0].y;\n\n        if (linkAStartPointY < linkBStartPointY) {\n          return -1;\n        }\n\n        return 1;\n      });\n      var uNodeIndex = utils_1.findIndex(uLinks, function (link) {\n        return link.v === v;\n      });\n      var startPoint = {\n        x: uNode.x + uNode.width / 2,\n        y: uNode.y - uNode.height / 2 + (uNodeIndex + 1) / (uLinks.length + 1) * uNode.height\n      };\n      var vLinks = nodeLinks.filter(function (link) {\n        return link.v === v;\n      }).sort(function (linkA, linkB) {\n        var linkAEndPointY = linkA.points[linkA.points.length - 1].y;\n        var linkBEndPointY = linkB.points[linkB.points.length - 1].y;\n\n        if (linkAEndPointY < linkBEndPointY) {\n          return -1;\n        }\n\n        return 1;\n      });\n      var vNodeIndex = utils_1.findIndex(vLinks, function (link) {\n        return link.u === u;\n      });\n      var endPoint = {\n        x: vNode.x - vNode.width / 2,\n        y: vNode.y - vNode.height / 2 + (vNodeIndex + 1) / (vLinks.length + 1) * vNode.height\n      };\n\n      var points = tslib_1.__spread([startPoint, {\n        x: startPoint.x + 10,\n        y: startPoint.y\n      }], link.points.slice(1, link.points.length - 1), [{\n        x: endPoint.x - 20,\n        y: endPoint.y\n      }, endPoint]);\n\n      return tslib_1.__assign(tslib_1.__assign({}, link), {\n        points: points\n      });\n    });\n    this.renderGroupLinks = groupLinks;\n    this.animation();\n    return {\n      renderGroups: this.renderGroups,\n      renderNodes: this.renderNodes,\n      renderNodeLinks: this.renderNodeLinks,\n      renderGroupLinks: this.renderGroupLinks\n    };\n  };\n\n  return GroupGraphLayout;\n}(base_1.BaseGroupLayout);\n\nexports.GroupGraphLayout = GroupGraphLayout;","map":{"version":3,"sources":["../../src/BaseLayout/dagre.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dagre = require(\"dagre\");\nvar utils_1 = require(\"../Utils/utils\");\nvar base_1 = require(\"./base\");\nvar GraphLayout = (function (_super) {\n    tslib_1.__extends(GraphLayout, _super);\n    function GraphLayout(nodes, links, config) {\n        var _this = _super.call(this) || this;\n        _this.nodes = _this.getNodes(nodes);\n        _this.links = links;\n        _this.config = config;\n        _this.init();\n        return _this;\n    }\n    GraphLayout.prototype.init = function () {\n        this.g = new dagre.graphlib.Graph();\n        this.g.setGraph(this.config);\n        this.g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n    };\n    GraphLayout.prototype.layout = function () {\n        var _this = this;\n        this.nodes.forEach(function (node) {\n            var id = node.id, width = node.width, height = node.height;\n            _this.g.setNode(id, { id: id, width: width, height: height });\n        });\n        this.links.forEach(function (link) {\n            var u = link.u, v = link.v;\n            _this.g.setEdge(u, v);\n        });\n        dagre.layout(this.g);\n        return {\n            nodes: this.nodes.map(function (node) {\n                var _a = _this.g.node(node.id), x = _a.x, y = _a.y;\n                return tslib_1.__assign(tslib_1.__assign({}, node), { x: x,\n                    y: y });\n            }),\n            links: this.links.map(function (link) {\n                var points = _this.g.edge({\n                    v: link.u,\n                    w: link.v\n                }).points;\n                return tslib_1.__assign(tslib_1.__assign({}, link), { u: link.u, v: link.v, points: points });\n            })\n        };\n    };\n    return GraphLayout;\n}(base_1.BaseGroupLayout));\nexports.GraphLayout = GraphLayout;\nvar GroupGraphLayout = (function (_super) {\n    tslib_1.__extends(GroupGraphLayout, _super);\n    function GroupGraphLayout(nodes, links, groups, groupLinks, config) {\n        var _this = _super.call(this) || this;\n        _this.renderGroups = [];\n        _this.renderNodes = [];\n        _this.renderNodeLinks = [];\n        _this.renderGroupLinks = [];\n        _this.preRenderGroups = [];\n        _this.preRenderNodes = [];\n        _this.preRenderNodeLinks = [];\n        _this.preRenderGroupLinks = [];\n        _this.init(nodes, links, groups, groupLinks, config);\n        return _this;\n    }\n    GroupGraphLayout.prototype.init = function (nodes, links, groups, groupLinks, config) {\n        this.nodes = this.getNodes(nodes);\n        this.links = links;\n        this.groups = this.getGroups(groups);\n        this.groupLinks = groupLinks;\n        this.config = config;\n        this.groupNodeMap = new Map();\n        this.groupLinkMap = new Map();\n        this.getGroupNodeMap();\n    };\n    GroupGraphLayout.prototype.getGroupNodeMap = function () {\n        var _this = this;\n        this.groups.forEach(function (group) {\n            group.vertexes.forEach(function (vertex) {\n                _this.groupNodeMap.set(vertex.id, group);\n            });\n        });\n    };\n    GroupGraphLayout.prototype.getDownGroup = function (groupId) {\n        var _this = this;\n        return this.groupLinks\n            .filter(function (link) {\n            return link.u === groupId;\n        })\n            .map(function (link) {\n            var v = link.v;\n            return utils_1.find(_this.groups, function (group) {\n                return group.id === v;\n            });\n        });\n    };\n    GroupGraphLayout.prototype.processGroupConnect = function (g, groupId, nodeId, forceNoExpand) {\n        var _this = this;\n        if (nodeId === void 0) { nodeId = ''; }\n        if (forceNoExpand === void 0) { forceNoExpand = false; }\n        var downGroups = this.getDownGroup(groupId);\n        var connectId = nodeId || groupId;\n        downGroups.forEach(function (downGroup) {\n            if (downGroup.vertexes.length === 1) {\n                g.setEdge(connectId, downGroup.vertexes[0].id);\n            }\n            else if (downGroup.expand && !forceNoExpand) {\n                var downGroupNodeIds_1 = downGroup.vertexes.map(function (vertex) { return vertex.id; });\n                _this.links\n                    .filter(function (link) {\n                    return link.u === connectId && downGroupNodeIds_1.includes(link.v);\n                })\n                    .forEach(function (link) {\n                    g.setEdge(link.u, link.v);\n                });\n            }\n            else {\n                g.setEdge(connectId, downGroup.id);\n            }\n        });\n    };\n    GroupGraphLayout.prototype.getLayoutInGroup = function (group) {\n        var _this = this;\n        var g = new dagre.graphlib.Graph();\n        g.setGraph(this.config.dagreConfig);\n        g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n        var groupNodeIds = group.vertexes.map(function (vertex) { return vertex.id; });\n        var links = [];\n        groupNodeIds.forEach(function (nodeId) {\n            var node = utils_1.find(_this.nodes, function (n) {\n                return n.id === nodeId;\n            });\n            g.setNode(nodeId, {\n                id: nodeId,\n                width: node.width,\n                height: node.height\n            });\n            _this.links\n                .filter(function (link) {\n                if (link.u === nodeId && _this.groupNodeMap.has(link.v)) {\n                    var nodeGroup = _this.groupNodeMap.get(link.v);\n                    return nodeGroup.id === group.id;\n                }\n                return false;\n            })\n                .forEach(function (link) {\n                links.push(link);\n                g.setEdge(nodeId, link.v);\n            });\n        });\n        dagre.layout(g);\n        return {\n            vertexes: group.vertexes.map(function (vertex) {\n                if (g.hasNode(vertex.id)) {\n                    var _a = g.node(vertex.id), x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n                    return tslib_1.__assign(tslib_1.__assign({}, vertex), { x: x,\n                        y: y,\n                        width: width,\n                        height: height });\n                }\n                return vertex;\n            }),\n            edges: links.map(function (link) {\n                var points = g.edge({\n                    v: link.u,\n                    w: link.v\n                }).points;\n                return tslib_1.__assign(tslib_1.__assign({}, link), { u: link.u, v: link.v, points: points });\n            })\n        };\n    };\n    GroupGraphLayout.prototype.getGroupSize = function () {\n        var _this = this;\n        var groupPadding = this.config.groupPadding;\n        this.groups = this.groups.map(function (group) {\n            if (group.vertexes.length !== 1 && group.expand) {\n                var maxChildX_1 = -Infinity;\n                var maxChildY_1 = -Infinity;\n                var minChildX_1 = Infinity;\n                var minChildY_1 = Infinity;\n                var _a = _this.getLayoutInGroup(group), vertexes = _a.vertexes, edges = _a.edges;\n                vertexes.forEach(function (vertex) {\n                    var x = vertex.x, y = vertex.y, width = vertex.width, height = vertex.height;\n                    if (maxChildX_1 < x + width / 2 + groupPadding[1]) {\n                        maxChildX_1 = x + width / 2 + groupPadding[1];\n                    }\n                    if (maxChildY_1 < y + height / 2 + groupPadding[2]) {\n                        maxChildY_1 = y + height / 2 + groupPadding[2];\n                    }\n                    if (minChildX_1 > x - width / 2 - groupPadding[3]) {\n                        minChildX_1 = x - width / 2 - groupPadding[3];\n                    }\n                    if (minChildY_1 > y - height / 2 - groupPadding[0]) {\n                        minChildY_1 = y - height / 2 - groupPadding[0];\n                    }\n                });\n                var links = edges.map(function (edge) {\n                    var points = edge.points.map(function (point) {\n                        return { x: point.x - minChildX_1, y: point.y - minChildY_1 };\n                    });\n                    return tslib_1.__assign(tslib_1.__assign({}, edge), { points: points });\n                });\n                _this.groupLinkMap.set(group.id, links);\n                var groupWidth = maxChildX_1 - minChildX_1;\n                var groupHeight = maxChildY_1 - minChildY_1;\n                return tslib_1.__assign(tslib_1.__assign({}, group), { width: groupWidth, height: groupHeight, vertexes: vertexes.map(function (vertex) {\n                        var x = vertex.x, y = vertex.y, width = vertex.width, height = vertex.height;\n                        return tslib_1.__assign(tslib_1.__assign({}, vertex), { x: x - width / 2 - minChildX_1, y: y - height / 2 - minChildY_1 });\n                    }) });\n            }\n            return group;\n        });\n    };\n    GroupGraphLayout.prototype.groupLayout = function () {\n        var _this = this;\n        var nodeLinks = [];\n        var g = new dagre.graphlib.Graph({});\n        g.setGraph(this.config.dagreConfig);\n        g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n        this.groups.forEach(function (group) {\n            var groupId = group.id;\n            if (group.vertexes.length === 1) {\n                var _a = group.vertexes[0], id = _a.id, width = _a.width, height = _a.height;\n                g.setNode(String(id), { id: id, width: width, height: height });\n                _this.processGroupConnect(g, groupId, String(id), true);\n            }\n            else if (!group.expand) {\n                g.setNode(groupId, {\n                    id: groupId,\n                    width: _this.config.defaultGroupWidth,\n                    height: _this.config.defaultGroupHeight\n                });\n                _this.processGroupConnect(g, groupId, '', true);\n            }\n            else {\n                g.setNode(groupId, {\n                    id: groupId,\n                    width: group.width,\n                    height: group.height\n                });\n                _this.processGroupConnect(g, groupId, '', true);\n            }\n        });\n        dagre.layout(g);\n        this.groups = this.groups.map(function (group) {\n            var groupId = group.id;\n            if (g.hasNode(group.id)) {\n                var _a = g.node(groupId), x_1 = _a.x, y_1 = _a.y, width_1 = _a.width, height_1 = _a.height;\n                var vertexes = group.vertexes.map(function (vertex) {\n                    return tslib_1.__assign(tslib_1.__assign({}, vertex), { x: x_1 - width_1 / 2 + vertex.x + vertex.width / 2, y: y_1 - height_1 / 2 + vertex.y + vertex.height / 2 });\n                });\n                var edges = _this.groupLinkMap.get(groupId) || [];\n                edges.forEach(function (edge) {\n                    var points = edge.points.map(function (point) {\n                        return {\n                            x: point.x + (x_1 - width_1 / 2),\n                            y: point.y + (y_1 - height_1 / 2)\n                        };\n                    });\n                    nodeLinks.push(tslib_1.__assign(tslib_1.__assign({}, edge), { points: points }));\n                });\n                return tslib_1.__assign(tslib_1.__assign({}, group), { x: x_1,\n                    y: y_1,\n                    vertexes: vertexes });\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, group), { vertexes: group.vertexes.map(function (vertex) {\n                    if (g.hasNode(vertex.id)) {\n                        var _a = g.node(vertex.id), x = _a.x, y = _a.y;\n                        return tslib_1.__assign(tslib_1.__assign({}, vertex), { x: x,\n                            y: y });\n                    }\n                    return vertex;\n                }) });\n        });\n        var nodes = this.groups.reduce(function (pre, cur) {\n            if (cur.expand || cur.vertexes.length === 1) {\n                return tslib_1.__spread(pre, cur.vertexes);\n            }\n            return pre;\n        }, []);\n        this.getGroupNodeMap();\n        this.groupLinks = this.groupLinks.map(function (groupLink) {\n            var u = groupLink.u, v = groupLink.v;\n            var startPoint;\n            var endPoint;\n            var uGroup = utils_1.find(_this.groups, function (group) { return group.id === u; });\n            var vGroup = utils_1.find(_this.groups, function (group) { return group.id === v; });\n            var uGroupLink = _this.groupLinks.filter(function (gl) {\n                return gl.u === u;\n            }).sort(function (glA, glB) {\n                var glAGroup = utils_1.find(_this.groups, function (group) { return group.id === glA.v; });\n                var glBGroup = utils_1.find(_this.groups, function (group) { return group.id === glB.v; });\n                var glAGroupPoint = g.edge({\n                    v: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n                    w: glAGroup.vertexes.length === 1 ? glAGroup.vertexes[0].id : glAGroup.id,\n                }).points;\n                var glBGroupPoint = g.edge({\n                    v: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n                    w: glBGroup.vertexes.length === 1 ? glBGroup.vertexes[0].id : glBGroup.id,\n                }).points;\n                if (glAGroupPoint[0].y < glBGroupPoint[0].y) {\n                    return -1;\n                }\n                return 1;\n            });\n            var uIndex = utils_1.findIndex(uGroupLink, function (link) { return link.v === v; });\n            if (uGroup.vertexes.length === 1) {\n                var vertex = uGroup.vertexes[0];\n                startPoint = {\n                    x: vertex.x + vertex.width / 2,\n                    y: vertex.y - vertex.height / 2 + ((uIndex + 1) / (uGroupLink.length + 1)) * vertex.height,\n                };\n            }\n            else {\n                startPoint = {\n                    x: uGroup.x + uGroup.width / 2,\n                    y: uGroup.y - uGroup.height / 2 + ((uIndex + 1) / (uGroupLink.length + 1)) * uGroup.height,\n                };\n            }\n            var vGroupLink = _this.groupLinks.filter(function (gl) {\n                return gl.v === v;\n            }).sort(function (glA, glB) {\n                var glAGroup = utils_1.find(_this.groups, function (group) { return group.id === glA.u; });\n                var glBGroup = utils_1.find(_this.groups, function (group) { return group.id === glB.u; });\n                var glAGroupPoint = g.edge({\n                    v: glAGroup.vertexes.length === 1 ? glAGroup.vertexes[0].id : glAGroup.id,\n                    w: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id,\n                }).points;\n                var glBGroupPoint = g.edge({\n                    v: glBGroup.vertexes.length === 1 ? glBGroup.vertexes[0].id : glBGroup.id,\n                    w: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id,\n                }).points;\n                if (glAGroupPoint[0].y < glBGroupPoint[0].y) {\n                    return -1;\n                }\n                return 1;\n            });\n            var vIndex = utils_1.findIndex(vGroupLink, function (link) { return link.u === u; });\n            if (vGroup.vertexes.length === 1) {\n                var vertex = vGroup.vertexes[0];\n                endPoint = {\n                    x: vertex.x - vertex.width / 2,\n                    y: vertex.y - vertex.height / 2 + ((vIndex + 1) / (vGroupLink.length + 1)) * vertex.height,\n                };\n            }\n            else {\n                endPoint = {\n                    x: vGroup.x - vGroup.width / 2,\n                    y: vGroup.y - vGroup.height / 2 + ((vIndex + 1) / (vGroupLink.length + 1)) * vGroup.height,\n                };\n            }\n            var points = g.edge({\n                v: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id,\n                w: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id,\n            }).points;\n            var middlePoints = points.slice(1, points.length - 1);\n            if (middlePoints.length === 1) {\n                middlePoints = [{ x: middlePoints[0].x, y: endPoint.y }];\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, groupLink), { points: tslib_1.__spread([\n                    startPoint,\n                    { x: startPoint.x + 10, y: startPoint.y }\n                ], middlePoints, [\n                    { x: endPoint.x - 20, y: endPoint.y },\n                    endPoint\n                ]) });\n        });\n        var groupLinks = [];\n        this.links\n            .filter(function (link) {\n            var uGroup = _this.groupNodeMap.get(link.u);\n            var vGroup = _this.groupNodeMap.get(link.v);\n            return uGroup.id !== vGroup.id;\n        }).forEach(function (link) {\n            var u = link.u, v = link.v;\n            var uGroup = _this.groupNodeMap.get(u);\n            var vGroup = _this.groupNodeMap.get(v);\n            var uNode = utils_1.find(nodes, function (node) { return node.id === u; });\n            var vNode = utils_1.find(nodes, function (node) { return node.id === v; });\n            var groupLink = utils_1.find(_this.groupLinks, function (link) {\n                return link.u === uGroup.id && link.v === vGroup.id;\n            });\n            var startPoint = groupLink.points[0];\n            var endPoint = groupLink.points[groupLink.points.length - 1];\n            var point_1 = [];\n            if (uGroup.expand) {\n                point_1 = [\n                    { x: uNode.x + uNode.width / 2, y: uNode.y },\n                    { x: uNode.x + uNode.width / 2 + 10, y: uNode.y },\n                    { x: startPoint.x - 20, y: startPoint.y },\n                    startPoint\n                ];\n            }\n            var point_3 = [];\n            if (vGroup.expand) {\n                point_3 = [\n                    endPoint,\n                    { x: endPoint.x + 10, y: endPoint.y },\n                    { x: vNode.x - vNode.width / 2 - 20, y: vNode.y },\n                    { x: vNode.x - vNode.width / 2, y: vNode.y },\n                ];\n            }\n            groupLinks.push(tslib_1.__assign(tslib_1.__assign({}, link), { uGroupId: uGroup.vertexes.length === 1 ? uGroup.vertexes[0].id : uGroup.id, vGroupId: vGroup.vertexes.length === 1 ? vGroup.vertexes[0].id : vGroup.id, groupPoints: [point_1, groupLink.points, point_3] }));\n        });\n        return {\n            nodes: nodes,\n            nodeLinks: nodeLinks,\n            groupLinks: groupLinks\n        };\n    };\n    GroupGraphLayout.prototype.getTween = function (start, end) {\n        var duration = 100;\n        var times = Math.floor(duration / 16);\n        var paths = [];\n        var interval = (end - start) / times;\n        for (var i = 0; i <= times; i++) {\n            paths.push(start + interval * i);\n        }\n        return paths;\n    };\n    GroupGraphLayout.prototype.getAnimationPath = function (pre, current) {\n        var preWidth = pre.width;\n        var preHeight = pre.height;\n        var preX = pre.x;\n        var preY = pre.y;\n        var currentWidth = current.width;\n        var currentHeight = current.height;\n        var currentX = current.x;\n        var currentY = current.y;\n        return {\n            widthPath: this.getTween(preWidth, currentWidth),\n            heightPath: this.getTween(preHeight, currentHeight),\n            xPath: this.getTween(preX, currentX),\n            yPath: this.getTween(preY, currentY)\n        };\n    };\n    GroupGraphLayout.prototype.animation = function () {\n        var _this = this;\n        this.renderNodes = this.renderNodes.map(function (renderNode) {\n            var preRenderNode = utils_1.find(_this.preRenderNodes, function (node) { return node.id === renderNode.id; });\n            if (preRenderNode) {\n                var _a = _this.getAnimationPath(preRenderNode, renderNode), widthPath = _a.widthPath, heightPath = _a.heightPath, xPath = _a.xPath, yPath = _a.yPath;\n                return tslib_1.__assign(tslib_1.__assign({}, renderNode), { widthPath: widthPath,\n                    heightPath: heightPath,\n                    xPath: xPath,\n                    yPath: yPath, isMount: false, width: preRenderNode.width, height: preRenderNode.height, x: preRenderNode.x, y: preRenderNode.y, opacity: 1 });\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, renderNode), { isMount: true, opacity: 0, opacityPath: _this.getTween(0, 1) });\n        });\n        this.renderGroups = this.renderGroups.map(function (renderGroup) {\n            var preRenderGroup = utils_1.find(_this.preRenderGroups, function (group) { return group.id === renderGroup.id; });\n            if (preRenderGroup) {\n                var _a = _this.getAnimationPath(preRenderGroup, renderGroup), widthPath = _a.widthPath, heightPath = _a.heightPath, xPath = _a.xPath, yPath = _a.yPath;\n                return tslib_1.__assign(tslib_1.__assign({}, renderGroup), { widthPath: widthPath,\n                    heightPath: heightPath,\n                    xPath: xPath,\n                    yPath: yPath, isMount: false, width: preRenderGroup.width, height: preRenderGroup.height, x: preRenderGroup.x, y: preRenderGroup.y, opacity: 1 });\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, renderGroup), { isMount: true, opacity: 0, opacityPath: _this.getTween(0, 1) });\n        });\n        this.renderNodeLinks = this.renderNodeLinks.map(function (renderNodeLink) {\n            var preNodeRenderLink = utils_1.find(_this.renderNodeLinks, function (link) { return link.u === renderNodeLink.u && link.v === renderNodeLink.v; });\n            if (preNodeRenderLink) {\n                return tslib_1.__assign(tslib_1.__assign({}, renderNodeLink), { isMount: false, opacity: 1 });\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, renderNodeLink), { isMount: true, opacity: 0, opacityPath: _this.getTween(0, 1) });\n        });\n        this.renderGroupLinks = this.renderGroupLinks.map(function (renderGroupLink) {\n            var preGroupRenderLink = utils_1.find(_this.renderGroupLinks, function (link) { return link.u === renderGroupLink.u && link.v === renderGroupLink.v; });\n            if (preGroupRenderLink) {\n                return tslib_1.__assign(tslib_1.__assign({}, renderGroupLink), { isMount: false, opacity: 1 });\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, renderGroupLink), { isMount: true, opacity: 0, opacityPath: _this.getTween(0, 1) });\n        });\n    };\n    GroupGraphLayout.prototype.update = function (nodes, links, groups, groupLinks, config) {\n        this.init(nodes, links, groups, groupLinks, config);\n    };\n    GroupGraphLayout.prototype.layout = function () {\n        this.preRenderNodes = this.renderNodes.map(function (node) {\n            var isMount = node.isMount, widthPath = node.widthPath, heightPath = node.heightPath, xPath = node.xPath, yPath = node.yPath;\n            if (isMount) {\n                return node;\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, node), { width: widthPath[widthPath.length - 1], height: heightPath[heightPath.length - 1], x: xPath[xPath.length - 1], y: yPath[yPath.length - 1] });\n        });\n        this.preRenderGroups = this.renderGroups.map(function (group) {\n            var isMount = group.isMount, widthPath = group.widthPath, heightPath = group.heightPath, xPath = group.xPath, yPath = group.yPath;\n            if (isMount) {\n                return group;\n            }\n            return tslib_1.__assign(tslib_1.__assign({}, group), { width: widthPath[widthPath.length - 1], height: heightPath[heightPath.length - 1], x: xPath[xPath.length - 1], y: yPath[yPath.length - 1] });\n        });\n        this.preRenderNodeLinks = this.renderNodeLinks;\n        this.preRenderGroupLinks = this.renderGroupLinks;\n        this.getGroupSize();\n        var _a = this.groupLayout(), nodeLinks = _a.nodeLinks, nodes = _a.nodes, groupLinks = _a.groupLinks;\n        this.renderGroups = this.groups.filter(function (group) {\n            return group.vertexes.length !== 1;\n        });\n        this.renderNodes = this.groups.reduce(function (pre, cur) {\n            if (cur.expand || cur.vertexes.length === 1) {\n                return tslib_1.__spread(pre, cur.vertexes);\n            }\n            return pre;\n        }, []);\n        this.renderNodeLinks = nodeLinks.map(function (link) {\n            var u = link.u, v = link.v;\n            var uNode = utils_1.find(nodes, function (node) { return node.id === u; });\n            var vNode = utils_1.find(nodes, function (node) { return node.id === v; });\n            var uLinks = nodeLinks\n                .filter(function (link) { return link.u === u; })\n                .sort(function (linkA, linkB) {\n                var linkAStartPointY = linkA.points[0].y;\n                var linkBStartPointY = linkB.points[0].y;\n                if (linkAStartPointY < linkBStartPointY) {\n                    return -1;\n                }\n                return 1;\n            });\n            var uNodeIndex = utils_1.findIndex(uLinks, function (link) { return link.v === v; });\n            var startPoint = {\n                x: uNode.x + uNode.width / 2,\n                y: uNode.y - uNode.height / 2 + ((uNodeIndex + 1) / (uLinks.length + 1)) * uNode.height\n            };\n            var vLinks = nodeLinks\n                .filter(function (link) { return link.v === v; })\n                .sort(function (linkA, linkB) {\n                var linkAEndPointY = linkA.points[linkA.points.length - 1].y;\n                var linkBEndPointY = linkB.points[linkB.points.length - 1].y;\n                if (linkAEndPointY < linkBEndPointY) {\n                    return -1;\n                }\n                return 1;\n            });\n            var vNodeIndex = utils_1.findIndex(vLinks, function (link) { return link.u === u; });\n            var endPoint = {\n                x: vNode.x - vNode.width / 2,\n                y: vNode.y - vNode.height / 2 + ((vNodeIndex + 1) / (vLinks.length + 1)) * vNode.height\n            };\n            var points = tslib_1.__spread([\n                startPoint,\n                { x: startPoint.x + 10, y: startPoint.y }\n            ], link.points.slice(1, link.points.length - 1), [\n                { x: endPoint.x - 20, y: endPoint.y },\n                endPoint\n            ]);\n            return tslib_1.__assign(tslib_1.__assign({}, link), { points: points });\n        });\n        this.renderGroupLinks = groupLinks;\n        this.animation();\n        return {\n            renderGroups: this.renderGroups,\n            renderNodes: this.renderNodes,\n            renderNodeLinks: this.renderNodeLinks,\n            renderGroupLinks: this.renderGroupLinks,\n        };\n    };\n    return GroupGraphLayout;\n}(base_1.BaseGroupLayout));\nexports.GroupGraphLayout = GroupGraphLayout;\n//# sourceMappingURL=dagre.js.map"]},"metadata":{},"sourceType":"script"}