{"ast":null,"code":"import { findIndex } from '../Utils/utils';\nexport class BaseGroupLayout {\n  constructor() {\n    this.g = void 0;\n    this.nodes = void 0;\n    this.links = void 0;\n    this.groups = void 0;\n  }\n\n  getNodes(nodes) {\n    // node 根据 id 排序，@Todo 暂时转化成 Number，后续可以开放配置项\n    return nodes.slice().sort((nodeA, nodeB) => {\n      const nodeAId = Number(nodeA.id);\n      const nodeBId = Number(nodeB.id);\n\n      if (nodeAId < nodeBId) {\n        return -1;\n      } else if (nodeAId > nodeBId) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  getGroups(groups) {\n    // group 根据 node 序列排序\n    return groups.slice().sort((groupA, groupB) => {\n      const minNodeIdInGroupA = Math.min(...groupA.vertexes.map(vertex => {\n        return findIndex(this.nodes, node => node.id === vertex.id);\n      }));\n      const minNodeIdInGroupB = Math.min(...groupB.vertexes.map(vertex => {\n        return findIndex(this.nodes, node => node.id === vertex.id);\n      }));\n\n      if (minNodeIdInGroupA < minNodeIdInGroupB) {\n        return -1;\n      } else if (minNodeIdInGroupA > minNodeIdInGroupB) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/majy/work/bici/code/editor-demo/src/regraph/BaseLayout/base.ts"],"names":["findIndex","BaseGroupLayout","g","nodes","links","groups","getNodes","slice","sort","nodeA","nodeB","nodeAId","Number","id","nodeBId","getGroups","groupA","groupB","minNodeIdInGroupA","Math","min","vertexes","map","vertex","node","minNodeIdInGroupB"],"mappings":"AAEA,SAASA,SAAT,QAA0B,gBAA1B;AAEA,OAAO,MAAMC,eAAN,CAIL;AAAA;AAAA,SACAC,CADA;AAAA,SAEAC,KAFA;AAAA,SAGAC,KAHA;AAAA,SAIAC,MAJA;AAAA;;AAMAC,EAAAA,QAAQ,CAACH,KAAD,EAA0B;AAChC;AACA,WAAOA,KAAK,CAACI,KAAN,GAAcC,IAAd,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1C,YAAMC,OAAO,GAAGC,MAAM,CAACH,KAAK,CAACI,EAAP,CAAtB;AACA,YAAMC,OAAO,GAAGF,MAAM,CAACF,KAAK,CAACG,EAAP,CAAtB;;AACA,UAAIF,OAAO,GAAGG,OAAd,EAAuB;AACrB,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIH,OAAO,GAAGG,OAAd,EAAuB;AAC5B,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KATM,CAAP;AAUD;;AAEDC,EAAAA,SAAS,CAACV,MAAD,EAAmC;AAC1C;AACA,WAAOA,MAAM,CAACE,KAAP,GAAeC,IAAf,CAAoB,CAACQ,MAAD,EAASC,MAAT,KAAoB;AAC7C,YAAMC,iBAAiB,GAAGC,IAAI,CAACC,GAAL,CACxB,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,GAAhB,CAAoBC,MAAM,IAAI;AAC/B,eAAOvB,SAAS,CAAC,KAAKG,KAAN,EAAaqB,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYU,MAAM,CAACV,EAAxC,CAAhB;AACD,OAFE,CADqB,CAA1B;AAKA,YAAMY,iBAAiB,GAAGN,IAAI,CAACC,GAAL,CACxB,GAAGH,MAAM,CAACI,QAAP,CAAgBC,GAAhB,CAAoBC,MAAM,IAAI;AAC/B,eAAOvB,SAAS,CAAC,KAAKG,KAAN,EAAaqB,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYU,MAAM,CAACV,EAAxC,CAAhB;AACD,OAFE,CADqB,CAA1B;;AAKA,UAAIK,iBAAiB,GAAGO,iBAAxB,EAA2C;AACzC,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIP,iBAAiB,GAAGO,iBAAxB,EAA2C;AAChD,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KAjBM,CAAP;AAkBD;;AAxCD","sourcesContent":["import * as dagre from 'dagre';\nimport { Vertex, BaseVertex, Edge, BaseEdge, VertexGroup } from '../type';\nimport { findIndex } from '../Utils/utils';\n\nexport class BaseGroupLayout<\n  N extends BaseVertex & { width: number; height: number },\n  NL extends BaseEdge,\n  G extends BaseVertex & { expand: boolean; width?: number; height?: number },\n> {\n  g: dagre.graphlib.Graph;\n  nodes: Vertex<N>[];\n  links: Edge<NL>[];\n  groups: VertexGroup<N, G>[];\n\n  getNodes(nodes: Array<Vertex<N>>) {\n    // node 根据 id 排序，@Todo 暂时转化成 Number，后续可以开放配置项\n    return nodes.slice().sort((nodeA, nodeB) => {\n      const nodeAId = Number(nodeA.id);\n      const nodeBId = Number(nodeB.id);\n      if (nodeAId < nodeBId) {\n        return -1;\n      } else if (nodeAId > nodeBId) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n\n  getGroups(groups: Array<VertexGroup<N, G>>) {\n    // group 根据 node 序列排序\n    return groups.slice().sort((groupA, groupB) => {\n      const minNodeIdInGroupA = Math.min(\n        ...groupA.vertexes.map(vertex => {\n          return findIndex(this.nodes, node => node.id === vertex.id);\n        })\n      );\n      const minNodeIdInGroupB = Math.min(\n        ...groupB.vertexes.map(vertex => {\n          return findIndex(this.nodes, node => node.id === vertex.id);\n        })\n      );\n      if (minNodeIdInGroupA < minNodeIdInGroupB) {\n        return -1;\n      } else if (minNodeIdInGroupA > minNodeIdInGroupB) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}